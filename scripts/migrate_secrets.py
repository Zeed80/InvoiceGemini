#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ InvoiceGemini –≤ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É.
–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑ —Å—Ç–∞—Ä—ã—Ö –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/migrate_secrets.py
"""

import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout)
        ]
    )
    return logging.getLogger(__name__)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏."""
    logger = setup_logging()
    
    print("üîí InvoiceGemini Security Migration Tool")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ–∫—Ä–µ—Ç–æ–≤
        from config.secrets import SecretsManager
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        secrets_manager = SecretsManager(project_root=str(project_root))
        
        logger.info(f"–ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {secrets_manager.project_root}")
        logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤: {secrets_manager.secrets_dir}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ–∫—Ä–µ—Ç–æ–≤
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤...")
        status_before = secrets_manager.get_all_secret_status()
        
        print("\nüìä –°—Ç–∞—Ç—É—Å —Å–µ–∫—Ä–µ—Ç–æ–≤ –î–û –º–∏–≥—Ä–∞—Ü–∏–∏:")
        for secret, is_valid in status_before.items():
            status_icon = "‚úÖ" if is_valid else "‚ùå"
            print(f"  {status_icon} {secret}: {'–í–∞–ª–∏–¥–µ–Ω' if is_valid else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç/–ù–µ–≤–∞–ª–∏–¥–µ–Ω'}")
        
        # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –∏–∑ —à–∞–±–ª–æ–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞...")
        if secrets_manager.create_env_template():
            print("  ‚úÖ –°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example")
            print("  ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø–æ–ª–Ω–∏—Ç–µ .env —Ñ–∞–π–ª —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏!")
        else:
            print("  ‚ÑπÔ∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ç–∞—Ä—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
        print("\nüîÑ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤...")
        secrets_manager.cleanup_legacy_secrets()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        status_after = secrets_manager.get_all_secret_status()
        
        print("\nüìä –°—Ç–∞—Ç—É—Å —Å–µ–∫—Ä–µ—Ç–æ–≤ –ü–û–°–õ–ï –º–∏–≥—Ä–∞—Ü–∏–∏:")
        improved_secrets = []
        for secret, is_valid in status_after.items():
            status_icon = "‚úÖ" if is_valid else "‚ùå"
            print(f"  {status_icon} {secret}: {'–í–∞–ª–∏–¥–µ–Ω' if is_valid else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç/–ù–µ–≤–∞–ª–∏–¥–µ–Ω'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
            if status_before.get(secret, False) != is_valid and is_valid:
                improved_secrets.append(secret)
        
        # –û—Ç—á–µ—Ç –æ–± —É–ª—É—á—à–µ–Ω–∏—è—Ö
        if improved_secrets:
            print(f"\nüéâ –£–ª—É—á—à–µ–Ω—ã —Å–µ–∫—Ä–µ—Ç—ã: {', '.join(improved_secrets)}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
        valid_count = sum(status_after.values())
        total_count = len(status_after)
        
        print(f"\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –í–∞–ª–∏–¥–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤: {valid_count}/{total_count}")
        print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {(valid_count/total_count)*100:.1f}%")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        
        missing_secrets = [secret for secret, valid in status_after.items() if not valid]
        if missing_secrets:
            print(f"  üìù –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ–∫—Ä–µ—Ç—ã: {', '.join(missing_secrets)}")
            print(f"  üìÅ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
            
            if "GOOGLE_API_KEY" in missing_secrets:
                print(f"  üîë Google API Key: https://makersuite.google.com/app/apikey")
            if "HF_TOKEN" in missing_secrets:
                print(f"  ü§ó Hugging Face Token: https://huggingface.co/settings/tokens")
        else:
            print(f"  ‚úÖ –í—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ .gitignore
        gitignore_path = project_root / ".gitignore"
        if gitignore_path.exists():
            with open(gitignore_path, 'r', encoding='utf-8') as f:
                gitignore_content = f.read()
            
            if ".env" in gitignore_content and "data/secrets/" in gitignore_content:
                print(f"  üîí .gitignore –Ω–∞—Å—Ç—Ä–æ–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ")
            else:
                print(f"  ‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .gitignore –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤")
        
        print(f"\nüöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìñ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º. –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: config/secrets.py")
        
        return 0
        
    except ImportError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        logger.error("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return 1
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return 1

if __name__ == "__main__":
    sys.exit(main()) 