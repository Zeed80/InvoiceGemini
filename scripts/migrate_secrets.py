#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/migrate_secrets.py
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å Python
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

import logging
from typing import Dict

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤."""
    print("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë      –ú–∏–≥—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤ InvoiceGemini          ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        from app.settings_manager import settings_manager
        from app.security.secrets_manager import get_secrets_manager
        
        secrets_manager = get_secrets_manager()
        
        logger.info(f"–ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {project_root}")
        logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤: {secrets_manager.secrets_file.parent}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ–∫—Ä–µ—Ç–æ–≤
        print("\nüìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ–∫—Ä–µ—Ç–æ–≤:")
        status_before = {}
        for secret in secrets_manager.KNOWN_SECRETS:
            value = secrets_manager.get_secret(secret)
            is_valid = bool(value) and secrets_manager.validate_secret(secret, value)
            status_before[secret] = is_valid
            status_icon = "‚úÖ" if is_valid else "‚ùå"
            print(f"  {status_icon} {secret}: {'–í–∞–ª–∏–¥–µ–Ω' if is_valid else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç/–ù–µ–≤–∞–ª–∏–¥–µ–Ω'}")
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞
        print("\nÔøΩ –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ .env —Ñ–∞–π–ª–∞...")
        env_template_path = secrets_manager.export_env_template()
        print(f"   –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω: {env_template_path}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        print("\nüîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –∏–∑ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        migration_results = secrets_manager.migrate_from_settings(settings_manager)
        
        for key, success in migration_results.items():
            icon = "‚úÖ" if success else "‚ùå"
            print(f"  {icon} {key}: {'–£—Å–ø–µ—à–Ω–æ' if success else '–ù–µ –Ω–∞–π–¥–µ–Ω/–Ω–µ–≤–∞–ª–∏–¥–µ–Ω'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        print("\nÔøΩ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ–∫—Ä–µ—Ç–æ–≤:")
        status_after = {}
        improved_secrets = []
        for secret in secrets_manager.KNOWN_SECRETS:
            value = secrets_manager.get_secret(secret)
            is_valid = bool(value) and secrets_manager.validate_secret(secret, value)
            status_after[secret] = is_valid
            status_icon = "‚úÖ" if is_valid else "‚ùå"
            print(f"  {status_icon} {secret}: {'–í–∞–ª–∏–¥–µ–Ω' if is_valid else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç/–ù–µ–≤–∞–ª–∏–¥–µ–Ω'}")
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è
            if status_before.get(secret, False) != is_valid and is_valid:
                improved_secrets.append(secret)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ–∫—Ä–µ—Ç—ã
        if any(status_after.values()):
            print("\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
            backup_path = secrets_manager.create_backup()
            print(f"   –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º .gitignore
        print("\nüîí –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore...")
        gitignore_path = project_root / ".gitignore"
        if gitignore_path.exists():
            gitignore_content = gitignore_path.read_text()
            security_patterns = ["data/security/", ".encryption.key", ".secrets.enc", "*.enc"]
            missing_patterns = [p for p in security_patterns if p not in gitignore_content]
            
            if missing_patterns:
                print("   ‚ö†Ô∏è  –î–æ–±–∞–≤—å—Ç–µ –≤ .gitignore —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
                for pattern in missing_patterns:
                    print(f"      {pattern}")
            else:
                print("   ‚úÖ –í—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ .gitignore")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        total_secrets = len(secrets_manager.KNOWN_SECRETS)
        valid_secrets = sum(1 for v in status_after.values() if v)
        print(f"   –í—Å–µ–≥–æ —Å–µ–∫—Ä–µ—Ç–æ–≤: {total_secrets}")
        print(f"   –í–∞–ª–∏–¥–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤: {valid_secrets}")
        
        if improved_secrets:
            print(f"\nüéâ –£–ª—É—á—à–µ–Ω—ã —Å–µ–∫—Ä–µ—Ç—ã: {', '.join(improved_secrets)}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        missing_secrets = [secret for secret, valid in status_after.items() if not valid]
        if missing_secrets:
            print("\nüìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print(f"  üìù –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ–∫—Ä–µ—Ç—ã: {', '.join(missing_secrets)}")
            print(f"  ÔøΩ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª {env_template_path} –∫–∞–∫ –æ–±—Ä–∞–∑–µ—Ü")
            print("\n  üîë –ì–¥–µ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏:")
            if "google_api_key" in missing_secrets:
                print(f"  üåê Google API Key: https://console.cloud.google.com/apis/credentials")
            if "hf_token" in missing_secrets:
                print(f"  ü§ó Hugging Face Token: https://huggingface.co/settings/tokens")
            if "openai_api_key" in missing_secrets:
                print(f"  ü§ñ OpenAI API Key: https://platform.openai.com/api-keys")
            if "anthropic_api_key" in missing_secrets:
                print(f"  üß† Anthropic API Key: https://console.anthropic.com/account/keys")
        
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main()) 