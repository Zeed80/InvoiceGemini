#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è TrOCR –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ —Å LLM Gemini

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ InvoiceGemini:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é LLM Gemini
- –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
- –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ TrOCR

–ó–∞–ø—É—Å–∫:
    python demo_automated_trocr_dataset.py

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - API –∫–ª—é—á Google Gemini (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ InvoiceGemini)
    - –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 2-5 –ì–ë)
    - Python 3.8+, PyQt6, Transformers
"""

import os
import sys
import logging
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–º–æ"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('demo_automated_trocr.log', encoding='utf-8')
        ]
    )
    return logging.getLogger(__name__)

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –¥–µ–º–æ"""
    logger = logging.getLogger(__name__)
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    if sys.version_info < (3, 8):
        logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
    required_modules = [
        'PyQt6', 'torch', 'transformers', 'PIL', 'numpy', 'pandas'
    ]
    
    for module in required_modules:
        try:
            __import__(module)
            logger.info(f"‚úÖ {module} –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError:
            logger.error(f"‚ùå {module} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Gemini
    try:
        import google.generativeai as genai
        logger.info("‚úÖ Google Generative AI –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        logger.error("‚ùå google-generativeai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Enhanced TrOCR –º–æ–¥—É–ª—å
    try:
        from app.training.enhanced_trocr_dataset_preparator import (
            EnhancedTrOCRDatasetPreparator, 
            EnhancedTrOCRConfig
        )
        logger.info("‚úÖ Enhanced TrOCR Dataset Preparator –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError as e:
        logger.error(f"‚ùå Enhanced TrOCR Dataset Preparator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False
    
    logger.info("‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
    return True

def check_api_key():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ Gemini"""
    logger = logging.getLogger(__name__)
    
    try:
        from app.settings_manager import settings_manager
        api_key = settings_manager.get_gemini_api_key()
        
        if api_key:
            logger.info("‚úÖ API –∫–ª—é—á Gemini –Ω–∞–π–¥–µ–Ω")
            return True
        else:
            logger.error("‚ùå API –∫–ª—é—á Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            logger.info("üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á –≤ InvoiceGemini: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞: {e}")
        return False

def create_demo_images():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger = logging.getLogger(__name__)
    
    logger.info("üé® –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    try:
        from PIL import Image, ImageDraw, ImageFont
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –¥–µ–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        demo_images_dir = project_root / "demo_images"
        demo_images_dir.mkdir(exist_ok=True)
        
        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        demo_templates = [
            {
                "filename": "invoice_001.png",
                "content": [
                    "–û–û–û \"–¢–µ—Ö–Ω–æ–°–µ—Ä–≤–∏—Å\"",
                    "–ò–ù–ù: 7722334455",
                    "–°—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä–∞ ‚ÑñSF-2024-001",
                    "–æ—Ç 15 —è–Ω–≤–∞—Ä—è 2024 –≥.",
                    "",
                    "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: –û–û–û \"–°—Ç—Ä–æ–π–ú–∏—Ä\"",
                    "–ò–ù–ù: 7733445566",
                    "",
                    "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: –ö—Ä–µ–ø–µ–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ú8",
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 100 —à—Ç.",
                    "–¶–µ–Ω–∞: 15,00 —Ä—É–±.",
                    "–°—É–º–º–∞: 1 500,00 —Ä—É–±.",
                    "",
                    "–ò—Ç–æ–≥–æ –±–µ–∑ –ù–î–°: 1 500,00 —Ä—É–±.",
                    "–ù–î–° 20%: 300,00 —Ä—É–±.",
                    "–í—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: 1 800,00 —Ä—É–±."
                ]
            },
            {
                "filename": "receipt_001.png",
                "content": [
                    "–ú–∞–≥–∞–∑–∏–Ω \"–ü—Ä–æ–¥—É–∫—Ç—ã\"",
                    "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, 15",
                    "–ß–µ–∫ ‚Ññ000123456",
                    "15.01.2024 14:25",
                    "",
                    "–•–ª–µ–± –±–µ–ª—ã–π          45,90",
                    "–ú–æ–ª–æ–∫–æ 1–ª           89,50",
                    "–°—ã—Ä –†–æ—Å—Å–∏–π—Å–∫–∏–π     245,00",
                    "–ò—Ç–æ–≥–æ:             380,40",
                    "",
                    "–ù–∞–ª–∏—á–Ω—ã–º–∏:         400,00",
                    "–°–¥–∞—á–∞:              19,60",
                    "",
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
                ]
            },
            {
                "filename": "document_001.png",
                "content": [
                    "–î–û–ö–£–ú–ï–ù–¢ ‚ÑñDOC-2024-001",
                    "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 15.01.2024",
                    "",
                    "–¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï",
                    "",
                    "1. –û–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:",
                    "   - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
                    "   - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π",
                    "   - –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    "",
                    "2. –°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
                    "   –ù–∞—á–∞–ª–æ: 16.01.2024",
                    "   –û–∫–æ–Ω—á–∞–Ω–∏–µ: 30.01.2024",
                    "",
                    "–ü–æ–¥–ø–∏—Å—å: _________________",
                    "–î–∞—Ç–∞: ___________________"
                ]
            }
        ]
        
        created_images = []
        
        for template in demo_templates:
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            width, height = 600, 800
            image = Image.new('RGB', (width, height), 'white')
            draw = ImageDraw.Draw(image)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç
            try:
                font = ImageFont.truetype("arial.ttf", 14)
            except:
                font = ImageFont.load_default()
            
            # –†–∞–∑–º–µ—â–∞–µ–º —Ç–µ–∫—Å—Ç
            y_offset = 50
            line_height = 25
            
            for line in template["content"]:
                if line.strip():
                    x_offset = 30
                    draw.text((x_offset, y_offset), line, fill='black', font=font)
                y_offset += line_height
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_path = demo_images_dir / template["filename"]
            image.save(image_path, "PNG", quality=95)
            created_images.append(str(image_path))
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: {template['filename']}")
        
        logger.info(f"üé® –°–æ–∑–¥–∞–Ω–æ {len(created_images)} –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return created_images
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        return []

def run_automated_demo():
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    logger = logging.getLogger(__name__)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è TrOCR –¥–∞—Ç–∞—Å–µ—Ç–∞")
    
    try:
        from app.training.enhanced_trocr_dataset_preparator import (
            EnhancedTrOCRDatasetPreparator,
            EnhancedTrOCRConfig,
            create_automated_trocr_dataset
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        demo_images = create_demo_images()
        if not demo_images:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return False
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ
        config = EnhancedTrOCRConfig(
            enable_llm_annotation=True,
            llm_model="models/gemini-2.0-flash-exp",
            max_llm_requests_per_minute=30,  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –¥–µ–º–æ
            llm_confidence_threshold=0.7,
            image_size=(384, 384),
            enable_augmentation=True,
            max_target_length=256,
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–µ–º–æ
            min_text_length_chars=5,
            max_text_length_chars=1000,
            enable_quality_filter=True
        )
        
        # –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –¥–µ–º–æ
        output_path = project_root / "demo_trocr_dataset"
        
        logger.info("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–µ–º–æ:")
        logger.info(f"   ‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(demo_images)}")
        logger.info(f"   ‚Ä¢ –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: 100")
        logger.info(f"   ‚Ä¢ LLM –º–æ–¥–µ–ª—å: {config.llm_model}")
        logger.info(f"   ‚Ä¢ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {output_path}")
        
        # Callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        def progress_callback(progress):
            if progress % 10 == 0:  # –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—ã–µ 10%
                logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
        logger.info("ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
        
        datasets = create_automated_trocr_dataset(
            source_images=demo_images,
            output_path=str(output_path),
            num_synthetic=100,  # –ù–µ–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–µ–º–æ
            config=config,
            progress_callback=progress_callback
        )
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("üéâ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        logger.info("üìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã:")
        
        for split_name, split_path in datasets.items():
            logger.info(f"   ‚Ä¢ {split_name}: {split_path}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ
            try:
                split_dir = Path(split_path)
                if split_dir.exists():
                    files_count = len(list(split_dir.glob("*.json")))
                    logger.info(f"     –§–∞–π–ª–æ–≤: {files_count}")
            except:
                pass
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞:")
        
        try:
            metadata_file = output_path / "enhanced_metadata.json"
            if metadata_file.exists():
                import json
                with open(metadata_file, 'r', encoding='utf-8') as f:
                    metadata = json.load(f)
                
                quality_stats = metadata.get("quality_stats", {})
                if quality_stats:
                    logger.info(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π confidence: {quality_stats.get('avg_confidence', 0):.2f}")
                    logger.info(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {quality_stats.get('avg_text_length', 0):.0f} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                annotation_sources = metadata.get("annotation_sources", {})
                if annotation_sources:
                    logger.info("   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π:")
                    for source, count in annotation_sources.items():
                        logger.info(f"     - {source}: {count}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {e}")
        
        logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path}")
        logger.info("üí° –°–æ–∑–¥–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è TrOCR –º–æ–¥–µ–ª–∏")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ"""
    print("ü§ñ InvoiceGemini - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è TrOCR –¥–∞—Ç–∞—Å–µ—Ç–æ–≤")
    print("=" * 80)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_logging()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if not check_requirements():
        print("‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    if not check_api_key():
        print("‚ùå API –∫–ª—é—á Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á –≤ InvoiceGemini –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return 1
    
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
    success = run_automated_demo()
    
    if success:
        print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üìä –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π TrOCR –¥–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é LLM Gemini")
        print("üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
        return 0
    else:
        print("\n‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code) 