#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∏–∑–≤–ª–µ–∫–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –º–æ–¥–µ–ª–∏.
"""

import json
import os
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass, asdict
from .settings_manager import settings_manager
from . import config

@dataclass
class TableField:
    """–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    id: str                    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—è
    display_name: str          # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
    description: str           # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
    data_type: str            # –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö (text, number, date, currency)
    required: bool            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ª–∏ –ø–æ–ª–µ
    priority: int             # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-–≤—ã—Å—à–∏–π, 5-–Ω–∏–∑—à–∏–π)
    position: int             # –ü–æ–∑–∏—Ü–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ (–¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
    gemini_keywords: List[str] # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è Gemini API
    layoutlm_labels: List[str] # –õ–µ–π–±–ª—ã –¥–ª—è LayoutLM
    ocr_patterns: List[str]    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è OCR/regex –ø–æ–∏—Å–∫–∞
    enabled: bool             # –í–∫–ª—é—á–µ–Ω–æ –ª–∏ –ø–æ–ª–µ

class FieldManager:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª–µ–π."""
        self.fields_config_path = os.path.join(config.APP_DATA_PATH, 'table_fields.json')
        self._fields: Dict[str, TableField] = {}
        
        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö
        if os.path.exists(self.fields_config_path):
            print("üìÇ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö")
            self._load_custom_fields()
        else:
            print("üìÇ –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            self._load_default_fields()
            # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç—ã –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.save_fields_config()
    
    def _load_default_fields(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        default_fields = [
            TableField(
                id="sender",
                display_name="Sender",
                description="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏-–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞",
                data_type="text",
                required=True,
                priority=1,
                position=1,
                gemini_keywords=["–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ø–æ—Å—Ç–∞–≤—â–∏–∫", "company", "supplier", "vendor", "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"],
                layoutlm_labels=["SELLER", "VENDOR", "COMPANY"],
                ocr_patterns=[r"–û–û–û.*", r"–ò–ü.*", r"–ê–û.*", r"–ü–ê–û.*"],
                enabled=True
            ),
            TableField(
                id="invoice_number",
                display_name="‚Ññ Invoice",
                description="–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞, –∏–Ω–≤–æ–π—Å–∞ –∏–ª–∏ —Ñ–∞–∫—Ç—É—Ä—ã",
                data_type="text",
                required=True,
                priority=1,
                position=2,
                gemini_keywords=["‚Ññ –°—á–µ—Ç–∞", "‚Ññ —Å—á–µ—Ç–∞", "–Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞", "invoice_number", "—Å—á–µ—Ç ‚Ññ"],
                layoutlm_labels=["INVOICE_NUMBER", "DOC_NUMBER"],
                ocr_patterns=[r"‚Ññ\s*\d+", r"—Å—á–µ—Ç\s*‚Ññ?\s*\d+", r"–∏–Ω–≤–æ–π—Å\s*‚Ññ?\s*\d+"],
                enabled=True
            ),
            TableField(
                id="invoice_date",
                display_name="Invoice Date",
                description="–î–∞—Ç–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞ –∏–ª–∏ –∏–Ω–≤–æ–π—Å–∞",
                data_type="date",
                required=True,
                priority=1,
                position=3,
                gemini_keywords=["–î–∞—Ç–∞ —Å—á–µ—Ç–∞", "–¥–∞—Ç–∞ —Å—á–µ—Ç–∞", "invoice_date", "date", "–¥–∞—Ç–∞"],
                layoutlm_labels=["DATE", "INVOICE_DATE"],
                ocr_patterns=[r"\d{1,2}\.\d{1,2}\.\d{4}", r"\d{1,2}\s+\w+\s+\d{4}"],
                enabled=True
            ),
            TableField(
                id="total",
                display_name="Total",
                description="–û–±—â–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ —Å —É—á–µ—Ç–æ–º –ù–î–°",
                data_type="currency",
                required=True,
                priority=1,
                position=4,
                gemini_keywords=["–°—É–º–º–∞ —Å –ù–î–°", "—Å—É–º–º–∞ —Å –Ω–¥—Å", "total", "–∏—Ç–æ–≥–æ", "–∫ –æ–ø–ª–∞—Ç–µ"],
                layoutlm_labels=["TOTAL", "AMOUNT", "TOTAL_AMOUNT"],
                ocr_patterns=[r"\d+[,\.\s]\d+\s*—Ä—É–±", r"–∏—Ç–æ–≥–æ.*\d+"],
                enabled=True
            ),
            TableField(
                id="amount_no_vat",
                display_name="Amount (0% VAT)",
                description="–°—É–º–º–∞ –±–µ–∑ –ù–î–°",
                data_type="currency",
                required=False,
                priority=2,
                position=5,
                gemini_keywords=["–°—É–º–º–∞ –±–µ–∑ –ù–î–°", "—Å—É–º–º–∞ –±–µ–∑ –Ω–¥—Å", "amount_no_vat", "net_amount"],
                layoutlm_labels=["NET_AMOUNT", "AMOUNT_NO_VAT"],
                ocr_patterns=[r"–±–µ–∑\s+–ù–î–°.*\d+", r"net.*amount.*\d+"],
                enabled=True
            ),
            TableField(
                id="vat_percent",
                display_name="VAT %",
                description="–°—Ç–∞–≤–∫–∞ –ù–î–° –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö",
                data_type="number",
                required=False,
                priority=2,
                position=6,
                gemini_keywords=["–ù–î–° %", "–Ω–¥—Å %", "vat_rate", "tax_rate", "—Å—Ç–∞–≤–∫–∞ –Ω–¥—Å"],
                layoutlm_labels=["VAT_RATE", "TAX_RATE"],
                ocr_patterns=[r"–ù–î–°\s*\d+%", r"\d+%\s*–ù–î–°"],
                enabled=True
            ),
            TableField(
                id="currency",
                display_name="Currency",
                description="–í–∞–ª—é—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞",
                data_type="text",
                required=False,
                priority=3,
                position=7,
                gemini_keywords=["–í–∞–ª—é—Ç–∞", "–≤–∞–ª—é—Ç–∞", "currency"],
                layoutlm_labels=["CURRENCY"],
                ocr_patterns=[r"RUB|—Ä—É–±|USD|EUR|‚ÇΩ"],
                enabled=True
            ),
            TableField(
                id="category",
                display_name="Category",
                description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —É—Å–ª—É–≥",
                data_type="text",
                required=False,
                priority=3,
                position=8,
                gemini_keywords=["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "category"],
                layoutlm_labels=["CATEGORY", "ITEM_TYPE"],
                ocr_patterns=[r"–∫–∞—Ç–µ–≥–æ—Ä–∏—è.*", r"—Ç–∏–ø.*—Ç–æ–≤–∞—Ä"],
                enabled=True
            ),
            TableField(
                id="description",
                display_name="Description",
                description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤, —É—Å–ª—É–≥ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                data_type="text",
                required=False,
                priority=3,
                position=9,
                gemini_keywords=["–¢–æ–≤–∞—Ä—ã", "—Ç–æ–≤–∞—Ä—ã", "description", "items", "—É—Å–ª—É–≥–∏"],
                layoutlm_labels=["DESCRIPTION", "ITEMS"],
                ocr_patterns=[r"–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ.*", r"—Ç–æ–≤–∞—Ä.*", r"—É—Å–ª—É–≥.*"],
                enabled=True
            ),
            TableField(
                id="inn",
                display_name="INN",
                description="–ò–ù–ù –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–Ω–∞–ª–æ–≥–æ–≤—ã–π –Ω–æ–º–µ—Ä)",
                data_type="text",
                required=False,
                priority=4,
                position=10,
                gemini_keywords=["–ò–ù–ù", "–∏–Ω–Ω", "inn", "tax_id", "–Ω–∞–ª–æ–≥–æ–≤—ã–π –Ω–æ–º–µ—Ä"],
                layoutlm_labels=["INN", "TAX_ID"],
                ocr_patterns=[r"–ò–ù–ù\s*\d{10,12}", r"\d{10,12}"],
                enabled=True
            ),
            TableField(
                id="kpp",
                display_name="KPP",
                description="–ö–ü–ü –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–∫–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏)",
                data_type="text",
                required=False,
                priority=4,
                position=11,
                gemini_keywords=["–ö–ü–ü", "–∫–ø–ø", "kpp"],
                layoutlm_labels=["KPP"],
                ocr_patterns=[r"–ö–ü–ü\s*\d{9}", r"\d{9}"],
                enabled=True
            ),
            TableField(
                id="note",
                display_name="Note",
                description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
                data_type="text",
                required=False,
                priority=5,
                position=12,
                gemini_keywords=["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", "note", "comment", "–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ"],
                layoutlm_labels=["NOTE", "COMMENT"],
                ocr_patterns=[r"–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ.*", r"–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.*"],
                enabled=True
            )
        ]
        
        for field in default_fields:
            self._fields[field.id] = field
    
    def _load_custom_fields(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            print(f"üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π –∏–∑: {self.fields_config_path}")
            
            with open(self.fields_config_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(data)} –ø–æ–ª–µ–π –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–ª—è
            self._fields.clear()
                
            for field_id, field_data in data.items():
                print(f"  üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—è '{field_id}': {field_data.get('display_name', '–ù–ï–¢ –ù–ê–ó–í–ê–ù–ò–Ø')}")
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                if 'position' not in field_data:
                    field_data['position'] = field_data.get('priority', 1)
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—è –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                self._fields[field_id] = TableField(**field_data)
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π: {e}")
            import traceback
            traceback.print_exc()
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
            self._load_default_fields()
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üìä –ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª–µ–π: {len(self._fields)}")
        print(f"üìä –í–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π: {len([f for f in self._fields.values() if f.enabled])}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
        test_fields = ['invoice_number', 'total', 'sender']
        for test_field in test_fields:
            if test_field in self._fields:
                field = self._fields[test_field]
                print(f"üìä –ü–æ–ª–µ '{test_field}': '{field.display_name}' (–ø–æ–∑–∏—Ü–∏—è: {field.position}, –≤–∫–ª—é—á–µ–Ω–æ: {field.enabled})")
            else:
                print(f"‚ö†Ô∏è –ü–æ–ª–µ '{test_field}' –ù–ï –ù–ê–ô–î–ï–ù–û")
    
    def save_fields_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª–µ–π –≤ —Ñ–∞–π–ª."""
        try:
            print(f"üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ü–û–õ–ï–ô...")
            
            data = {}
            for field_id, field in self._fields.items():
                data[field_id] = asdict(field)
                print(f"   üíæ {field_id}: '{field.display_name}' (–≤–∫–ª—é—á–µ–Ω–æ: {field.enabled})")
            
            os.makedirs(os.path.dirname(self.fields_config_path), exist_ok=True)
            with open(self.fields_config_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–û–•–†–ê–ù–ï–ù–ê: {self.fields_config_path}")
            print(f"   –í—Å–µ–≥–æ –ø–æ–ª–µ–π: {len(data)}")
                
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ü–û–õ–ï–ô: {e}")
            import traceback
            traceback.print_exc()
    
    def get_enabled_fields(self) -> List[TableField]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–∑–∏—Ü–∏–∏."""
        enabled = [f for f in self._fields.values() if f.enabled]
        return sorted(enabled, key=lambda x: x.position)
    
    def get_table_columns(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        columns = []
        for field in self.get_enabled_fields():
            columns.append({
                "id": field.id,
                "name": field.display_name,
                "type": "text"  # PyQt6 DataTable –∏—Å–ø–æ–ª—å–∑—É–µ—Ç text –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
            })
        return columns
    
    def get_gemini_prompt(self, base_prompt: str = "") -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini API –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª–µ–π."""
        enabled_fields = self.get_enabled_fields()
        
        prompt_parts = [
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:",
            ""
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
        for field in enabled_fields:
            keywords_str = ", ".join(field.gemini_keywords[:3])  # –ü–µ—Ä–≤—ã–µ 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞
            prompt_parts.append(f"- {field.gemini_keywords[0]}: {field.description} (–≤–∞—Ä–∏–∞–Ω—Ç—ã: {keywords_str})")
        
        prompt_parts.extend([
            "",
            "–í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–π –æ—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤—ã—à–µ.",
            "–ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π \"N/A\".",
            "–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ JSON."
        ])
        
        if base_prompt:
            return f"{base_prompt}\n\n{chr(10).join(prompt_parts)}"
        else:
            return chr(10).join(prompt_parts)
    
    def get_layoutlm_labels(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–µ–π–±–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è LayoutLM."""
        labels = []
        for field in self.get_enabled_fields():
            labels.extend(field.layoutlm_labels)
        return list(set(labels))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    
    def get_ocr_patterns(self) -> List[Tuple[str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è OCR –ø–æ–∏—Å–∫–∞ (–ø–∞—Ç—Ç–µ—Ä–Ω, field_id)."""
        patterns = []
        for field in self.get_enabled_fields():
            for pattern in field.ocr_patterns:
                patterns.append((pattern, field.id))
        return patterns
    
    def get_field_mapping_for_model(self, model_type: str) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏."""
        mapping = {}
        
        for field in self.get_enabled_fields():
            if model_type == 'gemini':
                for keyword in field.gemini_keywords:
                    mapping[keyword.lower()] = field.display_name
            elif model_type == 'layoutlm':
                for label in field.layoutlm_labels:
                    mapping[label.lower()] = field.display_name
            # –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        
        return mapping
    
    def get_field_id_mapping_for_model(self, model_type: str) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π API -> field_id –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ _map_gemini_fields."""
        mapping = {}
        
        for field in self.get_enabled_fields():
            if model_type == 'gemini':
                for keyword in field.gemini_keywords:
                    mapping[keyword.lower()] = field.id
            elif model_type == 'layoutlm':
                for label in field.layoutlm_labels:
                    mapping[label.lower()] = field.id
            # –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        
        return mapping
    
    def update_field(self, field_id: str, **kwargs):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—è."""
        if field_id in self._fields:
            for key, value in kwargs.items():
                if hasattr(self._fields[field_id], key):
                    setattr(self._fields[field_id], key, value)
            self.save_fields_config()
    
    def add_field(self, field: TableField):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –ø–æ–ª–µ."""
        self._fields[field.id] = field
        self.save_fields_config()
    
    def remove_field(self, field_id: str):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª–µ."""
        if field_id in self._fields:
            del self._fields[field_id]
            self.save_fields_config()
    
    def get_field(self, field_id: str) -> Optional[TableField]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–µ –ø–æ ID."""
        return self._fields.get(field_id)
    
    def get_all_fields(self) -> Dict[str, TableField]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è."""
        return self._fields.copy()
    
    def move_field_up(self, field_id: str) -> bool:
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –ø–æ–ª–µ –≤–≤–µ—Ä—Ö –≤ —Å–ø–∏—Å–∫–µ (—É–º–µ–Ω—å—à–∞–µ—Ç position)."""
        if field_id not in self._fields:
            return False
        
        current_field = self._fields[field_id]
        target_position = current_field.position - 1
        
        if target_position < 1:
            return False
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ —Å target_position –∏ –º–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–µ—Å—Ç–∞–º–∏
        for other_field in self._fields.values():
            if other_field.position == target_position:
                other_field.position = current_field.position
                break
        
        current_field.position = target_position
        self.save_fields_config()
        return True
    
    def move_field_down(self, field_id: str) -> bool:
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –ø–æ–ª–µ –≤–Ω–∏–∑ –≤ —Å–ø–∏—Å–∫–µ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç position)."""
        if field_id not in self._fields:
            return False
        
        current_field = self._fields[field_id]
        max_position = max(field.position for field in self._fields.values())
        target_position = current_field.position + 1
        
        if target_position > max_position:
            return False
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ —Å target_position –∏ –º–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–µ—Å—Ç–∞–º–∏
        for other_field in self._fields.values():
            if other_field.position == target_position:
                other_field.position = current_field.position
                break
        
        current_field.position = target_position
        self.save_fields_config()
        return True
    
    def sync_prompts_for_all_models(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–æ–ª—è–º–∏."""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini
            gemini_prompt = self.get_gemini_prompt()
            settings_manager.set_value('Prompts', 'gemini_extract_prompt', gemini_prompt)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è LLM –ø–ª–∞–≥–∏–Ω–æ–≤
            for plugin_name in ['llama', 'mistral', 'codellama']:
                plugin_prompt = self._generate_llm_plugin_prompt()
                settings_manager.set_value('Prompts', f'{plugin_name}_prompt', plugin_prompt)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings_manager.save_settings()
            
            print("‚úÖ –ü—Ä–æ–º–ø—Ç—ã –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –ø–æ–ª—è–º–∏ —Ç–∞–±–ª–∏—Ü—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
            return False
    
    def _generate_llm_plugin_prompt(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM –ø–ª–∞–≥–∏–Ω–æ–≤."""
        enabled_fields = self.get_enabled_fields()
        
        prompt_parts = [
            "Analyze the document text and extract the following fields:",
            ""
        ]
        
        for field in enabled_fields:
            prompt_parts.append(f"- {field.display_name}: {field.description}")
        
        prompt_parts.extend([
            "",
            "Return the results as a JSON object with the exact field names shown above.",
            "If a field is not found, use 'N/A' as the value."
        ])
        
        return chr(10).join(prompt_parts)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª–µ–π
field_manager = FieldManager() 