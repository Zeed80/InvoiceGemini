"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""
import os
import sys
import shutil
import subprocess
import json
import csv
import datetime
import hashlib
import pytesseract
from PyQt6.QtWidgets import QMessageBox, QFileDialog
from PyQt6.QtCore import QStandardPaths
from PIL import Image

from . import config


def safe_print(*args, **kwargs):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å emoji –¥–ª—è Windows.
    –ó–∞–º–µ–Ω—è–µ—Ç emoji –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è UnicodeEncodeError.
    """
    # –ú–∞–ø–ø–∏–Ω–≥ emoji –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–µ—Ç–∫–∏
    emoji_map = {
        'üöÄ': '[START]',
        '‚úÖ': '[OK]',
        '‚ö†': '[WARN]',
        '‚ùå': '[ERROR]',
        'üìä': '[STATS]',
        'üîç': '[SEARCH]',
        '‚ö°': '[FAST]',
        'üîß': '[CONFIG]',
        'üéØ': '[TARGET]',
        'üìÇ': '[FOLDER]',
        'üíæ': '[SAVE]',
        'ü§ñ': '[AI]',
        'üìÑ': '[DOC]',
        'üìÅ': '[DIR]',
        'üîÑ': '[SYNC]',
        'üìù': '[NOTE]',
        'üîê': '[SECURE]',
        'üìà': '[CHART]',
        'üé®': '[DESIGN]',
        'üåê': '[WEB]',
        'üîå': '[PLUGIN]',
    }
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–º–µ–Ω—è–µ–º emoji
    safe_args = []
    for arg in args:
        text = str(arg)
        for emoji, replacement in emoji_map.items():
            text = text.replace(emoji, replacement)
        safe_args.append(text)
    
    # –í—ã–≤–æ–¥–∏–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç
    try:
        print(*safe_args, **kwargs)
    except UnicodeEncodeError:
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º ASCII
        ascii_args = [arg.encode('ascii', 'replace').decode('ascii') for arg in safe_args]
        print(*ascii_args, **kwargs)


def show_error_message(parent, title, message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
    QMessageBox.critical(parent, title, message)


def show_info_message(parent, title, message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    QMessageBox.information(parent, title, message)


def show_warning_message(parent, title, message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    QMessageBox.warning(parent, title, message)


def show_question_message(parent, title, message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –î–∞/–ù–µ—Ç."""
    return QMessageBox.question(parent, title, message, 
                              QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No) == QMessageBox.StandardButton.Yes


def get_open_file_path(parent, caption, directory, filter_):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å."""
    options = QFileDialog.Option.ReadOnly
    file_path, _ = QFileDialog.getOpenFileName(
        parent, caption, directory, filter_, options=options
    )
    return file_path


def get_save_file_path(parent, caption, directory, filter_):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å."""
    options = QFileDialog.Option.ReadOnly
    file_path, _ = QFileDialog.getSaveFileName(
        parent, caption, directory, filter_, options=options
    )
    return file_path


def get_documents_dir():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return QStandardPaths.writableLocation(QStandardPaths.StandardLocation.DocumentsLocation)


def is_tesseract_installed():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ Tesseract –≤ —Å–∏—Å—Ç–µ–º–µ.
    
    Returns:
        bool: True, –µ—Å–ª–∏ Tesseract –Ω–∞–π–¥–µ–Ω, –∏–Ω–∞—á–µ False
    """
    try:
        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –ø—É—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if config.TESSERACT_PATH:
            pytesseract.pytesseract.tesseract_cmd = config.TESSERACT_PATH
            pytesseract.get_tesseract_version()
            return True
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ tesseract –≤ PATH
        pytesseract.get_tesseract_version()
        return True
    except Exception:
        return False


def find_tesseract_in_path():
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É Tesseract.
    
    Returns:
        str: –ü—É—Ç—å –∫ tesseract.exe, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω, –∏–Ω–∞—á–µ None
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—É—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ —É–±—Ä–∞–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    potential_paths = [
        # –ü–æ–∏—Å–∫ –≤ PATH (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        shutil.which("tesseract"),
        # Windows –ø—É—Ç–∏ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏)
        "C:\\Program Files\\Tesseract-OCR\\tesseract.exe",
        "C:\\Program Files (x86)\\Tesseract-OCR\\tesseract.exe",
        # Linux/macOS —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏
        "/usr/bin/tesseract",
        "/usr/local/bin/tesseract",
        "/opt/homebrew/bin/tesseract",  # macOS ARM Homebrew
        "/usr/local/Cellar/tesseract/*/bin/tesseract"  # macOS Intel Homebrew
    ]
    
    for path in potential_paths:
        if path and os.path.isfile(path):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ Tesseract
                old_cmd = pytesseract.pytesseract.tesseract_cmd
                pytesseract.pytesseract.tesseract_cmd = path
                pytesseract.get_tesseract_version()
                return path
            except (pytesseract.TesseractError, OSError, subprocess.SubprocessError, RuntimeError) as e:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ Tesseract, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
                pytesseract.pytesseract.tesseract_cmd = old_cmd
    
    return None


def convert_pdf_to_image(pdf_path, output_folder=None):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É PDF-—Ñ–∞–π–ª–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    
    Args:
        pdf_path (str): –ü—É—Ç—å –∫ PDF-—Ñ–∞–π–ª—É
        output_folder (str, optional): –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. 
                                     –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞.
                                     
    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –î–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å pdf2image –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        from pdf2image import convert_from_path
        
        # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é
        if not output_folder:
            output_folder = config.TEMP_PATH
            os.makedirs(output_folder, exist_ok=True)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        images = convert_from_path(pdf_path, first_page=1, last_page=1)
        
        if images:
            # –°–æ–∑–¥–∞–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω–æ–≥–æ
            basename = os.path.splitext(os.path.basename(pdf_path))[0]
            output_path = os.path.join(output_folder, f"{basename}_page1.jpg")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            images[0].save(output_path, "JPEG")
            return output_path
        
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}")
        return None


def get_extension(file_path):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ."""
    return os.path.splitext(file_path)[1].lower()


def is_supported_format(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞."""
    ext = get_extension(file_path)
    return ext in config.SUPPORTED_FORMATS


def is_image_format(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º."""
    ext = get_extension(file_path)
    return ext in config.SUPPORTED_IMAGE_FORMATS


def is_pdf_format(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª PDF."""
    ext = get_extension(file_path)
    return ext in config.SUPPORTED_PDF_FORMAT


def is_valid_file(file_path):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF).
    
    Args:
        file_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        
    Returns:
        bool: True, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏–Ω–∞—á–µ False
    """
    if not os.path.isfile(file_path):
        return False
    
    ext = os.path.splitext(file_path)[1].lower()
    return ext in config.SUPPORTED_FORMATS


def _export_single_to_json(data, output_path):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å –≤ JSON."""
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        return True, "–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON —É—Å–ø–µ—à–µ–Ω"
    except Exception as e:
        msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ JSON: {str(e)}"
        print(msg)
        return False, msg


def _export_single_to_html(data, output_path):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å –≤ HTML (–ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç)."""
    try:
        html_content = f"""<!DOCTYPE html>
<html lang=\"ru\">
<head>
    <meta charset=\"UTF-8\">
    <title>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—á–µ—Ç–∞</title>
    <style>
        body {{ font-family: sans-serif; }}
        dl {{ border: 1px solid #ccc; padding: 10px; }}
        dt {{ font-weight: bold; float: left; width: 150px; clear: left; }}
        dd {{ margin-left: 160px; margin-bottom: 5px; }}
    </style>
</head>
<body>
    <h1>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—á–µ—Ç–∞</h1>
    <dl>
"""
        for key, value in data.items():
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ <br> –¥–ª—è HTML
            display_value = str(value).replace('\n', '<br>')
            html_content += f'        <dt>{key}:</dt><dd>{display_value}</dd>\n'
        
        html_content += """    </dl>
</body>
</html>"""

        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        return True, "–≠–∫—Å–ø–æ—Ä—Ç –≤ HTML —É—Å–ø–µ—à–µ–Ω"
    except Exception as e:
        msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ HTML: {str(e)}"
        print(msg)
        return False, msg


def _export_single_to_csv(data, output_path):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å –≤ CSV."""
    try:
        headers = list(data.keys())
        with open(output_path, 'w', newline='', encoding='utf-8-sig') as f: # utf-8-sig –¥–ª—è Excel
            writer = csv.DictWriter(f, fieldnames=headers, delimiter=';') # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π
            writer.writeheader()
            writer.writerow(data)
        return True, "–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —É—Å–ø–µ—à–µ–Ω"
    except Exception as e:
        msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV: {str(e)}"
        print(msg)
        return False, msg


def _export_single_to_txt(data, output_path):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å –≤ TXT."""
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            for key, value in data.items():
                f.write(f"{key}: {value}\n")
        return True, "–≠–∫—Å–ø–æ—Ä—Ç –≤ TXT —É—Å–ø–µ—à–µ–Ω"
    except Exception as e:
        msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ TXT: {str(e)}"
        print(msg)
        return False, msg


def _export_batch_to_json(data_list, output_path):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤ JSON."""
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(data_list, f, ensure_ascii=False, indent=4)
        return True, "–ü–∞–∫–µ—Ç–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤ JSON —É—Å–ø–µ—à–µ–Ω"
    except Exception as e:
        msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ JSON: {str(e)}"
        print(msg)
        return False, msg


def _export_batch_to_html(data_list, output_path):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤ HTML —Ç–∞–±–ª–∏—Ü—É."""
    if not data_list: 
        return False, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ HTML."
    try:
        headers = list(data_list[0].keys())
        html_content = f"""<!DOCTYPE html>
<html lang=\"ru\">
<head>
    <meta charset=\"UTF-8\">
    <title>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏</title>
    <style>
        body {{ font-family: sans-serif; }}
        table {{ border-collapse: collapse; width: 100%; margin-top: 15px; font-size: 0.9em; }}
        th, td {{ border: 1px solid #ddd; padding: 6px; text-align: left; vertical-align: top; }}
        th {{ background-color: #f2f2f2; position: sticky; top: 0; z-index: 1; }}
        tr:nth-child(even) {{ background-color: #f9f9f9; }}
    </style>
</head>
<body>
    <h1>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏</h1>
    <table>
        <thead>
            <tr>
"""
        for header in headers:
             html_content += f'                <th>{header}</th>\n'
        html_content += """            </tr>
        </thead>
        <tbody>
"""
        for row_dict in data_list:
            html_content += '            <tr>\n'
            for header in headers:
                value = row_dict.get(header, '')
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ <br> –¥–ª—è HTML
                display_value = str(value).replace('\n', '<br>')
                html_content += f'                <td>{display_value}</td>\n'
            html_content += '            </tr>\n'

        html_content += """        </tbody>
    </table>
</body>
</html>"""

        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        return True, "–ü–∞–∫–µ—Ç–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤ HTML —É—Å–ø–µ—à–µ–Ω"
    except Exception as e:
        msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ HTML: {str(e)}"
        print(msg)
        return False, msg


def _export_batch_to_csv(data_list, output_path):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤ CSV."""
    if not data_list: 
        return False, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV."
    try:
        headers = list(data_list[0].keys()) # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        with open(output_path, 'w', newline='', encoding='utf-8-sig') as f:
            writer = csv.DictWriter(f, fieldnames=headers, delimiter=';')
            writer.writeheader()
            writer.writerows(data_list) # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
        return True, "–ü–∞–∫–µ—Ç–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV —É—Å–ø–µ—à–µ–Ω"
    except Exception as e:
        msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV: {str(e)}"
        print(msg)
        return False, msg


def _export_batch_to_txt(data_list, output_path):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤ TXT."""
    if not data_list: 
        return False, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ TXT."
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            for i, data_dict in enumerate(data_list):
                f.write(f"--- –ó–∞–ø–∏—Å—å {i+1} ---\n")
                for key, value in data_dict.items():
                    f.write(f"{key}: {value}\n")
                f.write("--------------------\n\n")
        return True, "–ü–∞–∫–µ—Ç–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤ TXT —É—Å–ø–µ—à–µ–Ω"
    except Exception as e:
        msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ TXT: {str(e)}"
        print(msg)
        return False, msg


def export_results(results_data, output_path, format_type):
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (dict), —Ç–∞–∫ –∏ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ (list of dicts).

    Args:
        results_data (dict or list): –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.
        output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞.
        format_type (str): –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ ('txt', 'json', 'html', 'csv').

    Returns:
        tuple: (bool, str) - –£—Å–ø–µ—Ö (True/False) –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    if not results_data:
        return False, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞."

    is_batch = isinstance(results_data, list)

    print(f"–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (–ü–∞–∫–µ—Ç–Ω—ã–π: {is_batch}) –≤ —Ñ–æ—Ä–º–∞—Ç: {format_type}, –ø—É—Ç—å: {output_path}")

    try:
        if format_type == 'json':
            if is_batch:
                return _export_batch_to_json(results_data, output_path)
            else:
                return _export_single_to_json(results_data, output_path)
        elif format_type == 'html':
            if is_batch:
                return _export_batch_to_html(results_data, output_path)
            else:
                return _export_single_to_html(results_data, output_path)
        elif format_type == 'csv':
            if is_batch:
                return _export_batch_to_csv(results_data, output_path)
            else:
                 # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ CSV –¥–∞–Ω–Ω—ã–µ –æ–±–µ—Ä–Ω—É—Ç—ã –≤ —Å–ø–∏—Å–æ–∫
                 if isinstance(results_data, dict):
                     return _export_batch_to_csv([results_data], output_path) 
                 else:
                     return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CSV —ç–∫—Å–ø–æ—Ä—Ç–∞."
        elif format_type == 'txt':
            if is_batch:
                return _export_batch_to_txt(results_data, output_path)
            else:
                return _export_single_to_txt(results_data, output_path)
        else:
            return False, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞: {format_type}"
    except Exception as e:
        # –û–±—â–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
        msg = f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ {format_type}: {str(e)}"
        print(msg)
        import traceback
        traceback.print_exc()
        return False, msg


def check_file_integrity(file_path):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞, –≤—ã—á–∏—Å–ª—è—è –µ–≥–æ —Ö–µ—à.
    
    Args:
        file_path (str): –ü—É—Ç—å –∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–º—É —Ñ–∞–π–ª—É
        
    Returns:
        str: MD5-—Ö–µ—à —Ñ–∞–π–ª–∞ –∏–ª–∏ None, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    """
    if not os.path.exists(file_path):
        return None
    
    try:
        hash_md5 = hashlib.md5()
        with open(file_path, 'rb') as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
        return None


def check_project_integrity():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞.
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –∏—Ö —Ö–µ—à–∞–º–∏
    """
    project_files = []
    project_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ .py —Ñ–∞–π–ª—ã
    for root, _, files in os.walk(project_dir):
        for file in files:
            if file.endswith('.py'):
                project_files.append(os.path.join(root, file))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
    integrity_data = {}
    for file_path in project_files:
        rel_path = os.path.relpath(file_path, project_dir)
        integrity_data[rel_path] = check_file_integrity(file_path)
    
    return integrity_data


def get_model_cache_info():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö.
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥–µ–ª—è—Ö –≤ –∫—ç—à–µ
    """
    models_info = {}
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–æ–¥–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(config.MODELS_PATH, exist_ok=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–µ–π LayoutLM
    layoutlm_dir = os.path.join(config.MODELS_PATH, 'layoutlm')
    if os.path.exists(layoutlm_dir):
        models_info['layoutlm'] = {
            'path': layoutlm_dir,
            'size': get_dir_size(layoutlm_dir),
            'last_modified': get_last_modified_time(layoutlm_dir),
            'is_complete': is_model_complete(layoutlm_dir, 'layoutlm')
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–µ–π Donut
    donut_dir = os.path.join(config.MODELS_PATH, 'donut')
    if os.path.exists(donut_dir):
        models_info['donut'] = {
            'path': donut_dir,
            'size': get_dir_size(donut_dir),
            'last_modified': get_last_modified_time(donut_dir),
            'is_complete': is_model_complete(donut_dir, 'donut')
        }
    
    return models_info


def get_dir_size(path):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –±–∞–π—Ç–∞—Ö.
    
    Args:
        path (str): –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        
    Returns:
        int: –†–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –±–∞–π—Ç–∞—Ö
    """
    total_size = 0
    if not os.path.exists(path):
        return 0
    
    if os.path.isfile(path):
        return os.path.getsize(path)
    
    try:
        for dirpath, dirnames, filenames in os.walk(path):
            for filename in filenames:
                file_path = os.path.join(dirpath, filename)
                try:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏
                    if not os.path.islink(file_path):
                        total_size += os.path.getsize(file_path)
                except (FileNotFoundError, PermissionError):
                    continue
    except (PermissionError, OSError) as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {path}: {str(e)}")
    
    return total_size


def get_last_modified_time(path):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    
    Args:
        path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        
    Returns:
        float: –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Å –Ω–∞—á–∞–ª–∞ —ç–ø–æ—Ö–∏
    """
    if not os.path.exists(path):
        return 0
    
    last_modified = os.path.getmtime(path)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ —Ñ–∞–π–ª—ã –≤–Ω—É—Ç—Ä–∏
    if os.path.isdir(path):
        for dirpath, dirnames, filenames in os.walk(path):
            for f in filenames:
                fp = os.path.join(dirpath, f)
                if os.path.exists(fp):
                    mtime = os.path.getmtime(fp)
                    if mtime > last_modified:
                        last_modified = mtime
    
    return last_modified


def is_model_complete(model_dir, model_type):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–æ–¥–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞.
    
    Args:
        model_dir (str): –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –º–æ–¥–µ–ª–∏
        model_type (str): –¢–∏–ø –º–æ–¥–µ–ª–∏ ('layoutlm' –∏–ª–∏ 'donut')
        
    Returns:
        bool: True, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∏–Ω–∞—á–µ False
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
    if model_type.lower() == 'layoutlm':
        required_files = ['config.json', 'pytorch_model.bin']
    else:  # donut
        required_files = ['config.json', 'pytorch_model.bin', 'special_tokens_map.json', 'tokenizer_config.json']
    
    for file in required_files:
        if not any(file in f for f in os.listdir(model_dir) if os.path.isfile(os.path.join(model_dir, f))):
            return False
    
    return True


def clear_model_cache(model_type=None):
    """
    –û—á–∏—â–∞–µ—Ç –∫—ç—à –º–æ–¥–µ–ª–µ–π.
    
    Args:
        model_type (str, optional): –¢–∏–ø –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ ('layoutlm', 'donut' –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö)
        
    Returns:
        bool: True, –µ—Å–ª–∏ –∫—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω, –∏–Ω–∞—á–µ False
    """
    try:
        if model_type:
            model_dir = os.path.join(config.MODELS_PATH, model_type.lower())
            if os.path.exists(model_dir):
                shutil.rmtree(model_dir)
        else:
            # –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à –º–æ–¥–µ–ª–µ–π
            if os.path.exists(config.MODELS_PATH):
                for item in os.listdir(config.MODELS_PATH):
                    item_path = os.path.join(config.MODELS_PATH, item)
                    if os.path.isdir(item_path):
                        shutil.rmtree(item_path)
        
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ –º–æ–¥–µ–ª–µ–π: {str(e)}")
        return False


def format_size(size_bytes):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑ –±–∞–π—Ç–æ–≤ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.
    
    Args:
        size_bytes (int): –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
        
    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, '15.5 MB')
    """
    if size_bytes == 0:
        return "0 B"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
    units = ['B', 'KB', 'MB', 'GB', 'TB']
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ª–æ–≥–∞—Ä–∏—Ñ–º —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º 1024
    import math
    if size_bytes == 0:
        i = 0
    else:
        i = int(round(math.log(size_bytes) / math.log(1024)))
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    p = 1024 ** i
    s = round(size_bytes / p, 2)
    
    return f"{s} {units[i]}"


def format_timestamp(timestamp):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.
    
    Args:
        timestamp (float): –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Å –Ω–∞—á–∞–ª–∞ —ç–ø–æ—Ö–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    """
    return datetime.datetime.fromtimestamp(timestamp).strftime("%d.%m.%Y %H:%M:%S")


def get_model_info_formatted(model_type):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏.
    
    Args:
        model_type (str): –¢–∏–ø –º–æ–¥–µ–ª–∏ ('layoutlm' –∏–ª–∏ 'donut')
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
    """
    models_info = get_model_cache_info()
    
    if model_type.lower() not in models_info:
        return "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ"
    
    info = models_info[model_type.lower()]
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    size_formatted = format_size(info['size'])
    date_formatted = format_timestamp(info['last_modified'])
    status = "–ü–æ–ª–Ω–∞—è" if info['is_complete'] else "–ù–µ–ø–æ–ª–Ω–∞—è"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    model_id = config.LAYOUTLM_MODEL_ID if model_type.lower() == 'layoutlm' else config.DONUT_MODEL_ID
    
    return f"ID –º–æ–¥–µ–ª–∏: {model_id}\n–†–∞–∑–º–µ—Ä: {size_formatted}\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {date_formatted}\n–°—Ç–∞—Ç—É—Å: {status}" 