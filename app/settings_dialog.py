"""
–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∏–∞–ª–æ–≥–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""
import os
import sys # NEW: –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è sys.executable
import json
import base64
from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, 
    QLineEdit, QPushButton, QFileDialog, QGroupBox,
    QCheckBox, QTabWidget, QWidget, QProgressBar,
    QComboBox, QMessageBox, QSpinBox, QTextEdit, QDoubleSpinBox, QSizePolicy, QScrollArea, 
    QPlainTextEdit, QApplication, QFormLayout # NEW: –î–æ–±–∞–≤–ª—è–µ–º QFormLayout
)
from PyQt6.QtCore import Qt, pyqtSignal, QThread, QObject # NEW: QObject –¥–ª—è Worker

try:
    import google.generativeai as genai
    GENAI_AVAILABLE = True
except ImportError:
    GENAI_AVAILABLE = False

from . import config as app_config # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from . import utils
from .settings_manager import settings_manager
from .processing_engine import ModelManager # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ parent_window.model_manager
# from .threads import ModelDownloadThread # ModelDownloadThread –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∏–∂–µ
from huggingface_hub import hf_hub_download, HfApi, list_models # NEW: –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HF —Ç–æ–∫–µ–Ω–∞
from huggingface_hub import scan_cache_dir

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
try:
    from config.secrets import SecretsManager
    SECRETS_MANAGER_AVAILABLE = True
except ImportError:
    SECRETS_MANAGER_AVAILABLE = False
    print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: SecretsManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –§—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.")


# NEW: Worker –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ)
class Worker(QObject):
    finished = pyqtSignal(bool, str) # success, message_or_model_path
    progress = pyqtSignal(int)
    error = pyqtSignal(str)

    def __init__(self, task_callable, *args, **kwargs):
        super().__init__()
        self.task_callable = task_callable
        self.args = args
        self.kwargs = kwargs

    def run(self):
        try:
            # –ü–µ—Ä–µ–¥–∞–µ–º progress_callback, –µ—Å–ª–∏ –æ–Ω –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π
            if "progress_callback" in self.task_callable.__code__.co_varnames:
                self.kwargs["progress_callback"] = lambda p: self.progress.emit(p)
            
            result = self.task_callable(*self.args, **self.kwargs)
            
            if isinstance(result, tuple) and len(result) == 2:
                success, message = result
                self.finished.emit(success, message)
            elif isinstance(result, bool): # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ success
                self.finished.emit(result, "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            else: # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—É—Ç—å)
                self.finished.emit(True, str(result) if result is not None else "")

        except Exception as e:
            import traceback
            error_msg = f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}\n{traceback.format_exc()}"
            print(error_msg) # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
            self.error.emit(error_msg)


class ModelManagementDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏ –∏ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    
    geminiModelsUpdated = pyqtSignal() # –°–∏–≥–Ω–∞–ª –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π Gemini

    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent_window = parent # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ (MainWindow)
        self.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏")
        self.setMinimumSize(700, 600) # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        
        self.current_worker = None
        self.current_thread = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ–∫—Ä–µ—Ç–æ–≤
        if SECRETS_MANAGER_AVAILABLE:
            self.secrets_manager = SecretsManager()
        else:
            self.secrets_manager = None

        self.init_ui()
        self._setup_text_change_handlers() # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º UI
        self.load_settings()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å app_config
        self._sync_settings_with_config()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –º–æ–¥–µ–ª–µ–π
        self.check_models_availability()

    def _sync_settings_with_config(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤ app_config."""
        # Gemini settings
        if hasattr(self, 'gemini_temperature_spinner'):
            app_config.DEFAULT_GEMINI_TEMPERATURE = self.gemini_temperature_spinner.value()
        if hasattr(self, 'gemini_max_tokens_spinner'):
            app_config.DEFAULT_GEMINI_MAX_TOKENS = self.gemini_max_tokens_spinner.value()
        if hasattr(self, 'gemini_pdf_dpi_spinner'):
            app_config.GEMINI_PDF_DPI = self.gemini_pdf_dpi_spinner.value()
        
        # Model paths
        if hasattr(self, 'layoutlm_model_id_edit'):
            app_config.LAYOUTLM_MODEL_ID = self.layoutlm_model_id_edit.text()
        if hasattr(self, 'donut_model_id_edit'):
            app_config.DONUT_MODEL_ID = self.donut_model_id_edit.text()
        
        # Training settings
        if hasattr(self, 'layoutlm_base_model_edit'):
            app_config.LAYOUTLM_MODEL_ID_FOR_TRAINING = self.layoutlm_base_model_edit.text()
        if hasattr(self, 'epochs_spinbox'):
            app_config.DEFAULT_TRAIN_EPOCHS = self.epochs_spinbox.value()
        if hasattr(self, 'batch_size_spinbox'):
            app_config.DEFAULT_TRAIN_BATCH_SIZE = self.batch_size_spinbox.value()
        if hasattr(self, 'learning_rate_dspinbox'):
            app_config.DEFAULT_LEARNING_RATE = self.learning_rate_dspinbox.value()
        
        # Paths
        if hasattr(self, 'tesseract_path_edit') and hasattr(self.tesseract_path_edit, 'line_edit'):
            app_config.TESSERACT_PATH = self.tesseract_path_edit.line_edit.text()
        if hasattr(self, 'poppler_path_edit') and hasattr(self.poppler_path_edit, 'line_edit'):
            app_config.POPPLER_PATH = self.poppler_path_edit.line_edit.text()
        if hasattr(self, 'training_datasets_path_edit') and hasattr(self.training_datasets_path_edit, 'line_edit'):
            app_config.TRAINING_DATASETS_PATH = self.training_datasets_path_edit.line_edit.text()
        if hasattr(self, 'trained_models_path_edit') and hasattr(self.trained_models_path_edit, 'line_edit'):
            app_config.TRAINED_MODELS_PATH = self.trained_models_path_edit.line_edit.text()
        
        # Network settings
        if hasattr(self, 'offline_mode_checkbox'):
            app_config.OFFLINE_MODE = self.offline_mode_checkbox.isChecked()
        if hasattr(self, 'http_timeout_spinbox'):
            app_config.HTTP_TIMEOUT = self.http_timeout_spinbox.value()

    def _log(self, message):
        """–ü—Ä–æ—Å—Ç–æ–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
        print(f"ModelManagementDialog: {message}")

    def _setup_text_change_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞."""
        # LayoutLM
        if hasattr(self, 'layoutlm_model_id_edit'):
            self.layoutlm_model_id_edit.textChanged.connect(lambda: self.check_models_availability())
        if hasattr(self, 'custom_layoutlm_name_edit'):
            self.custom_layoutlm_name_edit.textChanged.connect(lambda: self.check_models_availability())
            
        # Donut
        if hasattr(self, 'donut_model_id_edit'):
            self.donut_model_id_edit.textChanged.connect(lambda: self.check_models_availability())
            
        # Gemini
        # –£–¥–∞–ª–µ–Ω–æ: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è gemini_api_key_edit (–ø–æ–ª–µ —É–¥–∞–ª–µ–Ω–æ —Å –≤–∫–ª–∞–¥–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏")

    def init_ui(self):
        main_layout = QVBoxLayout(self)
        self.tab_widget = QTabWidget()

        # –í–∫–ª–∞–¥–∫–∞ 0: API –ö–ª—é—á–∏ –∏ —Å–µ–∫—Ä–µ—Ç—ã (–ø–µ—Ä–≤–∞—è –∏ –≥–ª–∞–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞)
        self._create_api_keys_tab()

        # –í–∫–ª–∞–¥–∫–∞ 1: –û–±–ª–∞—á–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–Ω–æ–≤–∞—è –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞)
        self._create_cloud_models_tab()

        # –í–∫–ª–∞–¥–∫–∞ 2: –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–Ω–æ–≤–∞—è –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞)  
        self._create_local_models_tab()

        # –í–∫–ª–∞–¥–∫–∞ 3: –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø—É—Ç–∏, —è–∑—ã–∫–∏, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
        self._create_general_settings_tab()

        main_layout.addWidget(self.tab_widget)

        # –ö–Ω–æ–ø–∫–∏ –¥–∏–∞–ª–æ–≥–∞
        buttons_layout = QHBoxLayout()
        
        self.test_all_button = QPushButton("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        self.test_all_button.clicked.connect(self._test_all_connections)
        buttons_layout.addWidget(self.test_all_button)
        
        buttons_layout.addStretch()
        
        self.save_button = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.save_button.clicked.connect(self.save_all_settings)
        self.save_button.setDefault(True)
        buttons_layout.addWidget(self.save_button)
        
        self.cancel_button = QPushButton("‚ùå –û—Ç–º–µ–Ω–∞")
        self.cancel_button.clicked.connect(self.reject)
        buttons_layout.addWidget(self.cancel_button)
        
        main_layout.addLayout(buttons_layout)

    def _create_path_setting(self, layout, label_text, settings_key_part=None):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—è –≤—ã–±–æ—Ä–∞ –ø—É—Ç–∏."""
        path_layout = QHBoxLayout()
        path_label = QLabel(label_text)
        path_edit = QLineEdit()
        browse_button = QPushButton("–û–±–∑–æ—Ä...")
        # –ï—Å–ª–∏ settings_key_part –Ω–µ None, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∏–Ω–∞—á–µ - —Ñ–∞–π–ª
        if settings_key_part and "tesseract" not in settings_key_part and "poppler" not in settings_key_part : 
            browse_button.clicked.connect(lambda checked, le=path_edit, sk=settings_key_part: self._select_directory_for_setting(le, sk))
        elif settings_key_part and ("tesseract" in settings_key_part or "poppler" in settings_key_part):
             # –î–ª—è tesseract –Ω—É–∂–µ–Ω —Ñ–∞–π–ª, –¥–ª—è poppler - –ø–∞–ø–∫–∞ bin
            if "tesseract" in settings_key_part:
                browse_button.clicked.connect(lambda checked, le=path_edit, sk=settings_key_part: self._select_executable_for_setting(le, sk))
            else: # poppler
                browse_button.clicked.connect(lambda checked, le=path_edit, sk=settings_key_part: self._select_directory_for_setting(le, sk))
        else: # –§–∞–π–ª, –Ω–æ –±–µ–∑ settings_key_part (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
            browse_button.clicked.connect(lambda checked, le=path_edit: self._select_file_for_setting(le))
        
        path_layout.addWidget(path_label)
        path_layout.addWidget(path_edit, 1)
        path_layout.addWidget(browse_button)
        layout.addLayout(path_layout)
        return path_edit

    def _create_prompt_setting(self, layout, label_text):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞."""
        prompt_edit = QTextEdit()
        prompt_edit.setAcceptRichText(False)
        prompt_edit.setFixedHeight(100) # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É
        self._add_widget_with_label(layout, label_text, prompt_edit)
        return prompt_edit

    def _add_widget_with_label(self, layout, label_text, widget, stretch_factor=0):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–∏–¥–∂–µ—Ç —Å –º–µ—Ç–∫–æ–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π layout."""
        if isinstance(layout, QFormLayout):
            layout.addRow(label_text, widget)
        else:
            label = QLabel(label_text)
            layout.addWidget(label)
            if stretch_factor > 0:
                layout.addWidget(widget, stretch_factor)
            else:
                layout.addWidget(widget)
                
    def _select_directory_for_setting(self, line_edit_widget, settings_key_part):
        current_path = line_edit_widget.text() or os.path.expanduser("~")
        dir_path = QFileDialog.getExistingDirectory(self, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è {settings_key_part}", current_path)
        if dir_path:
            line_edit_widget.setText(dir_path)

    def _select_executable_for_setting(self, line_edit_widget, settings_key_part):
        current_path = line_edit_widget.text() or os.path.expanduser("~")
        # –§–∏–ª—å—Ç—Ä –¥–ª—è tesseract.exe
        file_filter = "–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã (*.exe)" if sys.platform == "win32" else "–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        file_path, _ = QFileDialog.getOpenFileName(self, f"–í—ã–±–µ—Ä–∏—Ç–µ {settings_key_part}", current_path, file_filter)
        if file_path:
            line_edit_widget.setText(file_path)

    def _select_file_for_setting(self, line_edit_widget):
        current_path = line_edit_widget.text() or os.path.expanduser("~")
        file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", current_path)
        if file_path:
            line_edit_widget.setText(file_path)

    def _log_callback_for_task(self, message):
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å QTextEdit –≤ –¥–∏–∞–ª–æ–≥–µ
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ü–∏—é –ª–æ–≥–æ–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –≤–∫–ª–∞–¥–æ–∫.
        self._log(f"TASK_LOG: {message}")
        # self.log_display_widget.appendPlainText(message) # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π –≤–∏–¥–∂–µ—Ç

    def _execute_task_in_thread(self, task_callable, on_finished_slot, on_error_slot, on_progress_slot=None, *args, **kwargs):
        if self.current_thread and self.current_thread.isRunning():
            QMessageBox.warning(self, "–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", 
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
            return

        self.current_worker = Worker(task_callable, *args, **kwargs)
        self.current_thread = QThread(self)
        self.current_worker.moveToThread(self.current_thread)

        self.current_worker.finished.connect(on_finished_slot)
        self.current_worker.error.connect(on_error_slot)
        if on_progress_slot:
            self.current_worker.progress.connect(on_progress_slot)
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
        self.current_thread.started.connect(self.current_worker.run)
        self.current_worker.finished.connect(self.current_thread.quit)
        self.current_worker.finished.connect(self.current_worker.deleteLater)
        self.current_thread.finished.connect(self.current_thread.deleteLater)
        self.current_thread.finished.connect(self._reset_current_task_state)
        self.current_worker.error.connect(self._reset_current_task_state) # –¢–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ

        self.current_thread.start()

    def _reset_current_task_state(self):
        self.current_thread = None
        self.current_worker = None
        # –û–±–Ω–æ–≤–∏—Ç—å UI –∫–Ω–æ–ø–æ–∫ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã–º–∏
        if hasattr(self, 'download_layoutlm_button'): self.download_layoutlm_button.setEnabled(True)
        if hasattr(self, 'download_donut_button'): self.download_donut_button.setEnabled(True)
        # –£–¥–∞–ª–µ–Ω–æ: test_gemini_key_button –∏ test_hf_token_button (–∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∫–ª–∞–¥–æ–∫)
        if hasattr(self, 'update_gemini_list_button'): self.update_gemini_list_button.setEnabled(True)

        if hasattr(self, 'layoutlm_progress'): self.layoutlm_progress.setVisible(False)
        if hasattr(self, 'donut_progress'): self.donut_progress.setVisible(False)
        # –∏ —Ç.–¥. –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
    def _on_layoutlm_load_success(self, success, model_path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ LayoutLM."""
        self._reset_current_task_state()
        
        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º UI
            settings_manager.set_value("ModelsStatus", "layoutlm_loaded", True)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –º–æ–¥–µ–ª—å –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–∫–∞—Å—Ç–æ–º–Ω–∞—è –∏–ª–∏ HF)
            selected_layoutlm_type = self.layoutlm_model_type_combo.currentData()
            is_custom = (selected_layoutlm_type == "custom")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –º–æ–¥–µ–ª–∏
            settings_manager.set_value("Models", "layoutlm_is_custom", str(is_custom))
            
            # –ï—Å–ª–∏ –∫–∞—Å—Ç–æ–º–Ω–∞—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å
            if is_custom:
                custom_name = os.path.basename(model_path)
                settings_manager.set_value("Models", "layoutlm_custom_path", custom_name)
            else:
                # –î–ª—è HF —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞ (–Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è —Å–∞–º–æ –ø–æ–ª–µ)
                current_model_id = self.layoutlm_model_id_edit.text().strip()
                settings_manager.set_value("Models", "layoutlm_id", current_model_id)
                
            # –û–±–Ω–æ–≤–ª—è–µ–º UI (—Å—Ç–∞—Ç—É—Å –∏ –∫–Ω–æ–ø–∫—É, –Ω–æ –Ω–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ ID)
            self._update_layoutlm_status_label_and_button(model_path if is_custom else current_model_id, is_custom)
            
            QMessageBox.information(
                self, 
                "–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞", 
                f"–ú–æ–¥–µ–ª—å LayoutLM —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {os.path.basename(model_path)}"
            )
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ (—Ö–æ—Ç—è —Å—Ç—Ä–∞–Ω–Ω–æ, —á—Ç–æ _on_layoutlm_load_success –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å success=False)
            QMessageBox.warning(
                self, 
                "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", 
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å LayoutLM: {model_path}"
            )
            
    def _on_layoutlm_load_error(self, error_message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ LayoutLM."""
        self._reset_current_task_state()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π ID –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        selected_layoutlm_type = self.layoutlm_model_type_combo.currentData()
        is_custom = (selected_layoutlm_type == "custom")
        model_id_or_path = ""
        
        if is_custom:
            model_id_or_path = self.custom_layoutlm_name_edit.text().strip()
            # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–æ–¥–µ–ª–∏
            if model_id_or_path:
                model_id_or_path = os.path.join(
                    settings_manager.get_string("Paths", "trained_models_path", app_config.TRAINED_MODELS_PATH),
                    model_id_or_path
                )
        else:
            model_id_or_path = self.layoutlm_model_id_edit.text().strip()
            
        # –û–±–Ω–æ–≤–ª—è–µ–º UI —Å —É—á–µ—Ç–æ–º –æ—à–∏–±–∫–∏
        self.update_model_status_label("layoutlm", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
        self._update_layoutlm_status_label_and_button(model_id_or_path, is_custom)
        
        QMessageBox.critical(
            self, 
            "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", 
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å LayoutLM: {error_message}"
        )

    # --- LayoutLM Specific Methods --- 
    def _on_layoutlm_model_type_changed(self, index):
        self._update_layoutlm_section_visibility()
        self.check_models_availability() # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–∫–∏/–º–µ—Ç–∫–∏ –∏ –∏–Ω—Ñ–æ-–ª–µ–π–±–ª–∞

    def _update_layoutlm_section_visibility(self):
        selected_type = self.layoutlm_model_type_combo.currentData()
        is_hf = selected_type == "huggingface"
        is_custom = selected_type == "custom"

        self.hf_layoutlm_group.setVisible(is_hf)
        self.custom_layoutlm_group.setVisible(is_custom)
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ —Ç–æ–∫–µ–Ω–∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ _update_layoutlm_status_label_and_button
        # –∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ check_models_availability

    def _populate_custom_layoutlm_models_combo(self):
        self.custom_layoutlm_model_selector.clear()
        trained_models_path = settings_manager.get_string("Paths", "trained_models_path", app_config.TRAINED_MODELS_PATH)
        
        if not os.path.isdir(trained_models_path):
            self.custom_layoutlm_model_selector.addItem("–ü–∞–ø–∫–∞ —Å –º–æ–¥–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            self.custom_layoutlm_model_selector.setEnabled(False)
            return

        found_models = []
        try:
            for item_name in os.listdir(trained_models_path):
                item_path = os.path.join(trained_models_path, item_name)
                if os.path.isdir(item_path) and os.path.exists(os.path.join(item_path, "config.json")):
                    found_models.append(item_name)
        except FileNotFoundError:
            self.custom_layoutlm_model_selector.addItem("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ –º–æ–¥–µ–ª–µ–π")
            self.custom_layoutlm_model_selector.setEnabled(False)
            return
        
        if found_models:
            self.custom_layoutlm_model_selector.addItems(found_models)
            self.custom_layoutlm_model_selector.setEnabled(True)
            saved_custom_name = settings_manager.get_custom_layoutlm_model_name()
            if saved_custom_name in found_models:
                self.custom_layoutlm_model_selector.setCurrentText(saved_custom_name)
                # self.custom_layoutlm_name_edit.setText(saved_custom_name) # –≠—Ç–æ —Å–¥–µ–ª–∞–µ—Ç _on_custom_layoutlm_selected_from_combo
        else:
            self.custom_layoutlm_model_selector.addItem("–õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            self.custom_layoutlm_model_selector.setEnabled(False)

    def _on_custom_layoutlm_selected_from_combo(self, index_or_text_arg):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ LayoutLM –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞.
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–æ–¥–µ–ª–∏.
        
        Args:
            index_or_text_arg: –ò–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∏–≥–Ω–∞–ª–∞)
        """
        # QComboBox –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å –∏–ª–∏ —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏/—Å–∏—Ç—É–∞—Ü–∏–∏
        selected_model_name = ""
        if isinstance(index_or_text_arg, int):
            if index_or_text_arg >= 0: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤–∞–ª–∏–¥–Ω—ã–π
                 selected_model_name = self.custom_layoutlm_model_selector.itemText(index_or_text_arg)
        elif isinstance(index_or_text_arg, str):
            selected_model_name = index_or_text_arg
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–º—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º
        if selected_model_name and "–Ω–µ –Ω–∞–π–¥–µ–Ω—ã" not in selected_model_name and "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞" not in selected_model_name:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏
            self.custom_layoutlm_name_edit.setText(selected_model_name)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            self.check_models_availability()

    def _update_donut_status_and_button(self):
        model_id = self.donut_model_id_edit.text().strip()
        is_actually_loaded = False
        status_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        button_text = "–î–µ–π—Å—Ç–≤–∏–µ —Å –º–æ–¥–µ–ª—å—é"
        button_enabled = False

        if not model_id:
            status_text = "ID –º–æ–¥–µ–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω"
        elif not (self.parent_window and hasattr(self.parent_window, 'model_manager')):
            status_text = "–ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        else:
            button_enabled = True
            manager = self.parent_window.model_manager
            # Construct a cache key that is consistent with how ModelManager might store it
            donut_cache_key = f"donut_{model_id.replace(os.sep, '_')}" 
            
            if donut_cache_key in manager.models:
                cached_processor = manager.models[donut_cache_key]
                # Check if the cached processor is for the current model_id and is loaded
                if hasattr(cached_processor, 'model_id') and cached_processor.model_id == model_id and \
                   hasattr(cached_processor, 'is_loaded') and cached_processor.is_loaded:
                    is_actually_loaded = True
                    status_text = f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞"
                elif hasattr(cached_processor, 'model_id') and cached_processor.model_id == model_id:
                    # It was for this ID, but not loaded (e.g., previous error)
                    status_text = "–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏" 
                else:
                    # A processor exists for this key, but it's for a different model_id
                    status_text = "–ì–æ—Ç–æ–≤–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ" 
            else:
                # Not in active session (manager.models), check if files are in HF cache
                # This is a simplified check; DonutProcessorImpl.load_model has more robust HF cache handling.
                actual_donut_cache_dir = os.path.join(app_config.MODELS_PATH, 'donut', model_id.replace("/", "_"))
                if os.path.isdir(actual_donut_cache_dir) and os.path.exists(os.path.join(actual_donut_cache_dir, "config.json")):
                    status_text = "–í –∫—ç—à–µ HF (–Ω–µ –≤ —Å–µ—Å—Å–∏–∏)"
                else:
                    status_text = "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–Ω–µ—Ç –≤ –∫—ç—à–µ HF)"
        
        self.donut_status_label.setText(status_text)
        if is_actually_loaded:
            self.donut_status_label.setStyleSheet("color: green;")
            button_text = f"–û–±–Ω–æ–≤–∏—Ç—å ({model_id.split('/')[-1]})"
        else:
            if "–û—à–∏–±–∫–∞" in status_text or "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞" in status_text or "–Ω–µ —É–∫–∞–∑–∞–Ω" in status_text:
                self.donut_status_label.setStyleSheet("color: red;")
            else: # "–ì–æ—Ç–æ–≤–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ", "–í –∫—ç—à–µ HF"
                self.donut_status_label.setStyleSheet("color: orange;")
            button_text = f"–°–∫–∞—á–∞—Ç—å ({model_id.split('/')[-1]})"
        
        self.download_donut_button.setText(button_text)
        self.download_donut_button.setEnabled(button_enabled)

    def check_models_availability(self):
        """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ—Ç–æ–¥—É check_models_availability –≤—ã—à–µ."""
        # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–æ—è–≤–∏–ª—Å—è –∏–∑-–∑–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
        self.check_models_availability = lambda: None # –ò–∑–±–µ–≥–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–∏
        self.check_gemini_availability()
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤
        self.check_models_availability = self.__class__.check_models_availability.__get__(self, self.__class__)
        
    def check_gemini_availability(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API Gemini –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å."""
        if not hasattr(self, 'gemini_key_status_label'):
            return
            
        if not GENAI_AVAILABLE:
            self.gemini_key_status_label.setText("–°—Ç–∞—Ç—É—Å: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            self.gemini_key_status_label.setStyleSheet("color: orange;")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        api_key = settings_manager.get_gemini_api_key()
        
        if not api_key:
            self.gemini_key_status_label.setText("–°—Ç–∞—Ç—É—Å –∫–ª—é—á–∞: –ù–µ —É–∫–∞–∑–∞–Ω")
            self.gemini_key_status_label.setStyleSheet("color: red;")
        else:
            self.gemini_key_status_label.setText("–°—Ç–∞—Ç—É—Å –∫–ª—é—á–∞: –°–æ—Ö—Ä–∞–Ω—ë–Ω")
            self.gemini_key_status_label.setStyleSheet("color: green;")

    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Ö –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # LayoutLM –º–æ–¥–µ–ª—å
        if hasattr(self, 'layoutlm_model_id_edit'):
            model_id = settings_manager.get_string('Models', 'layoutlm_id', app_config.LAYOUTLM_MODEL_ID)
            self.layoutlm_model_id_edit.setText(model_id)
            
        # –¢–∏–ø –º–æ–¥–µ–ª–∏ LayoutLM
        if hasattr(self, 'layoutlm_model_type_combo'):
            model_type = settings_manager.get_string('Models', 'layoutlm_type', 'huggingface')
            index = 0 if model_type == 'huggingface' else 1
            self.layoutlm_model_type_combo.setCurrentIndex(index)
            self._update_layoutlm_section_visibility()
            
        # –ö–∞—Å—Ç–æ–º–Ω–∞—è LayoutLM –º–æ–¥–µ–ª—å
        if hasattr(self, 'custom_layoutlm_name_edit'):
            custom_name = settings_manager.get_string('Models', 'layoutlm_custom_name', '')
            self.custom_layoutlm_name_edit.setText(custom_name)
            self._populate_custom_layoutlm_models_combo()

        # Donut –º–æ–¥–µ–ª—å
        if hasattr(self, 'donut_model_id_edit'):
            model_id = settings_manager.get_string('Models', 'donut_id', app_config.DONUT_MODEL_ID)
            self.donut_model_id_edit.setText(model_id)

        # Gemini –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if hasattr(self, 'gemini_model_selector'):
            self.populate_gemini_models_from_settings()
            
        if hasattr(self, 'gemini_temperature_spinner'):
            temp = settings_manager.get_float('Gemini', 'temperature', app_config.DEFAULT_GEMINI_TEMPERATURE)
            self.gemini_temperature_spinner.setValue(temp)
            
        if hasattr(self, 'gemini_max_tokens_spinner'):
            tokens = settings_manager.get_int('Gemini', 'max_tokens', app_config.DEFAULT_GEMINI_MAX_TOKENS)
            self.gemini_max_tokens_spinner.setValue(tokens)
            
        if hasattr(self, 'gemini_pdf_dpi_spinner'):
            dpi = settings_manager.get_int('Gemini', 'pdf_dpi', app_config.GEMINI_PDF_DPI)
            self.gemini_pdf_dpi_spinner.setValue(dpi)

        # –ü—É—Ç–∏ –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
        if hasattr(self, 'tesseract_path_edit'):
            path = settings_manager.get_string('Paths', 'tesseract_path', app_config.TESSERACT_PATH or '')
            self.tesseract_path_edit.line_edit.setText(path)
            
        if hasattr(self, 'poppler_path_edit'):
            path = settings_manager.get_string('Paths', 'poppler_path', app_config.POPPLER_PATH or '')
            self.poppler_path_edit.line_edit.setText(path)
            
        if hasattr(self, 'training_datasets_path_edit'):
            path = settings_manager.get_string('Paths', 'training_datasets_path', app_config.TRAINING_DATASETS_PATH or '')
            self.training_datasets_path_edit.line_edit.setText(path)
            
        if hasattr(self, 'trained_models_path_edit'):
            path = settings_manager.get_string('Paths', 'trained_models_path', app_config.TRAINED_MODELS_PATH or '')
            self.trained_models_path_edit.line_edit.setText(path)

        # –ü—Ä–æ–º–ø—Ç—ã
        if hasattr(self, 'layoutlm_prompt_edit'):
            prompt = settings_manager.get_model_prompt('layoutlm')
            self.layoutlm_prompt_edit.setPlainText(prompt)
            
        if hasattr(self, 'donut_prompt_edit'):
            prompt = settings_manager.get_model_prompt('donut')
            self.donut_prompt_edit.setPlainText(prompt)
            
        if hasattr(self, 'gemini_prompt_edit'):
            prompt = settings_manager.get_model_prompt('gemini')
            self.gemini_prompt_edit.setPlainText(prompt)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
        if hasattr(self, 'layoutlm_base_model_edit'):
            base_model = settings_manager.get_string('Training', 'layoutlm_base_model', app_config.LAYOUTLM_MODEL_ID_FOR_TRAINING)
            self.layoutlm_base_model_edit.setText(base_model)
            
        if hasattr(self, 'epochs_spinbox'):
            epochs = settings_manager.get_int('Training', 'epochs', app_config.DEFAULT_TRAIN_EPOCHS)
            self.epochs_spinbox.setValue(epochs)
            
        if hasattr(self, 'batch_size_spinbox'):
            batch_size = settings_manager.get_int('Training', 'batch_size', app_config.DEFAULT_TRAIN_BATCH_SIZE)
            self.batch_size_spinbox.setValue(batch_size)
            
        if hasattr(self, 'learning_rate_dspinbox'):
            lr = settings_manager.get_float('Training', 'learning_rate', app_config.DEFAULT_LEARNING_RATE)
            self.learning_rate_dspinbox.setValue(lr)

        # –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if hasattr(self, 'batch_delay_spinner'):
            delay = settings_manager.get_int('Misc', 'batch_processing_delay', app_config.DEFAULT_BATCH_PROCESSING_DELAY)
            self.batch_delay_spinner.setValue(delay)
            
        if hasattr(self, 'vat_rate_spinner'):
            vat_rate = settings_manager.get_default_vat_rate()
            self.vat_rate_spinner.setValue(vat_rate)

        # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏-–ø–æ–ª—É—á–∞—Ç–µ–ª—è
        if hasattr(self, 'company_receiver_name_edit'):
            company_name = settings_manager.get_company_receiver_name()
            self.company_receiver_name_edit.setText(company_name)

        # –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if hasattr(self, 'offline_mode_checkbox'):
            offline_mode = settings_manager.get_bool('Network', 'offline_mode', app_config.OFFLINE_MODE)
            self.offline_mode_checkbox.setChecked(offline_mode)
            
        if hasattr(self, 'http_timeout_spinbox'):
            timeout = settings_manager.get_int('Network', 'http_timeout', app_config.HTTP_TIMEOUT)
            self.http_timeout_spinbox.setValue(timeout)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π
        self.check_models_availability()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
        self._load_secrets_values()
        
        print("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")

    def populate_gemini_models_from_settings(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Gemini –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        if not hasattr(self, 'gemini_model_selector'):
            return
            
        self.gemini_model_selector.clear()
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        saved_models_json = settings_manager.get_string('Gemini', 'available_models_json', "[]")
        try:
            saved_models = json.loads(saved_models_json)
            if saved_models and isinstance(saved_models, list):
                self.gemini_model_selector.addItems(saved_models)
                # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
                current_model = settings_manager.get_string('Gemini', 'sub_model_id', app_config.GEMINI_MODEL_ID)
                index = self.gemini_model_selector.findText(current_model)
                if index >= 0:
                    self.gemini_model_selector.setCurrentIndex(index)
                return
        except (json.JSONDecodeError, ValueError, TypeError) as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π Gemini –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫
        default_models = [
            "models/gemini-1.5-flash",
            "models/gemini-1.5-pro",
            "models/gemini-1.0-pro",
            "models/gemini-2.0-flash",
            "models/gemini-2.0-pro"
        ]
        self.gemini_model_selector.addItems(default_models)
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
        current_model = settings_manager.get_string('Gemini', 'sub_model_id', app_config.GEMINI_MODEL_ID)
        index = self.gemini_model_selector.findText(current_model)
        if index >= 0:
            self.gemini_model_selector.setCurrentIndex(index)
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
            self.gemini_model_selector.addItem(current_model)
            self.gemini_model_selector.setCurrentText(current_model)

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Gemini API (—Ç–æ–ª—å–∫–æ –º–æ–¥–µ–ª—å, –∫–ª—é—á –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "üîê API –ö–ª—é—á–∏")
        if hasattr(self, 'gemini_model_selector'):
            self._on_gemini_sub_model_changed(self.gemini_model_selector.currentIndex())
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Gemini
        if hasattr(self, 'gemini_temperature_spinner') and hasattr(self, 'gemini_max_tokens_spinner'):
            self.save_gemini_generation_parameters_action()
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –ù–î–°
        if hasattr(self, 'vat_rate_spinner'):
            settings_manager.set_default_vat_rate(self.vat_rate_spinner.value())
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–µ–π
        # LayoutLM
        layoutlm_is_custom = settings_manager.get_bool('Models', 'layoutlm_is_custom', False)
        if hasattr(self, 'layoutlm_model_type_combo'):
            self.layoutlm_model_type_combo.setCurrentIndex(1 if layoutlm_is_custom else 0)
            
        if hasattr(self, 'layoutlm_model_id_edit'):
            current_model_id = settings_manager.get_string('Models', 'layoutlm_id', app_config.LAYOUTLM_MODEL_ID)
            self.layoutlm_model_id_edit.setText(current_model_id)
            
        if hasattr(self, 'custom_layoutlm_name_edit'):
            self.custom_layoutlm_name_edit.setText(settings_manager.get_string('Models', 'layoutlm_custom_path', ""))
            
        if hasattr(self, 'donut_model_id_edit'):
            current_model_id = settings_manager.get_string('Models', 'donut_id', app_config.DONUT_MODEL_ID)
            self.donut_model_id_edit.setText(current_model_id)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ HF —Ç–æ–∫–µ–Ω–∞
        if hasattr(self, 'hf_token_edit'):
            self.hf_token_edit.setText(settings_manager.get_huggingface_token())
            
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ—Å–µ—Ä–∞–∫–∫—Ç–∞ –∏ –ø–æ–ø–ø–ª–µ—Ä–∞
        if hasattr(self, 'tesseract_path_edit') and hasattr(self.tesseract_path_edit, 'line_edit'):
            self.tesseract_path_edit.line_edit.setText(settings_manager.get_string('Paths', 'tesseract_path', app_config.TESSERACT_PATH or ''))
            
        if hasattr(self, 'poppler_path_edit') and hasattr(self.poppler_path_edit, 'line_edit'):
            self.poppler_path_edit.line_edit.setText(settings_manager.get_string('Paths', 'poppler_path', app_config.POPPLER_PATH or ''))
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
        self.save_model_prompt('layoutlm', called_from_save_settings=True)
        self.save_model_prompt('donut', called_from_save_settings=True)
        self.save_model_prompt('gemini', called_from_save_settings=True)

        # NEW: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—É—á–µ–Ω–∏—è
        self.save_training_parameters_action(called_from_save_settings=True)

        # NEW: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—É—á–µ–Ω–∏—è, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if hasattr(self, 'training_datasets_path_edit') and hasattr(self.training_datasets_path_edit, 'line_edit'):
            settings_manager.set_value('Paths', 'training_datasets_path', self.training_datasets_path_edit.line_edit.text())
            app_config.TRAINING_DATASETS_PATH = self.training_datasets_path_edit.line_edit.text()
            
        if hasattr(self, 'trained_models_path_edit') and hasattr(self.trained_models_path_edit, 'line_edit'):
            settings_manager.set_value('Paths', 'trained_models_path', self.trained_models_path_edit.line_edit.text())
            app_config.TRAINED_MODELS_PATH = self.trained_models_path_edit.line_edit.text()
            
        if hasattr(self, 'gemini_annotation_prompt_edit'):
            # –ö–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –≤ Base64 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥-—Ñ–∞–π–ª–µ
            try:
                prompt_text = self.gemini_annotation_prompt_edit.toPlainText()
                prompt_encoded = base64.b64encode(prompt_text.encode('utf-8')).decode('ascii')
                settings_manager.set_value('Training', 'gemini_annotation_prompt_encoded', prompt_encoded)
                app_config.GEMINI_ANNOTATION_PROMPT_DEFAULT = prompt_text
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏: {e}")

        settings_manager.save_settings()
        QMessageBox.information(self, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        print("DEBUG: save_settings FINISHED in ModelManagementDialog")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if hasattr(self, 'tesseract_path_edit') and hasattr(self.tesseract_path_edit, 'line_edit'):
            app_config.TESSERACT_PATH = self.tesseract_path_edit.line_edit.text()
            
        if hasattr(self, 'poppler_path_edit') and hasattr(self.poppler_path_edit, 'line_edit'):
            app_config.POPPLER_PATH = self.poppler_path_edit.line_edit.text()
            
        app_config.OFFLINE_MODE = self.offline_mode_checkbox.isChecked()
        app_config.HTTP_TIMEOUT = self.http_timeout_spinbox.value()
        
        if hasattr(self, 'batch_delay_spinner'):
            app_config.DEFAULT_BATCH_PROCESSING_DELAY = self.batch_delay_spinner.value()
            
        app_config.HF_TOKEN = self.hf_token_edit.text()
        
        if hasattr(self, 'layoutlm_model_id_edit'):
            app_config.LAYOUTLM_MODEL_ID = self.layoutlm_model_id_edit.text()
            
        if hasattr(self, 'donut_model_id_edit'):
            app_config.DONUT_MODEL_ID = self.donut_model_id_edit.text()
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ GEMINI_MODEL_ID –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ MainWindow
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ config –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
        if hasattr(self, 'training_datasets_path_edit') and hasattr(self.training_datasets_path_edit, 'line_edit'):
            app_config.TRAINING_DATASETS_PATH = self.training_datasets_path_edit.line_edit.text()
            
        if hasattr(self, 'trained_models_path_edit') and hasattr(self.trained_models_path_edit, 'line_edit'):
            app_config.TRAINED_MODELS_PATH = self.trained_models_path_edit.line_edit.text()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ gemini_annotation_prompt_edit —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤—ã—à–µ

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª—è—Ö –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–∫–Ω–µ, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
        if self.parent_window:
            self.parent_window.populate_gemini_models() # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π Gemini, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
            # –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã UI –≤ MainWindow, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —ç—Ç–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫

    def select_directory(self, line_edit_widget):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—É—Ç—å –≤ QLineEdit."""
        directory = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É", line_edit_widget.text() or os.path.expanduser("~"))
        if directory:
            line_edit_widget.setText(directory)

    def update_batch_delay(self, value):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–∫–µ—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ."""
        settings_manager.set_value('Misc', 'batch_processing_delay', value)
        app_config.DEFAULT_BATCH_PROCESSING_DELAY = value
        print(f"–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {value} —Å–µ–∫.")
        
    def update_default_vat_rate(self, value):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ –ù–î–° –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        settings_manager.set_default_vat_rate(value)
        print(f"–°—Ç–∞–≤–∫–∞ –ù–î–° –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {value}%")
    
    def update_company_receiver_name(self, name):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏-–ø–æ–ª—É—á–∞—Ç–µ–ª—è."""
        settings_manager.set_company_receiver_name(name)
        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏-–ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {name}")
        
    def save_hf_token_action(self):
        """–î–µ–π—Å—Ç–≤–∏–µ: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω Hugging Face."""
        new_token = self.hf_token_edit.text().strip()
        if new_token:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            settings_manager.set_value('HuggingFace', 'token', new_token)
            app_config.HF_TOKEN = new_token
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings_manager.save_settings()
            
            print(f"–¢–æ–∫–µ–Ω Hugging Face —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        else:
            # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
            settings_manager.set_value('HuggingFace', 'token', '')
            app_config.HF_TOKEN = ''
            settings_manager.save_settings()
            print(f"–¢–æ–∫–µ–Ω Hugging Face –æ—á–∏—â–µ–Ω")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—è
        self.hf_token_status_label.setText(f"–°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞: {'–ó–∞–¥–∞–Ω' if new_token else '–ù–µ –∑–∞–¥–∞–Ω'}")
        self.hf_token_status_label.setStyleSheet(f"color: {'green' if new_token else 'red'};")

    # NEW: –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
    def update_model_info_display(self, model_type):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –≤–∫–ª–∞–¥–∫–µ."""
        if model_type == 'layoutlm':
            tab_index = self.tab_widget.indexOf(self.tab_widget.findChild(QWidget, "layoutlm_tab"))
            if tab_index >= 0:
                 layoutlm_tab = self.tab_widget.widget(tab_index)
                 info_label = layoutlm_tab.findChild(QLabel, "layoutlm_info_label") # –ù—É–∂–µ–Ω objectName
                 if info_label:
                     # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º info_text —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º ID
                     current_id = settings_manager.get_string('Models', 'layoutlm_id', app_config.LAYOUTLM_MODEL_ID)
                     info_text = f"<b>LayoutLMv3</b><br><br>"
                     if "layoutlm" in app_config.MODELS_INFO:
                         model_info = app_config.MODELS_INFO["layoutlm"]
                         info_text += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {model_info.get('name', 'LayoutLMv3')}<br>"
                         info_text += f"<b>ID:</b> {current_id}<br>" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID
                         info_text += f"<b>–í–µ—Ä—Å–∏—è:</b> {model_info.get('version', 'base')}<br>"
                         info_text += f"<b>–ó–∞–¥–∞—á–∞:</b> {model_info.get('task', 'document-understanding')}<br>"
                         info_text += f"<b>–†–∞–∑–º–µ—Ä:</b> ~{model_info.get('size_mb', 500)} –ú–ë<br>"
                         info_text += f"<b>–¢—Ä–µ–±—É–µ—Ç OCR:</b> {'–î–∞' if model_info.get('requires_ocr', True) else '–ù–µ—Ç'}<br>"
                         info_text += f"<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:</b> {', '.join(model_info.get('languages', ['eng']))}<br>"
                     info_label.setText(info_text)
        elif model_type == 'donut':
            if hasattr(self, 'donut_info_label'): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ label —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                 current_id = settings_manager.get_string('Models', 'donut_id', app_config.DONUT_MODEL_ID)
                 info_text = f"<b>Donut</b><br><br>"
                 if "donut" in app_config.MODELS_INFO: 
                     model_info_template = app_config.MODELS_INFO["donut"]
                     info_text += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {model_info_template.get('name', 'Donut')}<br>"
                     info_text += f"<b>ID:</b> {current_id}<br>"
                     info_text += f"<b>–í–µ—Ä—Å–∏—è:</b> {model_info_template.get('version', 'base')}<br>"
                     info_text += f"<b>–ó–∞–¥–∞—á–∞:</b> {model_info_template.get('task', 'document-understanding')}<br>"
                     info_text += f"<b>–†–∞–∑–º–µ—Ä:</b> ~{model_info_template.get('size_mb', 700)} –ú–ë<br>"
                     info_text += f"<b>–¢—Ä–µ–±—É–µ—Ç OCR:</b> {'–î–∞' if model_info_template.get('requires_ocr', False) else '–ù–µ—Ç'}<br>"
                     info_text += f"<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:</b> {', '.join(model_info_template.get('languages', ['eng']))}<br>"
                 else: 
                     info_text += f"<b>ID:</b> {current_id}<br>"

                 self.donut_info_label.setText(info_text)
                 
                 # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ ID, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ –≤–∏–¥–∏–º–æ
                 if hasattr(self, 'donut_model_id_edit') and self.donut_model_id_edit.isVisible():
                     self.donut_model_id_edit.setText(current_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ Donut
            is_loaded = settings_manager.get_bool('ModelsStatus', 'donut_loaded', False)
            current_model_id_for_status = settings_manager.get_string('Models', 'donut_id', app_config.DONUT_MODEL_ID)
            if hasattr(self, 'donut_status_label'): # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ donut_status_label —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if is_loaded:
                    self.donut_status_label.setText(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ ({current_model_id_for_status})")
                else:
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    self.donut_status_label.setText(f"–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ({current_model_id_for_status})")

        elif model_type == 'gemini':
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è Gemini, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
            pass

    def save_model_id_action(self, model_type):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –º–æ–¥–µ–ª–∏ (LayoutLM –∏–ª–∏ Donut) –∏ –æ—á–∏—â–∞–µ—Ç –∫—ç—à –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        if model_type == 'layoutlm':
            edit_field = self.layoutlm_model_id_edit
            current_id_key = 'layoutlm_id'
            default_id = app_config.LAYOUTLM_MODEL_ID
            model_name = "LayoutLMv3"
            # status_label_attr = 'layoutlm_status_label' # –ê—Ç—Ä–∏–±—É—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ QLabel —Å—Ç–∞—Ç—É—Å–∞
        elif model_type == 'donut':
            edit_field = self.donut_model_id_edit
            current_id_key = 'donut_id'
            default_id = app_config.DONUT_MODEL_ID
            model_name = "Donut"
            # status_label_attr = 'donut_status_label'
        else:
            return

        new_id = edit_field.text().strip()
        if not new_id:
            QMessageBox.warning(self, f"–û—à–∏–±–∫–∞ ID {model_name}", f"ID –º–æ–¥–µ–ª–∏ {model_name} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            old_id_for_revert = settings_manager.get_string('Models', current_id_key, default_id)
            edit_field.setText(old_id_for_revert) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π ID –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            return

        old_id = settings_manager.get_string('Models', current_id_key, default_id)

        if new_id != old_id:
            settings_manager.set_value('Models', current_id_key, new_id)
            # settings_manager.save_settings() # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –∏–ª–∏ –æ–±—â–µ–º save_settings

            QMessageBox.information(self, f"ID –º–æ–¥–µ–ª–∏ {model_name}",
                                    f"ID –º–æ–¥–µ–ª–∏ {model_name} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_id}'.\n"
                                    "–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ —Å–±—Ä–æ—à–µ–Ω. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –Ω–æ–≤—ã–º ID.")
            
            # –ù—É–∂–µ–Ω —É—á–µ—Ç —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏ —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –Ω–µ –≥—Ä—É–∑–∏–ª–∞—Å—å —É—Å—Ç–∞—Ä–µ–≤—à–∞—è –º–æ–¥–µ–ª—å
            settings_manager.set_value('ModelsStatus', f'{model_type}_loaded', False)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.update_model_info_display(model_type)
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫/—Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
            if model_type == 'layoutlm':
                self._update_layoutlm_status_label_and_button(new_id, False)
            elif model_type == 'donut':
                self._update_donut_status_and_button()
            
            # –ó–¥–µ—Å—å –º—ã –ù–ï –æ—á–∏—â–∞–µ–º –∫—ç—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –Ω–µ —É–¥–∞–ª—è—Ç—å —Å–ª—É—á–∞–π–Ω–æ –Ω—É–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏
            # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"
        else:
            QMessageBox.information(self, f"ID –º–æ–¥–µ–ª–∏ {model_name}", f"ID –º–æ–¥–µ–ª–∏ {model_name} –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è.")

    def update_model_status_label(self, model_type, status):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º QLabel."""
        if model_type == 'layoutlm':
            if hasattr(self, 'layoutlm_status_label'): # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
                self.layoutlm_status_label.setText(status)
        elif model_type == 'donut':
            if hasattr(self, 'donut_status_label'): # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
                self.donut_status_label.setText(status)
        # elif model_type == 'gemini': # –ü–æ–∫–∞ Gemini –Ω–µ –∏–º–µ–µ—Ç —Ç–∞–∫–æ–≥–æ —è–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ
        #     pass
            
    def test_huggingface_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Hugging Face."""
        try:
            # –ü–æ–ø—Ä–æ–±—É–π —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω—É–∂–µ–Ω –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏
            # token = "—Ç–≤–æ–π_hf_—Ç–æ–∫–µ–Ω" 
            token = None # –∏–ª–∏ —Ç–∞–∫, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            downloaded_path = hf_hub_download(
                repo_id="microsoft/layoutlmv3-base",
                filename="config.json",
                token=token
            )
            print(f"Successfully downloaded: {downloaded_path}")
        except Exception as e:
            print(f"Error downloading: {e}")
            import traceback
            traceback.print_exc()

    def _update_layoutlm_status_label_and_button(self, model_id_or_path, is_custom):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è LayoutLM –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å."""
        is_actually_loaded = False
        status_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        can_check_status = self.parent_window and hasattr(self.parent_window, 'model_manager')

        if not model_id_or_path:
            status_text = "–ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ / –ü—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω"
            # No early return, let button and color update
        elif can_check_status:
            try:
                manager = self.parent_window.model_manager
                # Construct a cache key consistent with ModelManager
                cache_key = f"layoutlm_{model_id_or_path.replace(os.sep, '_')}"
                
                if cache_key in manager.models:
                    cached_processor = manager.models[cache_key]
                    if cached_processor.model_id_loaded == model_id_or_path and \
                       cached_processor.is_custom_loaded == is_custom and \
                       cached_processor.is_loaded:
                        is_actually_loaded = True
                        status_text = f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞: {os.path.basename(model_id_or_path) if is_custom else model_id_or_path}"
                    elif cached_processor.model_id_loaded == model_id_or_path and \
                         cached_processor.is_custom_loaded == is_custom and \
                         not cached_processor.is_loaded:
                         status_text = "–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ (—Å–º. –ª–æ–≥–∏)"
                    else:
                        # A processor exists for this key, but it's for a different model_id/type
                        status_text = "–ì–æ—Ç–æ–≤–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ" if not is_custom else "–ì–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ"
                else:
                    # Not in active session (manager.models), check local files
                    if is_custom:
                        if os.path.isdir(model_id_or_path) and os.path.exists(os.path.join(model_id_or_path, "config.json")):
                            status_text = "–õ–æ–∫–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ –≤ —Å–µ—Å—Å–∏–∏)"
                        else:
                            status_text = "–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å/–º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    else: # Hugging Face model, check HF cache
                        # –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ HF —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö –ø—É—Ç–µ–π
                        model_cache_found = False
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –º–µ—Å—Ç–µ
                        model_cache_dir_for_hf = os.path.join(app_config.MODELS_PATH, 'layoutlm', model_id_or_path.replace("/", "_"))
                        if os.path.isdir(model_cache_dir_for_hf) and os.path.exists(os.path.join(model_cache_dir_for_hf, "config.json")):
                            model_cache_found = True
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –∫—ç—à–µ huggingface
                        try:
                            # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫—ç—à HF
                            cache_info = scan_cache_dir()
                            for repo in cache_info.repos:
                                if repo.repo_id.lower() == model_id_or_path.lower():
                                    model_cache_found = True
                                    break
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫—ç—à–∞ Hugging Face: {e}")
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        if model_cache_found:
                            status_text = "–í –∫—ç—à–µ HF (–Ω–µ –≤ —Å–µ—Å—Å–∏–∏)"
                        else:
                            status_text = "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–Ω–µ—Ç –≤ –∫—ç—à–µ HF)"
            except Exception as e:
                self._log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ LayoutLM –≤ ModelManagementDialog: {e}") # Use self._log
                status_text = "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"
        else:
            status_text = "–ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            if not model_id_or_path: # Ensure correct status if path is empty and manager is unavailable
                 status_text = "–ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ / –ü—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å, –Ω–æ –Ω–µ –º–µ–Ω—è–µ–º ID –º–æ–¥–µ–ª–∏ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.layoutlm_status_label.setText(status_text)
        if is_actually_loaded:
            self.layoutlm_status_label.setStyleSheet("color: green;")
        elif "–û—à–∏–±–∫–∞" in status_text or "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in status_text or "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞" in status_text or "–Ω–µ —É–∫–∞–∑–∞–Ω" in status_text:
            self.layoutlm_status_label.setStyleSheet("color: red;")
        else: # "–ì–æ—Ç–æ–≤–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ", "–í –∫—ç—à–µ HF", "–õ–æ–∫–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∞", "–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" (if path valid)
            self.layoutlm_status_label.setStyleSheet("color: orange;")

        self._update_layoutlm_button_text(is_custom, is_actually_loaded, model_id_or_path)

    def _update_layoutlm_button_text(self, is_custom, is_loaded, model_id_or_path):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ LayoutLM."""
        if not model_id_or_path:
            self.download_layoutlm_button.setText("–î–µ–π—Å—Ç–≤–∏–µ —Å –º–æ–¥–µ–ª—å—é")
            self.download_layoutlm_button.setEnabled(False)
            return

        if is_custom:
            if is_loaded:
                self.download_layoutlm_button.setText("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é")
                self.download_layoutlm_button.setEnabled(True)
            else:
                self.download_layoutlm_button.setText("–ó–∞–≥—Ä—É–∑–∏—Ç—å/–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é")
                self.download_layoutlm_button.setEnabled(os.path.isdir(model_id_or_path) and os.path.exists(os.path.join(model_id_or_path, "config.json")))
        else: # HuggingFace –º–æ–¥–µ–ª—å
            if is_loaded:
                self.download_layoutlm_button.setText("–û–±–Ω–æ–≤–∏—Ç—å —Å Hugging Face")
            else:
                self.download_layoutlm_button.setText("–°–∫–∞—á–∞—Ç—å —Å Hugging Face")
            self.download_layoutlm_button.setEnabled(True)
            
    def perform_layoutlm_action(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–ª–∏ –æ—á–∏—â–∞–µ—Ç –º–æ–¥–µ–ª—å LayoutLM –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥–µ–ª–µ–π
        if not (self.parent_window and hasattr(self.parent_window, 'model_manager')):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ check_models_availability –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
        selected_layoutlm_type = self.layoutlm_model_type_combo.currentData()
        is_custom = (selected_layoutlm_type == "custom")
        model_id_or_path = ""

        if is_custom:
            # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –ø–æ–ª—è —Å –∏–º–µ–Ω–µ–º –∏–ª–∏ –∫–æ–º–±–æ
            model_id_or_path = self.custom_layoutlm_name_edit.text().strip()
            # –ï—Å–ª–∏ –∏–º—è –≤ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –Ω–æ —á—Ç–æ-—Ç–æ –≤—ã–±—Ä–∞–Ω–æ –≤ –∫–æ–º–±–æ, –±–µ—Ä–µ–º –∏–∑ –∫–æ–º–±–æ
            if not model_id_or_path and self.custom_layoutlm_model_selector.currentIndex() >= 0:
                candidate_name = self.custom_layoutlm_model_selector.currentText()
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —Ç–∏–ø–∞ "–õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                if candidate_name and "–Ω–µ –Ω–∞–π–¥–µ–Ω—ã" not in candidate_name and "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞" not in candidate_name:
                    model_id_or_path = candidate_name

            # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–æ–¥–µ–ª–∏
            if model_id_or_path:  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–º—è –Ω–µ –ø—É—Å—Ç–æ–µ
                model_id_or_path = os.path.join(
                    settings_manager.get_string("Paths", "trained_models_path", app_config.TRAINED_MODELS_PATH),
                    model_id_or_path
                )
        else:  # Hugging Face
            model_id_or_path = self.layoutlm_model_id_edit.text().strip()

        if not model_id_or_path:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "ID –º–æ–¥–µ–ª–∏ –∏–ª–∏ –ø—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω HF –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–¥–ª—è –Ω–µ–∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π)
        if not is_custom and not settings_manager.get_string('HuggingFace', 'token', ''):
            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É—Ç–æ—á–Ω—è–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∂–µ–ª–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            result = QMessageBox.question(
                self, 
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω Hugging Face", 
                "–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω Hugging Face. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            if result == QMessageBox.StandardButton.No:
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å
        is_loaded = settings_manager.get_bool('ModelsStatus', 'layoutlm_loaded', False)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ: –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –æ—á–∏—Å—Ç–∫–∞
        if not is_loaded:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
            if not is_custom:
                # –û–±—ã—á–Ω–∞—è –º–æ–¥–µ–ª—å –∏–∑ Hugging Face Hub
                self._execute_task_in_thread(
                    lambda: self.parent_window.model_manager.load_layoutlm_model(model_id_or_path),
                    self._on_layoutlm_load_success,
                    self._on_layoutlm_load_error
                )
            else:
                # –ö–∞—Å—Ç–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
                self._execute_task_in_thread(
                    lambda: self.parent_window.model_manager.load_layoutlm_model(model_id_or_path, is_custom=True),
                    self._on_layoutlm_load_success,
                    self._on_layoutlm_load_error
                )
        else:
            # –û—á–∏—Å—Ç–∫–∞ –º–æ–¥–µ–ª–∏
            self.parent_window.model_manager.clear_layoutlm_model()
            settings_manager.set_value('ModelsStatus', 'layoutlm_loaded', False)
            settings_manager.set_value("Models", "layoutlm_is_custom", "False")
            settings_manager.save_settings()
            self._update_layoutlm_status_label_and_button(model_id_or_path, is_custom)
            QMessageBox.information(self, "–ú–æ–¥–µ–ª—å –≤—ã–≥—Ä—É–∂–µ–Ω–∞", "–ú–æ–¥–µ–ª—å LayoutLM –≤—ã–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ø–∞–º—è—Ç–∏.")
    
    def perform_donut_action(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ —Å –º–æ–¥–µ–ª—å—é Donut (–∑–∞–≥—Ä—É–∑–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        model_id = self.donut_model_id_edit.text().strip()
        if not model_id:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "ID –º–æ–¥–µ–ª–∏ Donut –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ª–∏ —Ç–æ–∫–µ–Ω HF
        hf_token = settings_manager.get_string("HuggingFace", "token", "")
        if not hf_token:
            result = QMessageBox.question(
                self, 
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω Hugging Face", 
                "–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ Donut —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω Hugging Face. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            if result == QMessageBox.StandardButton.No:
                return
                
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–æ–¥–µ–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        settings_manager.set_value("Models", "donut_id", model_id)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è/–ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏
        # —á–µ—Ä–µ–∑ ModelManager –∏–ª–∏ DonutProcessor
        QMessageBox.information(
            self, 
            "–ú–æ–¥–µ–ª—å Donut", 
            f"ID –º–æ–¥–µ–ª–∏ Donut —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {model_id}\n\n–ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏."
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self._update_donut_status_and_button()
    
    def test_gemini_api_key_action(self):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–∞ Gemini (—É–¥–∞–ª–µ–Ω —Å –≤–∫–ª–∞–¥–∫–∏)."""
        QMessageBox.information(
            self, 
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞", 
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞ Google Gemini —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ \"üîê API –ö–ª—é—á–∏\"."
        )
    
    def save_gemini_api_key_action(self, called_from_save_settings=False):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–∞ Gemini (—É–¥–∞–ª–µ–Ω —Å –≤–∫–ª–∞–¥–∫–∏)."""
        if not called_from_save_settings:
            QMessageBox.information(
                self, 
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞", 
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞ Google Gemini —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ \"üîê API –ö–ª—é—á–∏\"."
            )
        return True
    
    def populate_gemini_models(self, models=None):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Gemini."""
        if not hasattr(self, 'gemini_model_selector'):
            return
            
        self.gemini_model_selector.clear()
        
        if not GENAI_AVAILABLE:
            self.gemini_model_selector.addItem("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Google Gemini –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            self.gemini_model_selector.setEnabled(False)
            return
            
        try:
            if models is None:
                # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫
                if not app_config.GOOGLE_API_KEY or app_config.OFFLINE_MODE:
                    print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π Gemini.")
                    models = [
                        "models/gemini-1.5-flash",
                        "models/gemini-1.5-pro",
                        "models/gemini-1.0-pro",
                        "models/gemini-2.0-flash",
                        "models/gemini-2.0-pro"
                    ]
                else:
                    try:
                        genai.configure(api_key=app_config.GOOGLE_API_KEY)
                        models_list = genai.list_models()
                        models = [m.name for m in models_list if "gemini" in m.name.lower()]
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π Gemini: {e}")
                        models = ["models/gemini-2.0-flash", "models/gemini-2.0-pro"]
            else:
                # –ï—Å–ª–∏ –º–æ–¥–µ–ª–∏ —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –Ω–æ —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã –∏–∑ API, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞
                if hasattr(models[0], 'name'):
                    models = [m.name for m in models if "gemini" in m.name.lower()]
                    
            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä
            if isinstance(models, list) and models:
                self.gemini_model_selector.addItems(models)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ models –æ–±—ä–µ–∫—Ç—ã –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏
                if models and hasattr(models[0], 'name'):
                    models_json = json.dumps([model.name for model in models])
                else:
                    models_json = json.dumps(models)
                settings_manager.set_value('Gemini', 'available_models_json', models_json)
                
                # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–µ—Ä–≤—É—é –≤ —Å–ø–∏—Å–∫–µ
                current_model = settings_manager.get_string('Gemini', 'sub_model_id', app_config.GEMINI_MODEL_ID)
                index = self.gemini_model_selector.findText(current_model)
                if index >= 0:
                    self.gemini_model_selector.setCurrentIndex(index)
                else:
                    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –æ—Ç–¥–µ–ª—å–Ω–æ
                    self.gemini_model_selector.addItem(current_model)
                    self.gemini_model_selector.setCurrentText(current_model)
                
                self.gemini_model_selector.setEnabled(True)
                return
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π Gemini: {e}")
            
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –º–æ–¥–µ–ª—å
        self.gemini_model_selector.addItem(app_config.GEMINI_MODEL_ID)
        self.gemini_model_selector.setCurrentText(app_config.GEMINI_MODEL_ID)

    def update_gemini_model_list_action(self):
        """–î–µ–π—Å—Ç–≤–∏–µ: –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π Gemini."""
        self.populate_gemini_models()
        QMessageBox.information(self, "–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π Gemini", "–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π Gemini –æ–±–Ω–æ–≤–ª–µ–Ω.")

    def test_huggingface_token_action(self):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HF —Ç–æ–∫–µ–Ω–∞ (—É–¥–∞–ª–µ–Ω —Å –≤–∫–ª–∞–¥–∫–∏)."""
        QMessageBox.information(
            self, 
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞", 
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ Hugging Face —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ \"üîê API –ö–ª—é—á–∏\"."
        )

    def clear_model_cache_action(self, model_type):
        """–î–µ–π—Å—Ç–≤–∏–µ: –û—á–∏—â–∞–µ—Ç –∫—ç—à –º–æ–¥–µ–ª–∏."""
        if self.parent_window and hasattr(self.parent_window, 'model_manager'):
            manager = self.parent_window.model_manager
            if model_type == 'layoutlm':
                manager.clear_model_cache()
            elif model_type == 'donut':
                manager.clear_model_cache()
            else:
                return
            QMessageBox.information(self, f"–ö—ç—à {model_type}", f"–ö—ç—à –º–æ–¥–µ–ª–∏ {model_type} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.")
        else:
            QMessageBox.warning(self, f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ {model_type}", "–ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞.")

    def clear_all_cache_action(self):
        """–î–µ–π—Å—Ç–≤–∏–µ: –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∫—ç—à–∏."""
        if self.parent_window and hasattr(self.parent_window, 'model_manager'):
            manager = self.parent_window.model_manager
            manager.clear_all_caches()
            QMessageBox.information(self, "–í—Å–µ –∫—ç—à–∏", "–í—Å–µ –∫—ç—à–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∫—ç—à–µ–π", "–ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∫—ç—à–µ–π.")

    def save_all_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫"""
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        if hasattr(self, 'layoutlm_model_id_edit'):
            settings_manager.set_value('Models', 'layoutlm_id', self.layoutlm_model_id_edit.text())
            app_config.LAYOUTLM_MODEL_ID = self.layoutlm_model_id_edit.text()
            
        if hasattr(self, 'layoutlm_model_type_combo'):
            model_type = 'huggingface' if self.layoutlm_model_type_combo.currentIndex() == 0 else 'custom'
            settings_manager.set_value('Models', 'layoutlm_type', model_type)
            
        if hasattr(self, 'custom_layoutlm_name_edit'):
            settings_manager.set_value('Models', 'layoutlm_custom_name', self.custom_layoutlm_name_edit.text())
            
        if hasattr(self, 'donut_model_id_edit'):
            settings_manager.set_value('Models', 'donut_id', self.donut_model_id_edit.text())
            app_config.DONUT_MODEL_ID = self.donut_model_id_edit.text()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Gemini
        if hasattr(self, 'gemini_model_selector'):
            current_model = self.gemini_model_selector.currentData()
            if current_model:
                settings_manager.set_value('Gemini', 'selected_model', current_model)
                
        if hasattr(self, 'gemini_temperature_spinner'):
            settings_manager.set_value('Gemini', 'temperature', self.gemini_temperature_spinner.value())
            app_config.DEFAULT_GEMINI_TEMPERATURE = self.gemini_temperature_spinner.value()
            
        if hasattr(self, 'gemini_max_tokens_spinner'):
            settings_manager.set_value('Gemini', 'max_tokens', self.gemini_max_tokens_spinner.value())
            app_config.DEFAULT_GEMINI_MAX_TOKENS = self.gemini_max_tokens_spinner.value()
            
        if hasattr(self, 'gemini_pdf_dpi_spinner'):
            settings_manager.set_value('Gemini', 'pdf_dpi', self.gemini_pdf_dpi_spinner.value())
            app_config.GEMINI_PDF_DPI = self.gemini_pdf_dpi_spinner.value()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É—Ç–µ–π
        if hasattr(self, 'tesseract_path_edit'):
            path = self.tesseract_path_edit.line_edit.text()
            settings_manager.set_value('Paths', 'tesseract_path', path)
            app_config.TESSERACT_PATH = path
            
        if hasattr(self, 'poppler_path_edit'):
            path = self.poppler_path_edit.line_edit.text()
            settings_manager.set_value('Paths', 'poppler_path', path)
            app_config.POPPLER_PATH = path
            
        if hasattr(self, 'training_datasets_path_edit'):
            path = self.training_datasets_path_edit.line_edit.text()
            settings_manager.set_value('Paths', 'training_datasets_path', path)
            app_config.TRAINING_DATASETS_PATH = path
            
        if hasattr(self, 'trained_models_path_edit'):
            path = self.trained_models_path_edit.line_edit.text()
            settings_manager.set_value('Paths', 'trained_models_path', path)
            app_config.TRAINED_MODELS_PATH = path

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
        if hasattr(self, 'layoutlm_prompt_edit'):
            settings_manager.set_value('Prompts', 'layoutlm', self.layoutlm_prompt_edit.toPlainText())
            app_config.LAYOUTLM_PROMPT_DEFAULT = self.layoutlm_prompt_edit.toPlainText()
            
        if hasattr(self, 'donut_prompt_edit'):
            settings_manager.set_value('Prompts', 'donut', self.donut_prompt_edit.toPlainText())
            app_config.DONUT_PROMPT_DEFAULT = self.donut_prompt_edit.toPlainText()
            
        if hasattr(self, 'gemini_prompt_edit'):
            settings_manager.set_value('Prompts', 'gemini', self.gemini_prompt_edit.toPlainText())
            app_config.GEMINI_PROMPT_DEFAULT = self.gemini_prompt_edit.toPlainText()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è
        if hasattr(self, 'layoutlm_base_model_edit'):
            settings_manager.set_value('Training', 'layoutlm_base_model', self.layoutlm_base_model_edit.text())
            app_config.LAYOUTLM_MODEL_ID_FOR_TRAINING = self.layoutlm_base_model_edit.text()
            
        if hasattr(self, 'epochs_spinbox'):
            settings_manager.set_value('Training', 'epochs', self.epochs_spinbox.value())
            app_config.DEFAULT_TRAIN_EPOCHS = self.epochs_spinbox.value()
            
        if hasattr(self, 'batch_size_spinbox'):
            settings_manager.set_value('Training', 'batch_size', self.batch_size_spinbox.value())
            app_config.DEFAULT_TRAIN_BATCH_SIZE = self.batch_size_spinbox.value()
            
        if hasattr(self, 'learning_rate_dspinbox'):
            settings_manager.set_value('Training', 'learning_rate', self.learning_rate_dspinbox.value())
            app_config.DEFAULT_LEARNING_RATE = self.learning_rate_dspinbox.value()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if hasattr(self, 'batch_delay_spinner'):
            settings_manager.set_value('Misc', 'batch_processing_delay', self.batch_delay_spinner.value())
            app_config.DEFAULT_BATCH_PROCESSING_DELAY = self.batch_delay_spinner.value()
            
        if hasattr(self, 'vat_rate_spinner'):
            settings_manager.set_default_vat_rate(self.vat_rate_spinner.value())

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if hasattr(self, 'offline_mode_checkbox'):
            settings_manager.set_value('Network', 'offline_mode', self.offline_mode_checkbox.isChecked())
            app_config.OFFLINE_MODE = self.offline_mode_checkbox.isChecked()
            
        if hasattr(self, 'http_timeout_spinbox'):
            settings_manager.set_value('Network', 'http_timeout', self.http_timeout_spinbox.value())
            app_config.HTTP_TIMEOUT = self.http_timeout_spinbox.value()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ API –∫–ª—é—á–µ–π –∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
        if hasattr(self, '_save_gemini_key_from_secrets_tab'):
            self._save_gemini_key_from_secrets_tab()
        if hasattr(self, '_save_hf_token_from_secrets_tab'):
            self._save_hf_token_from_secrets_tab()
        if hasattr(self, '_save_paths_from_secrets_tab'):
            self._save_paths_from_secrets_tab()

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_manager.save_settings()
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        self._sync_settings_with_config()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if self.parent_window:
            if hasattr(self.parent_window, 'populate_gemini_models'):
                self.parent_window.populate_gemini_models()
            if hasattr(self.parent_window, 'populate_cloud_providers'):
                self.parent_window.populate_cloud_providers()
            if hasattr(self.parent_window, 'populate_local_providers'):
                self.parent_window.populate_local_providers()
        
        QMessageBox.information(self, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", 
                               "–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.")
        
        print("–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")

    def _on_gemini_sub_model_changed(self, index):
        """–î–µ–π—Å—Ç–≤–∏–µ: –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ Gemini –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–º–æ–¥–µ–ª–∏."""
        self.check_models_availability()

    def save_gemini_generation_parameters_action(self):
        """–î–µ–π—Å—Ç–≤–∏–µ: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ Gemini."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if hasattr(self, 'gemini_temperature_spinner'):
            temperature = self.gemini_temperature_spinner.value()
            settings_manager.set_value('Gemini', 'temperature', str(temperature))
            app_config.DEFAULT_GEMINI_TEMPERATURE = temperature
            
        if hasattr(self, 'gemini_max_tokens_spinner'):
            max_tokens = self.gemini_max_tokens_spinner.value()
            settings_manager.set_value('Gemini', 'max_tokens', str(max_tokens))
            app_config.DEFAULT_GEMINI_MAX_TOKENS = max_tokens
            
        if hasattr(self, 'gemini_pdf_dpi_spinner'):
            pdf_dpi = self.gemini_pdf_dpi_spinner.value()
            settings_manager.set_value('Gemini', 'pdf_dpi', str(pdf_dpi))
            app_config.GEMINI_PDF_DPI = pdf_dpi
            
        if hasattr(self, 'gemini_model_selector') and self.gemini_model_selector.currentText():
            model_id = self.gemini_model_selector.currentText()
            settings_manager.set_value('Gemini', 'sub_model_id', model_id)
            app_config.GEMINI_MODEL_ID = model_id
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ –∏–∑ save_settings)
        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Gemini: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞={app_config.DEFAULT_GEMINI_TEMPERATURE}, max_tokens={app_config.DEFAULT_GEMINI_MAX_TOKENS}, PDF DPI={app_config.GEMINI_PDF_DPI}")

    def save_model_prompt(self, model_type, called_from_save_settings=False):
        """–î–µ–π—Å—Ç–≤–∏–µ: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏."""
        prompt_text = ""
        if model_type == 'layoutlm' and hasattr(self, 'layoutlm_prompt_edit'):
            prompt_text = self.layoutlm_prompt_edit.toPlainText()
        elif model_type == 'donut' and hasattr(self, 'donut_prompt_edit'):
            prompt_text = self.donut_prompt_edit.toPlainText()
        elif model_type == 'gemini' and hasattr(self, 'gemini_prompt_edit'):
            prompt_text = self.gemini_prompt_edit.toPlainText()
        else:
            return False
            
        if prompt_text:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            prompts_path = os.path.join(app_config.APP_DATA_PATH, "prompts")
            if not os.path.exists(prompts_path):
                try:
                    os.makedirs(prompts_path, exist_ok=True)
                    print(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤: {prompts_path}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
                    
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Ñ–∞–π–ª
            prompt_file_path = os.path.join(prompts_path, f"{model_type}_prompt.txt")
            try:
                with open(prompt_file_path, 'w', encoding='utf-8') as f:
                    f.write(prompt_text)
                print(f"–ü—Ä–æ–º–ø—Ç –¥–ª—è {model_type} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {prompt_file_path}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –≤ —Ñ–∞–π–ª: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings_manager.set_value('Prompts', model_type, prompt_text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –∫–æ–Ω—Ñ–∏–≥–µ
            if model_type == 'layoutlm':
                app_config.LAYOUTLM_PROMPT_DEFAULT = prompt_text
            elif model_type == 'donut':
                app_config.DONUT_PROMPT_DEFAULT = prompt_text
            elif model_type == 'gemini':
                app_config.GEMINI_PROMPT_DEFAULT = prompt_text
            
            if not called_from_save_settings:
                settings_manager.save_settings()
                QMessageBox.information(self, f"–ü—Ä–æ–º–ø—Ç {model_type}", f"–ü—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ {model_type} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
            return True
        return False

    def save_training_parameters_action(self, called_from_save_settings=False):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        if hasattr(self, 'layoutlm_base_model_edit'):
            base_model = self.layoutlm_base_model_edit.text().strip()
            settings_manager.set_value('Training', 'layoutlm_base_model_for_training', base_model)
            app_config.LAYOUTLM_MODEL_ID_FOR_TRAINING = base_model

        if hasattr(self, 'epochs_spinbox'):
            epochs = self.epochs_spinbox.value()
            settings_manager.set_value('Training', 'default_train_epochs', epochs)
            app_config.DEFAULT_TRAIN_EPOCHS = epochs

        if hasattr(self, 'batch_size_spinbox'):
            batch_size = self.batch_size_spinbox.value()
            settings_manager.set_value('Training', 'default_train_batch_size', batch_size)
            app_config.DEFAULT_TRAIN_BATCH_SIZE = batch_size

        if hasattr(self, 'learning_rate_dspinbox'):
            learning_rate = self.learning_rate_dspinbox.value()
            settings_manager.set_value('Training', 'default_learning_rate', str(learning_rate))
            app_config.DEFAULT_LEARNING_RATE = learning_rate

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if hasattr(self, 'training_datasets_path_edit') and hasattr(self.training_datasets_path_edit, 'line_edit'):
            training_path = self.training_datasets_path_edit.line_edit.text().strip()
            settings_manager.set_value('Training', 'training_datasets_path', training_path)
            app_config.TRAINING_DATASETS_PATH = training_path

        if hasattr(self, 'trained_models_path_edit') and hasattr(self.trained_models_path_edit, 'line_edit'):
            models_path = self.trained_models_path_edit.line_edit.text().strip()
            settings_manager.set_value('Training', 'trained_models_path', models_path)
            app_config.TRAINED_MODELS_PATH = models_path

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if hasattr(self, 'gemini_annotation_prompt_edit'):
            try:
                prompt_text = self.gemini_annotation_prompt_edit.toPlainText()
                prompt_encoded = base64.b64encode(prompt_text.encode('utf-8')).decode('ascii')
                settings_manager.set_value('Training', 'gemini_annotation_prompt_encoded', prompt_encoded)
                app_config.GEMINI_ANNOTATION_PROMPT_DEFAULT = prompt_text
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏: {e}")

        if not called_from_save_settings:
            settings_manager.save_settings()
            QMessageBox.information(self, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

    def update_default_vat_rate(self, value):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å—Ç–∞–≤–∫–∏ –ù–î–° –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤ —Å–ø–∏–Ω–Ω–µ—Ä–µ."""
        settings_manager.set_default_vat_rate(value)

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞."""
        # –£–¥–∞–ª–µ–Ω–æ: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HF —Ç–æ–∫–µ–Ω–∞ (—Ç–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "üîê API –ö–ª—é—á–∏")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
        settings_manager.set_value('Network', 'offline_mode', self.offline_mode_checkbox.isChecked())
        app_config.OFFLINE_MODE = self.offline_mode_checkbox.isChecked()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç HTTP
        settings_manager.set_value('Network', 'http_timeout', self.http_timeout_spinbox.value())
        app_config.HTTP_TIMEOUT = self.http_timeout_spinbox.value()
        
        # NEW: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(self, 'batch_delay_spinner'):
            settings_manager.set_value('Misc', 'batch_processing_delay', self.batch_delay_spinner.value())
            app_config.DEFAULT_BATCH_PROCESSING_DELAY = self.batch_delay_spinner.value()
        
        # NEW: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –ù–î–° –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(self, 'vat_rate_spinner'):
            settings_manager.set_default_vat_rate(self.vat_rate_spinner.value())
            
        # NEW: –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏-–ø–æ–ª—É—á–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(self, 'company_receiver_name_edit'):
            settings_manager.set_company_receiver_name(self.company_receiver_name_edit.text())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏ (–µ—Å–ª–∏ —ç—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å—Ç—å)
        if hasattr(self, 'tesseract_path_edit') and hasattr(self.tesseract_path_edit, 'line_edit'):
            settings_manager.set_value('Paths', 'tesseract_path', self.tesseract_path_edit.line_edit.text())
            app_config.TESSERACT_PATH = self.tesseract_path_edit.line_edit.text()
            
        if hasattr(self, 'poppler_path_edit') and hasattr(self.poppler_path_edit, 'line_edit'):
            settings_manager.set_value('Paths', 'poppler_path', self.poppler_path_edit.line_edit.text())
            app_config.POPPLER_PATH = self.poppler_path_edit.line_edit.text()
            
        if hasattr(self, 'training_datasets_path_edit') and hasattr(self.training_datasets_path_edit, 'line_edit'):
            settings_manager.set_value('Training', 'training_datasets_path', self.training_datasets_path_edit.line_edit.text())
            app_config.TRAINING_DATASETS_PATH = self.training_datasets_path_edit.line_edit.text()
            
        if hasattr(self, 'trained_models_path_edit') and hasattr(self.trained_models_path_edit, 'line_edit'):
            settings_manager.set_value('Training', 'trained_models_path', self.trained_models_path_edit.line_edit.text())
            app_config.TRAINED_MODELS_PATH = self.trained_models_path_edit.line_edit.text()
            
        if hasattr(self, 'layoutlm_prompt_edit'):
            settings_manager.set_value('Prompts', 'layoutlm', self.layoutlm_prompt_edit.toPlainText())
            app_config.LAYOUTLM_PROMPT_DEFAULT = self.layoutlm_prompt_edit.toPlainText()
            
        if hasattr(self, 'donut_prompt_edit'):
            settings_manager.set_value('Prompts', 'donut', self.donut_prompt_edit.toPlainText())
            app_config.DONUT_PROMPT_DEFAULT = self.donut_prompt_edit.toPlainText()
            
        if hasattr(self, 'gemini_prompt_edit'):
            settings_manager.set_value('Prompts', 'gemini', self.gemini_prompt_edit.toPlainText())
            app_config.GEMINI_PROMPT_DEFAULT = self.gemini_prompt_edit.toPlainText()
            
        if hasattr(self, 'gemini_temperature_spinner'):
            settings_manager.set_value('Gemini', 'temperature', str(self.gemini_temperature_spinner.value()))
            app_config.DEFAULT_GEMINI_TEMPERATURE = self.gemini_temperature_spinner.value()
            
        if hasattr(self, 'gemini_max_tokens_spinner'):
            settings_manager.set_value('Gemini', 'max_tokens', str(self.gemini_max_tokens_spinner.value()))
            app_config.DEFAULT_GEMINI_MAX_TOKENS = self.gemini_max_tokens_spinner.value()
            
        if hasattr(self, 'gemini_pdf_dpi_spinner'):
            settings_manager.set_value('Gemini', 'pdf_dpi', str(self.gemini_pdf_dpi_spinner.value()))
            app_config.GEMINI_PDF_DPI = self.gemini_pdf_dpi_spinner.value()
            
        if hasattr(self, 'layoutlm_base_model_edit'):
            settings_manager.set_value('Training', 'layoutlm_base_model_for_training', self.layoutlm_base_model_edit.text().strip())
            app_config.LAYOUTLM_MODEL_ID_FOR_TRAINING = self.layoutlm_base_model_edit.text().strip()
            
        if hasattr(self, 'epochs_spinbox'):
            settings_manager.set_value('Training', 'default_train_epochs', self.epochs_spinbox.value())
            app_config.DEFAULT_TRAIN_EPOCHS = self.epochs_spinbox.value()
            
        if hasattr(self, 'batch_size_spinbox'):
            settings_manager.set_value('Training', 'default_train_batch_size', self.batch_size_spinbox.value())
            app_config.DEFAULT_TRAIN_BATCH_SIZE = self.batch_size_spinbox.value()
            
        if hasattr(self, 'learning_rate_dspinbox'):
            settings_manager.set_value('Training', 'default_learning_rate', str(self.learning_rate_dspinbox.value()))
            app_config.DEFAULT_LEARNING_RATE = self.learning_rate_dspinbox.value()
            
        if hasattr(self, 'gemini_annotation_prompt_edit'):
            try:
                prompt_text = self.gemini_annotation_prompt_edit.toPlainText()
                prompt_encoded = base64.b64encode(prompt_text.encode('utf-8')).decode('ascii')
                settings_manager.set_value('Training', 'gemini_annotation_prompt_encoded', prompt_encoded)
                app_config.GEMINI_ANNOTATION_PROMPT_DEFAULT = prompt_text
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings_manager.save_settings()
        QMessageBox.information(self, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

    def _create_api_keys_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏ –∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏."""
        api_keys_tab = QWidget()
        layout = QVBoxLayout(api_keys_tab)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = QLabel("üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏")
        header_label.setStyleSheet("font-size: 16px; font-weight: bold; color: #2c3e50; margin: 10px 0;")
        layout.addWidget(header_label)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = QLabel(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏ –∑–¥–µ—Å—å. –û–Ω–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª.\n"
            "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∫–æ–º–º–∏—Ç—å—Ç–µ .env —Ñ–∞–π–ª –≤ Git - –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≤–µ—Ä—Å–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è."
        )
        description.setWordWrap(True)
        description.setStyleSheet("color: #7f8c8d; margin-bottom: 15px;")
        layout.addWidget(description)
        
        # –û–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è —Å–µ–∫—Ä–µ—Ç–æ–≤
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setFrameShape(QScrollArea.Shape.NoFrame)
        
        secrets_widget = QWidget()
        secrets_layout = QVBoxLayout(secrets_widget)
        
        # --- Google Gemini API ---
        gemini_group = QGroupBox("ü§ñ Google Gemini API")
        gemini_layout = QFormLayout(gemini_group)
        
        # API –∫–ª—é—á Gemini
        self.secrets_gemini_api_key_edit = QLineEdit()
        self.secrets_gemini_api_key_edit.setEchoMode(QLineEdit.EchoMode.Password)
        self.secrets_gemini_api_key_edit.setPlaceholderText("–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à Google AI API –∫–ª—é—á –∑–¥–µ—Å—å...")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è Gemini
        gemini_buttons_layout = QHBoxLayout()
        self.secrets_test_gemini_button = QPushButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á")
        self.secrets_save_gemini_button = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.secrets_show_gemini_button = QPushButton("üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å/–°–∫—Ä—ã—Ç—å")
        
        self.secrets_test_gemini_button.clicked.connect(self._test_gemini_key_from_secrets_tab)
        self.secrets_save_gemini_button.clicked.connect(self._save_gemini_key_from_secrets_tab)
        self.secrets_show_gemini_button.clicked.connect(lambda: self._toggle_password_visibility(self.secrets_gemini_api_key_edit))
        
        gemini_buttons_layout.addWidget(self.secrets_test_gemini_button)
        gemini_buttons_layout.addWidget(self.secrets_save_gemini_button)
        gemini_buttons_layout.addWidget(self.secrets_show_gemini_button)
        gemini_buttons_layout.addStretch()
        
        # –°—Ç–∞—Ç—É—Å Gemini
        self.secrets_gemini_status_label = QLabel("–°—Ç–∞—Ç—É—Å: –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω")
        self.secrets_gemini_status_label.setStyleSheet("color: #7f8c8d; font-weight: bold;")
        
        # –°–ø—Ä–∞–≤–∫–∞ –ø–æ Gemini
        gemini_help = QLabel(
            '<a href="https://makersuite.google.com/app/apikey">–ü–æ–ª—É—á–∏—Ç—å Google AI API –∫–ª—é—á</a> | '
            '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é Gemini'
        )
        gemini_help.setOpenExternalLinks(True)
        gemini_help.setStyleSheet("color: #3498db; margin-top: 5px;")
        
        gemini_layout.addRow("API –ö–ª—é—á:", self.secrets_gemini_api_key_edit)
        gemini_layout.addRow("–î–µ–π—Å—Ç–≤–∏—è:", gemini_buttons_layout)
        gemini_layout.addRow("–°—Ç–∞—Ç—É—Å:", self.secrets_gemini_status_label)
        gemini_layout.addRow("–°–ø—Ä–∞–≤–∫–∞:", gemini_help)
        
        secrets_layout.addWidget(gemini_group)
        
        # --- Hugging Face Token ---
        hf_group = QGroupBox("ü§ó Hugging Face Token")
        hf_layout = QFormLayout(hf_group)
        
        # HF —Ç–æ–∫–µ–Ω
        self.secrets_hf_token_edit = QLineEdit()
        self.secrets_hf_token_edit.setEchoMode(QLineEdit.EchoMode.Password)
        self.secrets_hf_token_edit.setPlaceholderText("–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à Hugging Face —Ç–æ–∫–µ–Ω –∑–¥–µ—Å—å...")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è HF
        hf_buttons_layout = QHBoxLayout()
        self.secrets_test_hf_button = QPushButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω")
        self.secrets_save_hf_button = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.secrets_show_hf_button = QPushButton("üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å/–°–∫—Ä—ã—Ç—å")
        
        self.secrets_test_hf_button.clicked.connect(self._test_hf_token_from_secrets_tab)
        self.secrets_save_hf_button.clicked.connect(self._save_hf_token_from_secrets_tab)
        self.secrets_show_hf_button.clicked.connect(lambda: self._toggle_password_visibility(self.secrets_hf_token_edit))
        
        hf_buttons_layout.addWidget(self.secrets_test_hf_button)
        hf_buttons_layout.addWidget(self.secrets_save_hf_button)
        hf_buttons_layout.addWidget(self.secrets_show_hf_button)
        hf_buttons_layout.addStretch()
        
        # –°—Ç–∞—Ç—É—Å HF
        self.secrets_hf_status_label = QLabel("–°—Ç–∞—Ç—É—Å: –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω")
        self.secrets_hf_status_label.setStyleSheet("color: #7f8c8d; font-weight: bold;")
        
        # –°–ø—Ä–∞–≤–∫–∞ –ø–æ HF
        hf_help = QLabel(
            '<a href="https://huggingface.co/settings/tokens">–ü–æ–ª—É—á–∏—Ç—å Hugging Face —Ç–æ–∫–µ–Ω</a> | '
            '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π LayoutLM –∏ Donut'
        )
        hf_help.setOpenExternalLinks(True)
        hf_help.setStyleSheet("color: #3498db; margin-top: 5px;")
        
        hf_layout.addRow("–¢–æ–∫–µ–Ω:", self.secrets_hf_token_edit)
        hf_layout.addRow("–î–µ–π—Å—Ç–≤–∏—è:", hf_buttons_layout)
        hf_layout.addRow("–°—Ç–∞—Ç—É—Å:", self.secrets_hf_status_label)
        hf_layout.addRow("–°–ø—Ä–∞–≤–∫–∞:", hf_help)
        
        secrets_layout.addWidget(hf_group)
        
        # --- –ü—É—Ç–∏ –∫ –≤–Ω–µ—à–Ω–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º ---
        paths_group = QGroupBox("üõ†Ô∏è –ü—É—Ç–∏ –∫ –≤–Ω–µ—à–Ω–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º")
        paths_layout = QFormLayout(paths_group)
        
        # Tesseract OCR
        self.secrets_tesseract_path_edit = QLineEdit()
        self.secrets_tesseract_path_edit.setPlaceholderText("–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞...")
        tesseract_browse_button = QPushButton("üìÅ –û–±–∑–æ—Ä")
        tesseract_browse_button.clicked.connect(lambda: self._browse_executable(self.secrets_tesseract_path_edit, "Tesseract OCR"))
        
        tesseract_layout = QHBoxLayout()
        tesseract_layout.addWidget(self.secrets_tesseract_path_edit, 1)
        tesseract_layout.addWidget(tesseract_browse_button)
        
        # Poppler 
        self.secrets_poppler_path_edit = QLineEdit()
        self.secrets_poppler_path_edit.setPlaceholderText("–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ bin Poppler...")
        poppler_browse_button = QPushButton("üìÅ –û–±–∑–æ—Ä")
        poppler_browse_button.clicked.connect(lambda: self._browse_directory(self.secrets_poppler_path_edit, "Poppler bin"))
        
        poppler_layout = QHBoxLayout()
        poppler_layout.addWidget(self.secrets_poppler_path_edit, 1)
        poppler_layout.addWidget(poppler_browse_button)
        
        paths_layout.addRow("Tesseract OCR:", tesseract_layout)
        paths_layout.addRow("Poppler PDF:", poppler_layout)
        
        secrets_layout.addWidget(paths_group)
        
        # --- –°–≤–æ–¥–∫–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è ---
        summary_group = QGroupBox("üìä –°–≤–æ–¥–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        summary_layout = QVBoxLayout(summary_group)
        
        self.secrets_summary_label = QLabel("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤...")
        self.secrets_summary_label.setWordWrap(True)
        summary_layout.addWidget(self.secrets_summary_label)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        actions_layout = QHBoxLayout()
        
        self.refresh_secrets_button = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
        self.refresh_secrets_button.clicked.connect(self._refresh_secrets_status)
        
        self.create_env_button = QPushButton("üìù –°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª")
        self.create_env_button.clicked.connect(self._create_env_file)
        
        self.open_env_button = QPushButton("üìÇ –û—Ç–∫—Ä—ã—Ç—å .env —Ñ–∞–π–ª")
        self.open_env_button.clicked.connect(self._open_env_file)
        
        actions_layout.addWidget(self.refresh_secrets_button)
        actions_layout.addWidget(self.create_env_button)
        actions_layout.addWidget(self.open_env_button)
        actions_layout.addStretch()
        
        summary_layout.addLayout(actions_layout)
        secrets_layout.addWidget(summary_group)
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        secrets_layout.addStretch()
        scroll_area.setWidget(secrets_widget)
        layout.addWidget(scroll_area)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É
        self.tab_widget.addTab(api_keys_tab, "üîê API –ö–ª—é—á–∏")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self._load_secrets_values()

    def _load_secrets_values(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –ø–æ–ª—è –≤–≤–æ–¥–∞."""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º Google Gemini API –∫–ª—é—á
            if self.secrets_manager:
                gemini_key = self.secrets_manager.get_secret("GOOGLE_API_KEY")
            else:
                gemini_key = settings_manager.get_gemini_api_key()
            
            if gemini_key:
                self.secrets_gemini_api_key_edit.setText(gemini_key)
                self.secrets_gemini_status_label.setText("–°—Ç–∞—Ç—É—Å: –ó–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                self.secrets_gemini_status_label.setStyleSheet("color: #27ae60; font-weight: bold;")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º Hugging Face —Ç–æ–∫–µ–Ω
            if self.secrets_manager:
                hf_token = self.secrets_manager.get_secret("HF_TOKEN")
            else:
                hf_token = settings_manager.get_huggingface_token()
            
            if hf_token:
                self.secrets_hf_token_edit.setText(hf_token)
                self.secrets_hf_status_label.setText("–°—Ç–∞—Ç—É—Å: –ó–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                self.secrets_hf_status_label.setStyleSheet("color: #27ae60; font-weight: bold;")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—É—Ç–∏ –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
            tesseract_path = settings_manager.get_string('Paths', 'tesseract_path', app_config.TESSERACT_PATH or '')
            self.secrets_tesseract_path_edit.setText(tesseract_path)
            
            poppler_path = settings_manager.get_string('Paths', 'poppler_path', app_config.POPPLER_PATH or '')
            self.secrets_poppler_path_edit.setText(poppler_path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
            self._refresh_secrets_status()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å–µ–∫—Ä–µ—Ç–æ–≤: {e}")
            self.secrets_summary_label.setText(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    def _toggle_password_visibility(self, line_edit):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞."""
        if line_edit.echoMode() == QLineEdit.EchoMode.Password:
            line_edit.setEchoMode(QLineEdit.EchoMode.Normal)
        else:
            line_edit.setEchoMode(QLineEdit.EchoMode.Password)

    def _test_gemini_key_from_secrets_tab(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Google Gemini API –∫–ª—é—á —Å –≤–∫–ª–∞–¥–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤."""
        api_key = self.secrets_gemini_api_key_edit.text().strip()
        if not api_key:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "API –∫–ª—é—á Google –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            self.secrets_gemini_status_label.setText("–°—Ç–∞—Ç—É—Å: –ù–µ —É–∫–∞–∑–∞–Ω")
            self.secrets_gemini_status_label.setStyleSheet("color: #e74c3c; font-weight: bold;")
            return
            
        try:
            self.secrets_gemini_status_label.setText("–°—Ç–∞—Ç—É—Å: –ü—Ä–æ–≤–µ—Ä–∫–∞...")
            self.secrets_gemini_status_label.setStyleSheet("color: #f39c12; font-weight: bold;")
            self.secrets_test_gemini_button.setEnabled(False)
            QApplication.processEvents()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            if not GENAI_AVAILABLE:
                QMessageBox.warning(
                    self, 
                    "–û—à–∏–±–∫–∞", 
                    "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ google-generativeai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: pip install google-generativeai"
                )
                self.secrets_gemini_status_label.setText("–°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
                self.secrets_gemini_status_label.setStyleSheet("color: #e74c3c; font-weight: bold;")
                return
                
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª—é—á
            import google.generativeai as genai
            genai.configure(api_key=api_key)
            
            models = genai.list_models()
            gemini_models = [m for m in models if "gemini" in m.name.lower()]
            
            if gemini_models:
                self.secrets_gemini_status_label.setText("–°—Ç–∞—Ç—É—Å: ‚úÖ –ö–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç")
                self.secrets_gemini_status_label.setStyleSheet("color: #27ae60; font-weight: bold;")
                
                QMessageBox.information(
                    self, 
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞", 
                    f"‚úÖ API –∫–ª—é—á Google Gemini —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–î–æ—Å—Ç—É–ø–Ω–æ {len(gemini_models)} –º–æ–¥–µ–ª–µ–π Gemini."
                )
            else:
                self.secrets_gemini_status_label.setText("–°—Ç–∞—Ç—É—Å: ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Gemini")
                self.secrets_gemini_status_label.setStyleSheet("color: #f39c12; font-weight: bold;")
                QMessageBox.warning(
                    self, 
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞", 
                    "‚ö†Ô∏è API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª—è–º Gemini.\n–í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ API Gemini."
                )
        except Exception as e:
            self.secrets_gemini_status_label.setText("–°—Ç–∞—Ç—É—Å: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            self.secrets_gemini_status_label.setStyleSheet("color: #e74c3c; font-weight: bold;")
            QMessageBox.critical(
                self, 
                "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", 
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞ Google:\n{str(e)}"
            )
        finally:
            self.secrets_test_gemini_button.setEnabled(True)
            self._refresh_secrets_status()

    def _save_gemini_key_from_secrets_tab(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç Google Gemini API –∫–ª—é—á —Å –≤–∫–ª–∞–¥–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤."""
        api_key = self.secrets_gemini_api_key_edit.text().strip()
        
        try:
            if self.secrets_manager and api_key:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
                self.secrets_manager.set_secret("GOOGLE_API_KEY", api_key)
                
                # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                settings_manager.set_value('Gemini', 'api_key', api_key)
                app_config.GOOGLE_API_KEY = api_key
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if hasattr(self, 'gemini_api_key_edit'):
                    self.gemini_api_key_edit.setText(api_key)
                
                self.secrets_gemini_status_label.setText("–°—Ç–∞—Ç—É—Å: üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω")
                self.secrets_gemini_status_label.setStyleSheet("color: #27ae60; font-weight: bold;")
                
                QMessageBox.information(
                    self, 
                    "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–∞", 
                    "‚úÖ Google Gemini API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ!"
                )
            elif api_key:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
                settings_manager.set_value('Gemini', 'api_key', api_key)
                app_config.GOOGLE_API_KEY = api_key
                settings_manager.save_settings()
                
                self.secrets_gemini_status_label.setText("–°—Ç–∞—Ç—É—Å: üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω (–Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ)")
                self.secrets_gemini_status_label.setStyleSheet("color: #f39c12; font-weight: bold;")
                
                QMessageBox.information(
                    self, 
                    "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–∞", 
                    "‚ö†Ô∏è API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
                )
            else:
                # –û—á–∏—Å—Ç–∫–∞ –∫–ª—é—á–∞
                if self.secrets_manager:
                    self.secrets_manager.delete_secret("GOOGLE_API_KEY")
                settings_manager.set_value('Gemini', 'api_key', '')
                app_config.GOOGLE_API_KEY = None
                
                self.secrets_gemini_status_label.setText("–°—Ç–∞—Ç—É—Å: –û—á–∏—â–µ–Ω")
                self.secrets_gemini_status_label.setStyleSheet("color: #7f8c8d; font-weight: bold;")
                
                QMessageBox.information(self, "–û—á–∏—Å—Ç–∫–∞ –∫–ª—é—á–∞", "üóëÔ∏è Google Gemini API –∫–ª—é—á —É–¥–∞–ª–µ–Ω.")
                
        except Exception as e:
            QMessageBox.critical(
                self, 
                "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", 
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API –∫–ª—é—á–∞ Google:\n{str(e)}"
            )
        finally:
            self._refresh_secrets_status()

    def _test_hf_token_from_secrets_tab(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Hugging Face —Ç–æ–∫–µ–Ω —Å –≤–∫–ª–∞–¥–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤."""
        token = self.secrets_hf_token_edit.text().strip()
        if not token:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "Hugging Face —Ç–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            self.secrets_hf_status_label.setText("–°—Ç–∞—Ç—É—Å: –ù–µ —É–∫–∞–∑–∞–Ω")
            self.secrets_hf_status_label.setStyleSheet("color: #e74c3c; font-weight: bold;")
            return
            
        try:
            self.secrets_hf_status_label.setText("–°—Ç–∞—Ç—É—Å: –ü—Ä–æ–≤–µ—Ä–∫–∞...")
            self.secrets_hf_status_label.setStyleSheet("color: #f39c12; font-weight: bold;")
            self.secrets_test_hf_button.setEnabled(False)
            QApplication.processEvents()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞
            repo_id = "microsoft/layoutlmv3-base"
            filename = "config.json"
            
            downloaded_path = hf_hub_download(
                repo_id=repo_id,
                filename=filename,
                token=token
            )
            
            self.secrets_hf_status_label.setText("–°—Ç–∞—Ç—É—Å: ‚úÖ –¢–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.secrets_hf_status_label.setStyleSheet("color: #27ae60; font-weight: bold;")
            
            QMessageBox.information(
                self, 
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞", 
                f"‚úÖ Hugging Face —Ç–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {downloaded_path}"
            )
            
        except Exception as e:
            self.secrets_hf_status_label.setText("–°—Ç–∞—Ç—É—Å: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            self.secrets_hf_status_label.setStyleSheet("color: #e74c3c; font-weight: bold;")
            QMessageBox.critical(
                self, 
                "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", 
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Hugging Face —Ç–æ–∫–µ–Ω–∞:\n{str(e)}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."
            )
        finally:
            self.secrets_test_hf_button.setEnabled(True)
            self._refresh_secrets_status()

    def _save_hf_token_from_secrets_tab(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç Hugging Face —Ç–æ–∫–µ–Ω —Å –≤–∫–ª–∞–¥–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤."""
        token = self.secrets_hf_token_edit.text().strip()
        
        try:
            if self.secrets_manager and token:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
                self.secrets_manager.set_secret("HF_TOKEN", token)
                
                # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                settings_manager.set_value('HuggingFace', 'token', token)
                app_config.HF_TOKEN = token
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if hasattr(self, 'hf_token_edit'):
                    self.hf_token_edit.setText(token)
                
                self.secrets_hf_status_label.setText("–°—Ç–∞—Ç—É—Å: üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω")
                self.secrets_hf_status_label.setStyleSheet("color: #27ae60; font-weight: bold;")
                
                QMessageBox.information(
                    self, 
                    "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞", 
                    "‚úÖ Hugging Face —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ!"
                )
            elif token:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
                settings_manager.set_value('HuggingFace', 'token', token)
                app_config.HF_TOKEN = token
                settings_manager.save_settings()
                
                self.secrets_hf_status_label.setText("–°—Ç–∞—Ç—É—Å: üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω (–Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ)")
                self.secrets_hf_status_label.setStyleSheet("color: #f39c12; font-weight: bold;")
                
                QMessageBox.information(
                    self, 
                    "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞", 
                    "‚ö†Ô∏è –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
                )
            else:
                # –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞
                if self.secrets_manager:
                    self.secrets_manager.delete_secret("HF_TOKEN")
                settings_manager.set_value('HuggingFace', 'token', '')
                app_config.HF_TOKEN = ''
                
                self.secrets_hf_status_label.setText("–°—Ç–∞—Ç—É—Å: –û—á–∏—â–µ–Ω")
                self.secrets_hf_status_label.setStyleSheet("color: #7f8c8d; font-weight: bold;")
                
                QMessageBox.information(self, "–û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞", "üóëÔ∏è Hugging Face —Ç–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω.")
                
        except Exception as e:
            QMessageBox.critical(
                self, 
                "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", 
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Hugging Face —Ç–æ–∫–µ–Ω–∞:\n{str(e)}"
            )
        finally:
            self._refresh_secrets_status()

    def _browse_executable(self, line_edit, tool_name):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞."""
        current_path = line_edit.text() or os.path.expanduser("~")
        file_filter = "–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã (*.exe)" if sys.platform == "win32" else "–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        file_path, _ = QFileDialog.getOpenFileName(
            self, 
            f"–í—ã–±–µ—Ä–∏—Ç–µ {tool_name}", 
            current_path, 
            file_filter
        )
        if file_path:
            line_edit.setText(file_path)
            self._save_paths_from_secrets_tab()

    def _browse_directory(self, line_edit, tool_name):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        current_path = line_edit.text() or os.path.expanduser("~")
        dir_path = QFileDialog.getExistingDirectory(
            self, 
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É {tool_name}", 
            current_path
        )
        if dir_path:
            line_edit.setText(dir_path)
            self._save_paths_from_secrets_tab()

    def _save_paths_from_secrets_tab(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—É—Ç–∏ –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º —Å –≤–∫–ª–∞–¥–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤."""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏
            tesseract_path = self.secrets_tesseract_path_edit.text().strip()
            poppler_path = self.secrets_poppler_path_edit.text().strip()
            
            settings_manager.set_value('Paths', 'tesseract_path', tesseract_path)
            settings_manager.set_value('Paths', 'poppler_path', poppler_path)
            
            app_config.TESSERACT_PATH = tesseract_path
            app_config.POPPLER_PATH = poppler_path
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –Ω–∞ –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–∫–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            if hasattr(self, 'tesseract_path_edit') and hasattr(self.tesseract_path_edit, 'line_edit'):
                self.tesseract_path_edit.line_edit.setText(tesseract_path)
            if hasattr(self, 'poppler_path_edit') and hasattr(self.poppler_path_edit, 'line_edit'):
                self.poppler_path_edit.line_edit.setText(poppler_path)
            
            settings_manager.save_settings()
            self._refresh_secrets_status()
            
        except Exception as e:
            QMessageBox.critical(
                self, 
                "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", 
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—É—Ç–µ–π:\n{str(e)}"
            )

    def _refresh_secrets_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É —Å—Ç–∞—Ç—É—Å–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤."""
        try:
            status_parts = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Google Gemini API
            gemini_key = ""
            if self.secrets_manager:
                gemini_key = self.secrets_manager.get_secret("GOOGLE_API_KEY")
            else:
                gemini_key = settings_manager.get_gemini_api_key()
            
            if gemini_key:
                status_parts.append("‚úÖ Google Gemini API: –ù–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                status_parts.append("‚ùå Google Gemini API: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Hugging Face —Ç–æ–∫–µ–Ω
            hf_token = ""
            if self.secrets_manager:
                hf_token = self.secrets_manager.get_secret("HF_TOKEN")
            else:
                hf_token = settings_manager.get_huggingface_token()
            
            if hf_token:
                status_parts.append("‚úÖ Hugging Face: –ù–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                status_parts.append("‚ùå Hugging Face: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏ –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
            tesseract_path = self.secrets_tesseract_path_edit.text().strip()
            if tesseract_path and os.path.exists(tesseract_path):
                status_parts.append("‚úÖ Tesseract OCR: –ù–∞–π–¥–µ–Ω")
            elif tesseract_path:
                status_parts.append("‚ö†Ô∏è Tesseract OCR: –ü—É—Ç—å —É–∫–∞–∑–∞–Ω, –Ω–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                status_parts.append("üîç Tesseract OCR: –ê–≤—Ç–æ–ø–æ–∏—Å–∫")
            
            poppler_path = self.secrets_poppler_path_edit.text().strip()
            if poppler_path and os.path.exists(poppler_path):
                status_parts.append("‚úÖ Poppler PDF: –ù–∞–π–¥–µ–Ω")
            elif poppler_path:
                status_parts.append("‚ö†Ô∏è Poppler PDF: –ü—É—Ç—å —É–∫–∞–∑–∞–Ω, –Ω–æ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                status_parts.append("üîç Poppler PDF: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
            env_file_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), ".env")
            if os.path.exists(env_file_path):
                status_parts.append("‚úÖ .env —Ñ–∞–π–ª: –°—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                status_parts.append("‚ùå .env —Ñ–∞–π–ª: –ù–µ —Å–æ–∑–¥–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            if self.secrets_manager:
                status_parts.append("üîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: –ê–∫—Ç–∏–≤–Ω–æ")
            else:
                status_parts.append("‚ö†Ô∏è –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            
            summary_text = "\n".join(status_parts)
            self.secrets_summary_label.setText(summary_text)
            
        except Exception as e:
            self.secrets_summary_label.setText(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    def _create_env_file(self):
        """–°–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª —Å —Ç–µ–∫—É—â–∏–º–∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏."""
        try:
            project_root = os.path.dirname(os.path.dirname(__file__))
            env_file_path = os.path.join(project_root, ".env")
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã
            env_content = []
            env_content.append("# =============================================================================")
            env_content.append("# INVOICEGEMINI ENVIRONMENT VARIABLES")
            env_content.append("# =============================================================================")
            env_content.append("# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            env_content.append(f"# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            env_content.append("#")
            env_content.append("# ‚ö†Ô∏è  –í–ê–ñ–ù–û: –ù–ï –ö–û–ú–ú–ò–¢–¨–¢–ï –≠–¢–û–¢ –§–ê–ô–õ –í GIT!")
            env_content.append("# –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≤–µ—Ä—Å–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è")
            env_content.append("#")
            env_content.append("# =============================================================================")
            env_content.append("")
            
            # API –∫–ª—é—á–∏
            env_content.append("# -----------------------------------------------------------------------------")
            env_content.append("# API –ö–õ–Æ–ß–ò –ò –¢–û–ö–ï–ù–´")
            env_content.append("# -----------------------------------------------------------------------------")
            
            gemini_key = self.secrets_gemini_api_key_edit.text().strip()
            if gemini_key:
                env_content.append(f"GOOGLE_API_KEY={gemini_key}")
            else:
                env_content.append("# GOOGLE_API_KEY=your_google_api_key_here")
            
            hf_token = self.secrets_hf_token_edit.text().strip()
            if hf_token:
                env_content.append(f"HF_TOKEN={hf_token}")
            else:
                env_content.append("# HF_TOKEN=your_hugging_face_token_here")
            
            env_content.append("")
            
            # –ü—É—Ç–∏ –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
            env_content.append("# -----------------------------------------------------------------------------")
            env_content.append("# –ü–£–¢–ò –ö –í–ù–ï–®–ù–ò–ú –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–ú")
            env_content.append("# -----------------------------------------------------------------------------")
            
            tesseract_path = self.secrets_tesseract_path_edit.text().strip()
            if tesseract_path:
                env_content.append(f"TESSERACT_PATH={tesseract_path}")
            else:
                env_content.append("# TESSERACT_PATH=")
            
            poppler_path = self.secrets_poppler_path_edit.text().strip()
            if poppler_path:
                env_content.append(f"POPPLER_PATH={poppler_path}")
            else:
                env_content.append("# POPPLER_PATH=")
            
            env_content.append("")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            env_content.append("# -----------------------------------------------------------------------------")
            env_content.append("# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò")
            env_content.append("# -----------------------------------------------------------------------------")
            env_content.append("# OFFLINE_MODE=false")
            env_content.append("# MAX_MODEL_MEMORY=4000")
            env_content.append("# DEFAULT_TESSERACT_LANG=rus+eng")
            env_content.append("")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
            with open(env_file_path, 'w', encoding='utf-8') as f:
                f.write('\n'.join(env_content))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
            if hasattr(os, 'chmod'):
                os.chmod(env_file_path, 0o600)
            
            QMessageBox.information(
                self, 
                "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞", 
                f"‚úÖ .env —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n–ü—É—Ç—å: {env_file_path}\n\n–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞—à–∏ API –∫–ª—é—á–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
            
            self._refresh_secrets_status()
            
        except Exception as e:
            QMessageBox.critical(
                self, 
                "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env —Ñ–∞–π–ª–∞", 
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ .env —Ñ–∞–π–ª–∞:\n{str(e)}"
            )

    def _open_env_file(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç .env —Ñ–∞–π–ª –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ."""
        try:
            project_root = os.path.dirname(os.path.dirname(__file__))
            env_file_path = os.path.join(project_root, ".env")
            
            if not os.path.exists(env_file_path):
                result = QMessageBox.question(
                    self, 
                    "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", 
                    ".env —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—Ç—å –µ–≥–æ —Å–µ–π—á–∞—Å?",
                    QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
                )
                if result == QMessageBox.StandardButton.Yes:
                    self._create_env_file()
                    return
                else:
                    return
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
            if sys.platform == "win32":
                os.startfile(env_file_path)
            elif sys.platform == "darwin":  # macOS
                os.system(f"open '{env_file_path}'")
            else:  # Linux
                os.system(f"xdg-open '{env_file_path}'")
                
        except Exception as e:
            QMessageBox.critical(
                self, 
                "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞", 
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ .env —Ñ–∞–π–ª–∞:\n{str(e)}"
            )

    def _create_cloud_models_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        cloud_tab = QWidget()
        cloud_layout = QVBoxLayout(cloud_tab)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = QLabel("‚òÅÔ∏è –û–±–ª–∞—á–Ω—ã–µ –º–æ–¥–µ–ª–∏")
        header_label.setStyleSheet("font-size: 16px; font-weight: bold; color: #2196F3; margin-bottom: 10px;")
        cloud_layout.addWidget(header_label)
        
        # Scroll area –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout(scroll_widget)
        
        # Gemini –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        gemini_group = QGroupBox("üîç Google Gemini")
        gemini_layout = QVBoxLayout()
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ API –∫–ª—é—á–∏
        api_info_label = QLabel("üí° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ \"üîê API –ö–ª—é—á–∏\"")
        api_info_label.setStyleSheet("color: #3498db; font-style: italic; margin: 5px 0;")
        gemini_layout.addWidget(api_info_label)
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ Gemini
        gemini_model_layout = QHBoxLayout()
        gemini_model_label = QLabel("–ú–æ–¥–µ–ª—å:")
        self.gemini_model_selector = QComboBox()
        self.gemini_model_selector.currentIndexChanged.connect(self._on_gemini_sub_model_changed)
        gemini_model_layout.addWidget(gemini_model_label)
        gemini_model_layout.addWidget(self.gemini_model_selector, 1)
        gemini_layout.addLayout(gemini_model_layout)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
        self.update_gemini_list_button = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
        self.update_gemini_list_button.clicked.connect(self.update_gemini_model_list_action)
        gemini_layout.addWidget(self.update_gemini_list_button)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Gemini
        gemini_params_group = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        gemini_params_layout = QFormLayout()
        
        self.gemini_temperature_spinner = QDoubleSpinBox()
        self.gemini_temperature_spinner.setRange(0.0, 1.0)
        self.gemini_temperature_spinner.setSingleStep(0.05)
        self.gemini_temperature_spinner.setDecimals(2)
        gemini_params_layout.addRow("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (0.0 - 1.0):", self.gemini_temperature_spinner)
        
        self.gemini_max_tokens_spinner = QSpinBox()
        self.gemini_max_tokens_spinner.setRange(1, 32768)
        self.gemini_max_tokens_spinner.setSingleStep(512)
        gemini_params_layout.addRow("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:", self.gemini_max_tokens_spinner)
        
        self.gemini_pdf_dpi_spinner = QSpinBox()
        self.gemini_pdf_dpi_spinner.setRange(72, 600)
        self.gemini_pdf_dpi_spinner.setSingleStep(50)
        gemini_params_layout.addRow("DPI –¥–ª—è PDF:", self.gemini_pdf_dpi_spinner)
        
        gemini_params_group.setLayout(gemini_params_layout)
        gemini_layout.addWidget(gemini_params_group)
        gemini_group.setLayout(gemini_layout)
        scroll_layout.addWidget(gemini_group)
        
        # –î—Ä—É–≥–∏–µ –æ–±–ª–∞—á–Ω—ã–µ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        llm_group = QGroupBox("ü§ñ –î—Ä—É–≥–∏–µ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã")
        llm_layout = QVBoxLayout()
        
        llm_info_label = QLabel("üí° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π –∏ –º–æ–¥–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ \"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ LLM –ø–ª–∞–≥–∏–Ω–∞–º–∏\"")
        llm_info_label.setStyleSheet("color: #3498db; font-style: italic; margin: 5px 0;")
        llm_layout.addWidget(llm_info_label)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è LLM –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.open_llm_settings_button = QPushButton("üîå –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        self.open_llm_settings_button.clicked.connect(self._open_llm_providers_dialog)
        llm_layout.addWidget(self.open_llm_settings_button)
        
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        providers_label = QLabel("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:")
        providers_label.setStyleSheet("font-weight: bold; margin-top: 10px;")
        llm_layout.addWidget(providers_label)
        
        providers_list = QLabel("‚Ä¢ OpenAI (GPT-4, GPT-3.5)\n‚Ä¢ Anthropic (Claude)\n‚Ä¢ Mistral AI\n‚Ä¢ DeepSeek\n‚Ä¢ xAI (Grok)")
        providers_list.setStyleSheet("margin-left: 20px; color: #666;")
        llm_layout.addWidget(providers_list)
        
        llm_group.setLayout(llm_layout)
        scroll_layout.addWidget(llm_group)
        
        scroll_layout.addStretch()
        scroll.setWidget(scroll_widget)
        cloud_layout.addWidget(scroll)
        
        self.tab_widget.addTab(cloud_tab, "‚òÅÔ∏è –û–±–ª–∞—á–Ω—ã–µ –º–æ–¥–µ–ª–∏")

    def _create_local_models_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        local_tab = QWidget()
        local_layout = QVBoxLayout(local_tab)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = QLabel("üñ•Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏")
        header_label.setStyleSheet("font-size: 16px; font-weight: bold; color: #4CAF50; margin-bottom: 10px;")
        local_layout.addWidget(header_label)
        
        # Scroll area
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout(scroll_widget)
        
        # LayoutLM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        layoutlm_group = QGroupBox("üìÑ LayoutLMv3 (–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)")
        layoutlm_layout = QVBoxLayout()
        
        # –¢–∏–ø –º–æ–¥–µ–ª–∏ LayoutLM
        layoutlm_type_layout = QHBoxLayout()
        layoutlm_type_label = QLabel("–¢–∏–ø –º–æ–¥–µ–ª–∏:")
        self.layoutlm_model_type_combo = QComboBox()
        self.layoutlm_model_type_combo.addItem("Hugging Face –º–æ–¥–µ–ª—å", "huggingface")
        self.layoutlm_model_type_combo.addItem("–õ–æ–∫–∞–ª—å–Ω–∞—è –¥–æ–æ–±—É—á–µ–Ω–Ω–∞—è", "custom")
        self.layoutlm_model_type_combo.currentIndexChanged.connect(self._on_layoutlm_model_type_changed)
        layoutlm_type_layout.addWidget(layoutlm_type_label)
        layoutlm_type_layout.addWidget(self.layoutlm_model_type_combo, 1)
        layoutlm_layout.addLayout(layoutlm_type_layout)
        
        # HF –º–æ–¥–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.hf_layoutlm_group = QGroupBox("Hugging Face –º–æ–¥–µ–ª—å")
        hf_layoutlm_layout = QFormLayout()
        self.layoutlm_model_id_edit = QLineEdit()
        self.layoutlm_model_id_edit.setPlaceholderText("microsoft/layoutlmv3-base")
        hf_layoutlm_layout.addRow("ID –º–æ–¥–µ–ª–∏:", self.layoutlm_model_id_edit)
        self.hf_layoutlm_group.setLayout(hf_layoutlm_layout)
        layoutlm_layout.addWidget(self.hf_layoutlm_group)
        
        # –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.custom_layoutlm_group = QGroupBox("–õ–æ–∫–∞–ª—å–Ω–∞—è –¥–æ–æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å")
        custom_layoutlm_layout = QVBoxLayout()
        
        self.custom_layoutlm_name_edit = QLineEdit()
        self.custom_layoutlm_name_edit.setPlaceholderText("my_layoutlm_model")
        custom_layoutlm_layout.addWidget(QLabel("–ò–º—è –ø–∞–ø–∫–∏ –º–æ–¥–µ–ª–∏:"))
        custom_layoutlm_layout.addWidget(self.custom_layoutlm_name_edit)
        
        custom_layoutlm_layout.addWidget(QLabel("–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö:"))
        self.custom_layoutlm_model_selector = QComboBox()
        self.custom_layoutlm_model_selector.currentIndexChanged.connect(self._on_custom_layoutlm_selected_from_combo)
        custom_layoutlm_layout.addWidget(self.custom_layoutlm_model_selector)
        
        self.custom_layoutlm_group.setLayout(custom_layoutlm_layout)
        layoutlm_layout.addWidget(self.custom_layoutlm_group)
        
        # –°—Ç–∞—Ç—É—Å LayoutLM
        layoutlm_status_layout = QHBoxLayout()
        self.layoutlm_status_label = QLabel("–°—Ç–∞—Ç—É—Å: –ü—Ä–æ–≤–µ—Ä–∫–∞...")
        self.download_layoutlm_button = QPushButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—å—é")
        self.download_layoutlm_button.clicked.connect(self.perform_layoutlm_action)
        layoutlm_status_layout.addWidget(self.layoutlm_status_label, 1)
        layoutlm_status_layout.addWidget(self.download_layoutlm_button)
        layoutlm_layout.addLayout(layoutlm_status_layout)
        
        self.layoutlm_progress = QProgressBar()
        self.layoutlm_progress.setVisible(False)
        layoutlm_layout.addWidget(self.layoutlm_progress)
        
        layoutlm_group.setLayout(layoutlm_layout)
        scroll_layout.addWidget(layoutlm_group)
        
        # Donut –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        donut_group = QGroupBox("üç© Donut (–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)")
        donut_layout = QVBoxLayout()
        
        donut_model_layout = QHBoxLayout()
        donut_model_label = QLabel("ID –º–æ–¥–µ–ª–∏ Hugging Face:")
        self.donut_model_id_edit = QLineEdit()
        self.donut_model_id_edit.setPlaceholderText("naver-clova-ix/donut-base-finetuned-cord-v2")
        self.donut_model_id_edit.textChanged.connect(lambda: self.check_models_availability())
        donut_model_layout.addWidget(donut_model_label)
        donut_model_layout.addWidget(self.donut_model_id_edit, 1)
        donut_layout.addLayout(donut_model_layout)
        
        # –°—Ç–∞—Ç—É—Å Donut
        donut_status_layout = QHBoxLayout()
        self.donut_status_label = QLabel("–°—Ç–∞—Ç—É—Å: –ü—Ä–æ–≤–µ—Ä–∫–∞...")
        self.download_donut_button = QPushButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—å—é")
        self.download_donut_button.clicked.connect(self.perform_donut_action)
        donut_status_layout.addWidget(self.donut_status_label, 1)
        donut_status_layout.addWidget(self.download_donut_button)
        donut_layout.addLayout(donut_status_layout)
        
        self.donut_progress = QProgressBar()
        self.donut_progress.setVisible(False)
        donut_layout.addWidget(self.donut_progress)
        
        donut_group.setLayout(donut_layout)
        scroll_layout.addWidget(donut_group)
        
        # Ollama –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        ollama_group = QGroupBox("ü¶ô Ollama (–õ–æ–∫–∞–ª—å–Ω—ã–µ LLM)")
        ollama_layout = QVBoxLayout()
        
        ollama_info_label = QLabel("Ollama –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å LLM –º–æ–¥–µ–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ")
        ollama_info_label.setStyleSheet("color: #666; font-style: italic; margin: 5px 0;")
        ollama_layout.addWidget(ollama_info_label)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Ollama
        ollama_status_layout = QHBoxLayout()
        self.ollama_status_label = QLabel("–°—Ç–∞—Ç—É—Å: –ü—Ä–æ–≤–µ—Ä–∫–∞...")
        self.check_ollama_button = QPushButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Ollama")
        self.check_ollama_button.clicked.connect(self._check_ollama_status)
        ollama_status_layout.addWidget(self.ollama_status_label, 1)
        ollama_status_layout.addWidget(self.check_ollama_button)
        ollama_layout.addLayout(ollama_status_layout)
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É
        install_info = QLabel('<a href="https://ollama.ai">–°–∫–∞—á–∞—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Ollama</a>')
        install_info.setOpenExternalLinks(True)
        install_info.setStyleSheet("color: #2196F3; margin: 10px 0;")
        ollama_layout.addWidget(install_info)
        
        ollama_group.setLayout(ollama_layout)
        scroll_layout.addWidget(ollama_group)
        
        scroll_layout.addStretch()
        scroll.setWidget(scroll_widget)
        local_layout.addWidget(scroll)
        
        self.tab_widget.addTab(local_tab, "üñ•Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏")

    def _create_general_settings_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        general_tab = QWidget()
        general_layout = QVBoxLayout(general_tab)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = QLabel("‚öôÔ∏è –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        header_label.setStyleSheet("font-size: 16px; font-weight: bold; color: #666; margin-bottom: 10px;")
        general_layout.addWidget(header_label)
        
        # Scroll area
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout(scroll_widget)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É)
        company_group = QGroupBox("üè¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
        company_layout = QFormLayout()
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏-–ø–æ–ª—É—á–∞—Ç–µ–ª—è (–≥–ª–∞–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞)
        self.company_receiver_name_edit = QLineEdit()
        self.company_receiver_name_edit.setPlaceholderText(app_config.DEFAULT_COMPANY_RECEIVER_NAME)
        self.company_receiver_name_edit.textChanged.connect(self.update_company_receiver_name)
        self.company_receiver_name_edit.setStyleSheet("font-weight: bold; font-size: 14px; padding: 8px;")
        company_layout.addRow("üìã –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏-–ø–æ–ª—É—á–∞—Ç–µ–ª—è:", self.company_receiver_name_edit)
        
        # –°—Ç–∞–≤–∫–∞ –ù–î–° –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é  
        self.vat_rate_spinner = QDoubleSpinBox()
        self.vat_rate_spinner.setRange(0, 100)
        self.vat_rate_spinner.setSingleStep(0.1)
        self.vat_rate_spinner.setDecimals(1)
        self.vat_rate_spinner.setSuffix(" %")
        self.vat_rate_spinner.valueChanged.connect(self.update_default_vat_rate)
        company_layout.addRow("üí∞ –°—Ç–∞–≤–∫–∞ –ù–î–° –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", self.vat_rate_spinner)
        
        company_group.setLayout(company_layout)
        scroll_layout.addWidget(company_group)
        
        # –ü—É—Ç–∏ –∫ –≤–Ω–µ—à–Ω–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
        paths_group = QGroupBox("üìÅ –ü—É—Ç–∏ –∫ –≤–Ω–µ—à–Ω–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º")
        paths_layout = QFormLayout()
        
        self.tesseract_path_edit = self._create_path_input()
        paths_layout.addRow("Tesseract OCR:", self.tesseract_path_edit)
        
        self.poppler_path_edit = self._create_path_input()
        paths_layout.addRow("Poppler (–ø–∞–ø–∫–∞ bin):", self.poppler_path_edit)
        
        paths_group.setLayout(paths_layout)
        scroll_layout.addWidget(paths_group)
        
        # –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
        data_paths_group = QGroupBox("üíæ –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º")
        data_paths_layout = QFormLayout()
        
        self.training_datasets_path_edit = self._create_path_input()
        data_paths_layout.addRow("–î–∞—Ç–∞—Å–µ—Ç—ã –æ–±—É—á–µ–Ω–∏—è:", self.training_datasets_path_edit)
        
        self.trained_models_path_edit = self._create_path_input()
        data_paths_layout.addRow("–î–æ–æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:", self.trained_models_path_edit)
        
        data_paths_group.setLayout(data_paths_layout)
        scroll_layout.addWidget(data_paths_group)
        
        # –ü—Ä–æ–º–ø—Ç—ã
        prompts_group = QGroupBox("üí¨ –ü—Ä–æ–º–ø—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        prompts_layout = QVBoxLayout()
        
        # LayoutLM –ø—Ä–æ–º–ø—Ç
        prompts_layout.addWidget(QLabel("–ü—Ä–æ–º–ø—Ç –¥–ª—è LayoutLM:"))
        self.layoutlm_prompt_edit = QTextEdit()
        self.layoutlm_prompt_edit.setMaximumHeight(80)
        prompts_layout.addWidget(self.layoutlm_prompt_edit)
        
        # Donut –ø—Ä–æ–º–ø—Ç
        prompts_layout.addWidget(QLabel("–ü—Ä–æ–º–ø—Ç –¥–ª—è Donut:"))
        self.donut_prompt_edit = QTextEdit()
        self.donut_prompt_edit.setMaximumHeight(80)
        prompts_layout.addWidget(self.donut_prompt_edit)
        
        # Gemini –ø—Ä–æ–º–ø—Ç
        prompts_layout.addWidget(QLabel("–ü—Ä–æ–º–ø—Ç –¥–ª—è Gemini:"))
        self.gemini_prompt_edit = QTextEdit()
        self.gemini_prompt_edit.setMaximumHeight(80)
        prompts_layout.addWidget(self.gemini_prompt_edit)
        
        prompts_group.setLayout(prompts_layout)
        scroll_layout.addWidget(prompts_group)
        
        # –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        general_params_group = QGroupBox("üîß –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        general_params_layout = QFormLayout()
        
        self.batch_delay_spinner = QSpinBox()
        self.batch_delay_spinner.setRange(0, 60)
        self.batch_delay_spinner.setSuffix(" —Å–µ–∫")
        self.batch_delay_spinner.valueChanged.connect(self.update_batch_delay)
        general_params_layout.addRow("‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏:", self.batch_delay_spinner)
        
        general_params_group.setLayout(general_params_layout)
        scroll_layout.addWidget(general_params_group)
        
        # –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        network_group = QGroupBox("üåê –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        network_layout = QFormLayout()
        
        self.offline_mode_checkbox = QCheckBox("–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à)")
        network_layout.addRow("", self.offline_mode_checkbox)
        
        self.http_timeout_spinbox = QSpinBox()
        self.http_timeout_spinbox.setRange(5, 300)
        self.http_timeout_spinbox.setSuffix(" —Å–µ–∫")
        network_layout.addRow("–¢–∞–π–º-–∞—É—Ç HTTP:", self.http_timeout_spinbox)
        
        network_group.setLayout(network_layout)
        scroll_layout.addWidget(network_group)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º
        cache_group = QGroupBox("üóÑÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º")
        cache_layout = QVBoxLayout()
        
        self.cache_info_label = QLabel("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –∑–¥–µ—Å—å")
        self.cache_info_label.setWordWrap(True)
        self.cache_info_label.setStyleSheet("color: #666; margin: 10px 0;")
        cache_layout.addWidget(self.cache_info_label)
        
        cache_buttons_layout = QHBoxLayout()
        
        clear_layoutlm_button = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à LayoutLM")
        clear_layoutlm_button.clicked.connect(lambda: self.clear_model_cache_action('layoutlm'))
        cache_buttons_layout.addWidget(clear_layoutlm_button)
        
        clear_donut_button = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à Donut")
        clear_donut_button.clicked.connect(lambda: self.clear_model_cache_action('donut'))
        cache_buttons_layout.addWidget(clear_donut_button)
        
        cache_layout.addLayout(cache_buttons_layout)
        
        clear_all_button = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –í–ï–°–¨ –∫—ç—à –º–æ–¥–µ–ª–µ–π")
        clear_all_button.setStyleSheet("background-color: #ffdddd; color: #d32f2f; font-weight: bold;")
        clear_all_button.clicked.connect(self.clear_all_cache_action)
        cache_layout.addWidget(clear_all_button)
        
        cache_group.setLayout(cache_layout)
        scroll_layout.addWidget(cache_group)
        
        scroll_layout.addStretch()
        scroll.setWidget(scroll_widget)
        general_layout.addWidget(scroll)
        
        self.tab_widget.addTab(general_tab, "‚öôÔ∏è –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    def _create_path_input(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –¥–ª—è –≤–≤–æ–¥–∞ –ø—É—Ç–∏ —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–∑–æ—Ä–∞"""
        layout = QHBoxLayout()
        line_edit = QLineEdit()
        browse_button = QPushButton("üìÅ")
        browse_button.setMaximumWidth(40)
        browse_button.clicked.connect(lambda: self._browse_path(line_edit))
        
        widget = QWidget()
        layout.addWidget(line_edit, 1)
        layout.addWidget(browse_button)
        layout.setContentsMargins(0, 0, 0, 0)
        widget.setLayout(layout)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ line_edit –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—é
        widget.line_edit = line_edit
        
        return widget

    def _browse_path(self, line_edit):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø—É—Ç–∏"""
        current_path = line_edit.text() or os.path.expanduser("~")
        path = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É", current_path)
        if path:
            line_edit.setText(path)

    def _open_llm_providers_dialog(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        try:
            from .ui.llm_providers_dialog import LLMProvidersDialog
            dialog = LLMProvidersDialog(self)
            dialog.exec()
        except ImportError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–î–∏–∞–ª–æ–≥ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def _check_ollama_status(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Ollama"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ
        self.ollama_status_label.setText("–°—Ç–∞—Ç—É—Å: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")

    def _test_all_connections(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
        QMessageBox.information(self, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ")
