"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤ –¥–ª—è InvoiceGemini
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
"""
import os
import json
import shutil
import zipfile
import requests
import subprocess
import sys
from typing import Dict, List, Optional, Any, Union, Callable
from pathlib import Path
from datetime import datetime
from urllib.parse import urlparse
import hashlib
import importlib
import importlib.util
import logging

from .base_plugin import (
    BasePlugin, PluginType, PluginStatus, PluginMetadata,
    ImporterPlugin, IntegrationPlugin, WorkflowPlugin, NotificationPlugin
)
from .universal_plugin_manager import UniversalPluginManager


class PluginRepository:
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–ª–∞–≥–∏–Ω–æ–≤"""
    
    def __init__(self, url: str, name: str = "default"):
        self.url = url
        self.name = name
        self.plugins: Dict[str, Dict] = {}
        self.last_update: Optional[datetime] = None
    
    def update_catalog(self) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –ø–ª–∞–≥–∏–Ω–æ–≤ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        try:
            response = requests.get(f"{self.url}/catalog.json", timeout=10)
            response.raise_for_status()
            
            catalog = response.json()
            self.plugins = catalog.get("plugins", {})
            self.last_update = datetime.now()
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ {self.name}: {e}")
            return False
    
    def search_plugins(self, query: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –ø–ª–∞–≥–∏–Ω–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        results = []
        query_lower = query.lower()
        
        for plugin_id, plugin_info in self.plugins.items():
            if (query_lower in plugin_info.get("name", "").lower() or
                query_lower in plugin_info.get("description", "").lower() or
                query_lower in plugin_info.get("keywords", [])):
                results.append({
                    "id": plugin_id,
                    "repository": self.name,
                    **plugin_info
                })
        
        return results


class PluginInstaller:
    """–£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –ø–ª–∞–≥–∏–Ω–æ–≤"""
    
    def __init__(self, plugins_dir: str):
        self.plugins_dir = Path(plugins_dir)
        self.plugins_dir.mkdir(parents=True, exist_ok=True)
        self.temp_dir = self.plugins_dir / "temp"
        self.temp_dir.mkdir(exist_ok=True)
    
    def install_from_zip(self, zip_path: str, plugin_id: str) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–≥–∏–Ω –∏–∑ ZIP —Ñ–∞–π–ª–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            temp_extract_dir = self.temp_dir / f"extract_{plugin_id}"
            temp_extract_dir.mkdir(exist_ok=True)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ZIP
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(temp_extract_dir)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–ª–∞–≥–∏–Ω–∞
            if not self._validate_plugin_structure(temp_extract_dir):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–∞–≥–∏–Ω–∞")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–≥–∏–Ω
            plugin_dir = self.plugins_dir / plugin_id
            if plugin_dir.exists():
                shutil.rmtree(plugin_dir)
            
            shutil.move(str(temp_extract_dir), str(plugin_dir))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            self._install_dependencies(plugin_dir)
            
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ {plugin_id}: {e}")
            return False
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if temp_extract_dir.exists():
                shutil.rmtree(temp_extract_dir, ignore_errors=True)
    
    def install_from_url(self, url: str, plugin_id: str) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–≥–∏–Ω –ø–æ URL"""
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            response = requests.get(url, timeout=30)
            response.raise_for_status()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = self.temp_dir / f"{plugin_id}.zip"
            with open(temp_file, 'wb') as f:
                f.write(response.content)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            result = self.install_from_zip(str(temp_file), plugin_id)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file.unlink(missing_ok=True)
            
            return result
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ –ø–æ URL {url}: {e}")
            return False
    
    def _validate_plugin_structure(self, plugin_dir: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–ª–∞–≥–∏–Ω–∞"""
        # –ò—â–µ–º —Ñ–∞–π–ª –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        metadata_file = plugin_dir / "plugin.json"
        if not metadata_file.exists():
            return False
        
        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø–ª–∞–≥–∏–Ω–∞
        py_files = list(plugin_dir.glob("*_plugin.py"))
        if not py_files:
            return False
        
        return True
    
    def _install_dependencies(self, plugin_dir: Path):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–ª–∞–≥–∏–Ω–∞"""
        requirements_file = plugin_dir / "requirements.txt"
        if requirements_file.exists():
            try:
                subprocess.check_call([
                    sys.executable, "-m", "pip", "install", 
                    "-r", str(requirements_file)
                ])
            except subprocess.CalledProcessError as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")


class AdvancedPluginManager:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
    """
    
    def __init__(self, plugins_dir: str = None, config_file: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
        
        Args:
            plugins_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏
            config_file: –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.plugins_dir = Path(plugins_dir or "plugins/user")
        self.plugins_dir.mkdir(parents=True, exist_ok=True)
        
        self.config_file = Path(config_file or "config/plugin_manager.json")
        self.config_file.parent.mkdir(parents=True, exist_ok=True)
        
        # –ë–∞–∑–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤
        self.base_manager = UniversalPluginManager(str(self.plugins_dir))
        
        # Configuration
        self.config = self._load_config()
        
        # –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø–ª–∞–≥–∏–Ω–æ–≤
        self.repositories: Dict[str, PluginRepository] = {}
        self._load_repositories()
        
        # –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫
        self.installer = PluginInstaller(str(self.plugins_dir))
        
        # –ö—ç—à –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        self.metadata_cache: Dict[str, Dict] = {}
        
        # Callbacks
        self.progress_callback: Optional[Callable] = None
        self.status_callback: Optional[Callable] = None
        
        print(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AdvancedPluginManager...")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤: {self.plugins_dir}")
        print(f"üìã –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {len(self.repositories)}")
    
    def _load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        default_config = {
            "repositories": [
                {
                    "name": "official",
                    "url": "https://plugins.invoicegemini.com"
                }
            ],
            "auto_update": False,
            "check_signatures": True,
            "allowed_sources": ["official", "github", "local"]
        }
        
        if self.config_file.exists():
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å default_config
                    default_config.update(config)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        return default_config
    
    def _save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def _load_repositories(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø–ª–∞–≥–∏–Ω–æ–≤"""
        for repo_config in self.config.get("repositories", []):
            repo = PluginRepository(
                url=repo_config["url"],
                name=repo_config["name"]
            )
            self.repositories[repo.name] = repo
    
    def add_repository(self, name: str, url: str) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–ª–∞–≥–∏–Ω–æ–≤
        
        Args:
            name: –ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            url: URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω
        """
        try:
            repo = PluginRepository(url, name)
            if repo.update_catalog():
                self.repositories[name] = repo
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                repos = self.config.get("repositories", [])
                repos.append({"name": name, "url": url})
                self.config["repositories"] = repos
                self._save_config()
                
                return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {name}: {e}")
        
        return False
    
    def update_repositories(self) -> Dict[str, bool]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ç–∞–ª–æ–≥–∏ –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        
        Returns:
            Dict[str, bool]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º
        """
        results = {}
        for name, repo in self.repositories.items():
            results[name] = repo.update_catalog()
            if self.status_callback:
                self.status_callback(f"–û–±–Ω–æ–≤–ª–µ–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {name}")
        
        return results
    
    def search_plugins(self, query: str, repository: str = None) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ –ø–ª–∞–≥–∏–Ω–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            repository: –ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–µ—Å–ª–∏ None, –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º)
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
        """
        results = []
        
        repos_to_search = [self.repositories[repository]] if repository else self.repositories.values()
        
        for repo in repos_to_search:
            results.extend(repo.search_plugins(query))
        
        return results
    
    def install_plugin(self, plugin_id: str, source: str = None, **kwargs) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–≥–∏–Ω
        
        Args:
            plugin_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–≥–∏–Ω–∞
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (repository, url, file)
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–ª–∞–≥–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        """
        try:
            if self.progress_callback:
                self.progress_callback(0, f"–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {plugin_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ –ø–ª–∞–≥–∏–Ω
            if self.is_plugin_installed(plugin_id):
                if not kwargs.get("force", False):
                    raise ValueError(f"–ü–ª–∞–≥–∏–Ω {plugin_id} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                self.uninstall_plugin(plugin_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
            if source == "file" or (source is None and "file_path" in kwargs):
                result = self.installer.install_from_zip(kwargs["file_path"], plugin_id)
            elif source == "url" or (source is None and "url" in kwargs):
                result = self.installer.install_from_url(kwargs["url"], plugin_id)
            else:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
                result = self._install_from_repository(plugin_id, source)
            
            if result:
                if self.progress_callback:
                    self.progress_callback(100, f"–ü–ª–∞–≥–∏–Ω {plugin_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
                self.base_manager._load_user_plugins()
                
                if self.status_callback:
                    self.status_callback(f"‚úÖ –ü–ª–∞–≥–∏–Ω {plugin_id} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            return result
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ {plugin_id}: {e}")
            if self.status_callback:
                self.status_callback(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {plugin_id}: {e}")
            return False
    
    def _install_from_repository(self, plugin_id: str, repository: str = None) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–≥–∏–Ω –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        # –ò—â–µ–º –ø–ª–∞–≥–∏–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö
        for repo_name, repo in self.repositories.items():
            if repository and repo_name != repository:
                continue
                
            if plugin_id in repo.plugins:
                plugin_info = repo.plugins[plugin_id]
                download_url = plugin_info.get("download_url")
                
                if download_url:
                    return self.installer.install_from_url(download_url, plugin_id)
        
        raise ValueError(f"–ü–ª–∞–≥–∏–Ω {plugin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö")
    
    def uninstall_plugin(self, plugin_id: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –ø–ª–∞–≥–∏–Ω
        
        Args:
            plugin_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–≥–∏–Ω–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–ª–∞–≥–∏–Ω —É–¥–∞–ª–µ–Ω
        """
        try:
            plugin_dir = self.plugins_dir / plugin_id
            if plugin_dir.exists():
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–≥–∏–Ω –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
                self._stop_plugin(plugin_id)
                
                # –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                shutil.rmtree(plugin_dir)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
                self.base_manager._load_user_plugins()
                
                if self.status_callback:
                    self.status_callback(f"‚úÖ –ü–ª–∞–≥–∏–Ω {plugin_id} —É–¥–∞–ª–µ–Ω")
                
                return True
            else:
                if self.status_callback:
                    self.status_callback(f"‚ö†Ô∏è –ü–ª–∞–≥–∏–Ω {plugin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞ {plugin_id}: {e}")
            if self.status_callback:
                self.status_callback(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {plugin_id}: {e}")
            return False
    
    def update_plugin(self, plugin_id: str) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–ª–∞–≥–∏–Ω
        
        Args:
            plugin_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–≥–∏–Ω–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–ª–∞–≥–∏–Ω –æ–±–Ω–æ–≤–ª–µ–Ω
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
            current_info = self.get_plugin_info(plugin_id)
            if not current_info:
                return False
            
            # –ò—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö
            for repo in self.repositories.values():
                if plugin_id in repo.plugins:
                    repo_info = repo.plugins[plugin_id]
                    repo_version = repo_info.get("version", "0.0.0")
                    current_version = current_info.get("version", "0.0.0")
                    
                    if self._compare_versions(repo_version, current_version) > 0:
                        # –ï—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                        if self.status_callback:
                            self.status_callback(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {plugin_id} –¥–æ –≤–µ—Ä—Å–∏–∏ {repo_version}")
                        
                        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                        backup_path = self._create_backup(plugin_id)
                        
                        try:
                            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é
                            self.uninstall_plugin(plugin_id)
                            result = self._install_from_repository(plugin_id)
                            
                            if result:
                                # –£–¥–∞–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                                if backup_path and backup_path.exists():
                                    shutil.rmtree(backup_path)
                                
                                if self.status_callback:
                                    self.status_callback(f"‚úÖ –ü–ª–∞–≥–∏–Ω {plugin_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
                                return True
                            else:
                                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                                self._restore_backup(plugin_id, backup_path)
                                return False
                                
                        except Exception as e:
                            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                            self._restore_backup(plugin_id, backup_path)
                            raise e
            
            if self.status_callback:
                self.status_callback(f"‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è {plugin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞ {plugin_id}: {e}")
            if self.status_callback:
                self.status_callback(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {plugin_id}: {e}")
            return False
    
    def _create_backup(self, plugin_id: str) -> Optional[Path]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–ª–∞–≥–∏–Ω–∞"""
        try:
            plugin_dir = self.plugins_dir / plugin_id
            if not plugin_dir.exists():
                return None
            
            backup_dir = self.plugins_dir / f"{plugin_id}_backup_{int(datetime.now().timestamp())}"
            shutil.copytree(plugin_dir, backup_dir)
            return backup_dir
            
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é {plugin_id}: {e}")
            return None
    
    def _restore_backup(self, plugin_id: str, backup_path: Path):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–≥–∏–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            if backup_path and backup_path.exists():
                plugin_dir = self.plugins_dir / plugin_id
                if plugin_dir.exists():
                    shutil.rmtree(plugin_dir)
                shutil.move(str(backup_path), str(plugin_dir))
                
                if self.status_callback:
                    self.status_callback(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {plugin_id} –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {plugin_id}: {e}")
    
    def _compare_versions(self, version1: str, version2: str) -> int:
        """
        –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤–µ—Ä—Å–∏–∏ –ø–ª–∞–≥–∏–Ω–æ–≤
        
        Returns:
            int: 1 –µ—Å–ª–∏ version1 > version2, -1 –µ—Å–ª–∏ version1 < version2, 0 –µ—Å–ª–∏ —Ä–∞–≤–Ω—ã
        """
        def version_tuple(v):
            return tuple(map(int, (v.split("."))))
        
        try:
            v1 = version_tuple(version1)
            v2 = version_tuple(version2)
            
            if v1 > v2:
                return 1
            elif v1 < v2:
                return -1
            else:
                return 0
        except (ValueError, TypeError, AttributeError) as e:
            # –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–µ—Ä—Å–∏–π - —Å—á–∏—Ç–∞–µ–º —Ä–∞–≤–Ω—ã–º–∏
            return 0
    
    def _stop_plugin(self, plugin_id: str):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–≥–∏–Ω"""
        # –£–¥–∞–ª—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø–ª–∞–≥–∏–Ω–∞ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        for plugin_type in PluginType:
            if plugin_id in self.base_manager.plugin_instances[plugin_type]:
                instance = self.base_manager.plugin_instances[plugin_type][plugin_id]
                try:
                    instance.cleanup()
                except (AttributeError, RuntimeError, Exception) as e:
                    # –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–ª–∞–≥–∏–Ω–∞ - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                    pass
                del self.base_manager.plugin_instances[plugin_type][plugin_id]
    
    def is_plugin_installed(self, plugin_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–ª–∞–≥–∏–Ω"""
        plugin_dir = self.plugins_dir / plugin_id
        return plugin_dir.exists()
    
    def get_installed_plugins(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤"""
        plugins = []
        
        for plugin_dir in self.plugins_dir.iterdir():
            if plugin_dir.is_dir() and not plugin_dir.name.startswith('.'):
                info = self.get_plugin_info(plugin_dir.name)
                if info:
                    plugins.append(info)
        
        return plugins
    
    def get_plugin_info(self, plugin_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–≥–∏–Ω–µ"""
        plugin_dir = self.plugins_dir / plugin_id
        metadata_file = plugin_dir / "plugin.json"
        
        if metadata_file.exists():
            try:
                with open(metadata_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö {plugin_id}: {e}")
        
        return None
    
    def get_available_updates(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        updates = []
        
        for plugin_id in [d.name for d in self.plugins_dir.iterdir() if d.is_dir()]:
            current_info = self.get_plugin_info(plugin_id)
            if not current_info:
                continue
            
            current_version = current_info.get("version", "0.0.0")
            
            # –ò—â–µ–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö
            for repo in self.repositories.values():
                if plugin_id in repo.plugins:
                    repo_info = repo.plugins[plugin_id]
                    repo_version = repo_info.get("version", "0.0.0")
                    
                    if self._compare_versions(repo_version, current_version) > 0:
                        updates.append({
                            "plugin_id": plugin_id,
                            "current_version": current_version,
                            "available_version": repo_version,
                            "repository": repo.name
                        })
                        break
        
        return updates
    
    def set_progress_callback(self, callback: Callable[[int, str], None]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_callback = callback
    
    def set_status_callback(self, callback: Callable[[str], None]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.status_callback = callback
    
    def get_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞–≥–∏–Ω–æ–≤"""
        installed = self.get_installed_plugins()
        updates = self.get_available_updates()
        
        return {
            "installed_count": len(installed),
            "available_updates": len(updates),
            "repositories": len(self.repositories),
            "plugin_types": {
                plugin_type.value: len([p for p in installed 
                                      if p.get("type") == plugin_type.value])
                for plugin_type in PluginType
            }
        } 