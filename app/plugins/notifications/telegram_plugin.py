"""
–ü–ª–∞–≥–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram
–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–∞—Ö –∏ —Å—Ç–∞—Ç—É—Å–µ —Å–∏—Å—Ç–µ–º—ã
"""
import requests
import json
from typing import Dict, Any, List, Optional
from datetime import datetime
import logging
import asyncio
import aiohttp

from ..base_plugin import (
    NotificationPlugin, PluginMetadata, PluginType, PluginCapability,
    PluginPriority
)


class TelegramNotificationPlugin(NotificationPlugin):
    """–ü–ª–∞–≥–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram"""
    
    def __init__(self, config: Dict[str, Any] = None):
        super().__init__(config)
        self._bot_token = None
        self._chat_ids = []
        self._session = None
    
    @property
    def metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="Telegram Notifications",
            version="1.0.0", 
            description="–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot API",
            author="InvoiceGemini Team",
            plugin_type=PluginType.NOTIFICATION,
            capabilities=[
                PluginCapability.API,
                PluginCapability.REALTIME,
                PluginCapability.ASYNC
            ],
            priority=PluginPriority.NORMAL,
            config_schema={
                "required": ["bot_token", "chat_ids"],
                "optional": {
                    "parse_mode": "HTML",
                    "disable_notification": False,
                    "timeout": 30,
                    "max_message_length": 4096
                },
                "types": {
                    "bot_token": str,
                    "chat_ids": list,
                    "parse_mode": str,
                    "disable_notification": bool,
                    "timeout": int,
                    "max_message_length": int
                }
            },
            dependencies=[
                "requests>=2.25.0",
                "aiohttp>=3.8.0"
            ],
            keywords=["telegram", "notifications", "bot", "messaging", "alerts"]
        )
    
    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if "bot_token" not in self.config:
                self.set_error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç bot_token –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return False
            
            if "chat_ids" not in self.config or not self.config["chat_ids"]:
                self.set_error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç chat_ids –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return False
            
            self._bot_token = self.config["bot_token"]
            self._chat_ids = self.config["chat_ids"]
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            self._session = requests.Session()
            self._session.timeout = self.config.get("timeout", 30)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
            if not self._test_bot_token():
                self.set_error("–ù–µ–≤–µ—Ä–Ω—ã–π bot_token –∏–ª–∏ –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            logging.info(f"Telegram –ø–ª–∞–≥–∏–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {len(self._chat_ids)} —á–∞—Ç–æ–≤")
            return True
            
        except Exception as e:
            self.set_error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –ø–ª–∞–≥–∏–Ω–∞: {e}")
            return False
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self._session:
            self._session.close()
            self._session = None
    
    def _test_bot_token(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"""
        try:
            url = f"https://api.telegram.org/bot{self._bot_token}/getMe"
            response = self._session.get(url)
            return response.status_code == 200 and response.json().get("ok", False)
        except:
            return False
    
    def send_notification(self, message: str, **kwargs) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
        try:
            chat_id = kwargs.get("chat_id")
            if chat_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç
                return self._send_to_chat(chat_id, message, **kwargs)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
                success_count = 0
                for chat_id in self._chat_ids:
                    if self._send_to_chat(chat_id, message, **kwargs):
                        success_count += 1
                
                return success_count > 0
                
        except Exception as e:
            self.set_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def _send_to_chat(self, chat_id: str, message: str, **kwargs) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç"""
        try:
            url = f"https://api.telegram.org/bot{self._bot_token}/sendMessage"
            
            # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            max_length = self.config.get("max_message_length", 4096)
            if len(message) > max_length:
                message = message[:max_length-3] + "..."
            
            data = {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": kwargs.get("parse_mode", self.config.get("parse_mode", "HTML")),
                "disable_notification": kwargs.get("disable_notification", 
                                                 self.config.get("disable_notification", False))
            }
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if kwargs.get("reply_markup"):
                data["reply_markup"] = kwargs["reply_markup"]
            
            if kwargs.get("disable_web_page_preview"):
                data["disable_web_page_preview"] = True
            
            response = self._session.post(url, json=data)
            
            if response.status_code == 200:
                result = response.json()
                return result.get("ok", False)
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
            return False
    
    async def send_notification_async(self, message: str, **kwargs) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            async with aiohttp.ClientSession() as session:
                chat_id = kwargs.get("chat_id")
                if chat_id:
                    return await self._send_to_chat_async(session, chat_id, message, **kwargs)
                else:
                    tasks = []
                    for chat_id in self._chat_ids:
                        task = self._send_to_chat_async(session, chat_id, message, **kwargs)
                        tasks.append(task)
                    
                    results = await asyncio.gather(*tasks, return_exceptions=True)
                    return any(result for result in results if isinstance(result, bool) and result)
                    
        except Exception as e:
            self.set_error(f"–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False
    
    async def _send_to_chat_async(self, session: aiohttp.ClientSession, 
                                 chat_id: str, message: str, **kwargs) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç"""
        try:
            url = f"https://api.telegram.org/bot{self._bot_token}/sendMessage"
            
            max_length = self.config.get("max_message_length", 4096)
            if len(message) > max_length:
                message = message[:max_length-3] + "..."
            
            data = {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": kwargs.get("parse_mode", self.config.get("parse_mode", "HTML")),
                "disable_notification": kwargs.get("disable_notification", 
                                                 self.config.get("disable_notification", False))
            }
            
            async with session.post(url, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    return result.get("ok", False)
                else:
                    return False
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
            return False
    
    def get_notification_channels(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return [f"telegram_chat_{chat_id}" for chat_id in self._chat_ids]
    
    def send_invoice_notification(self, invoice_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º —Å—á–µ—Ç–µ"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—á–µ—Ç–µ
            message = self._format_invoice_message(invoice_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            reply_markup = {
                "inline_keyboard": [[
                    {"text": "üìÑ –î–µ—Ç–∞–ª–∏", "callback_data": f"invoice_details_{invoice_data.get('id', '')}"},
                    {"text": "üíæ –°–∫–∞—á–∞—Ç—å", "callback_data": f"download_invoice_{invoice_data.get('id', '')}"}
                ]]
            }
            
            return self.send_notification(message, reply_markup=json.dumps(reply_markup))
            
        except Exception as e:
            self.set_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—á–µ—Ç–µ: {e}")
            return False
    
    def _format_invoice_message(self, invoice_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—á–µ—Ç–µ"""
        template = """
üßæ <b>–ù–æ–≤—ã–π —Å—á–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω</b>

üìã <b>–ù–æ–º–µ—Ä:</b> {invoice_number}
üìÖ <b>–î–∞—Ç–∞:</b> {invoice_date}
üè¢ <b>–ü–æ—Å—Ç–∞–≤—â–∏–∫:</b> {vendor_name}
üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> {customer_name}
üí∞ <b>–°—É–º–º–∞:</b> {total_amount} {currency}
üèõÔ∏è <b>–ù–î–°:</b> {vat_amount} {currency}

‚è∞ <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {processed_time}
ü§ñ <b>–ú–æ–¥–µ–ª—å:</b> {model_used}
‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> {status}
"""
        
        return template.format(
            invoice_number=invoice_data.get("invoice_number", "–ù–µ —É–∫–∞–∑–∞–Ω"),
            invoice_date=invoice_data.get("invoice_date", "–ù–µ —É–∫–∞–∑–∞–Ω–∞"),
            vendor_name=invoice_data.get("vendor_name", "–ù–µ —É–∫–∞–∑–∞–Ω"),
            customer_name=invoice_data.get("customer_name", "–ù–µ —É–∫–∞–∑–∞–Ω"),
            total_amount=invoice_data.get("total_amount", 0),
            currency=invoice_data.get("currency", "RUB"),
            vat_amount=invoice_data.get("vat_amount", 0),
            processed_time=datetime.now().strftime("%H:%M:%S %d.%m.%Y"),
            model_used=invoice_data.get("model_used", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"),
            status=invoice_data.get("status", "–û–±—Ä–∞–±–æ—Ç–∞–Ω")
        ).strip()
    
    def send_system_notification(self, event_type: str, details: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            message = self._format_system_message(event_type, details)
            return self.send_notification(message, disable_notification=True)
            
        except Exception as e:
            self.set_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def _format_system_message(self, event_type: str, details: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        emoji_map = {
            "error": "‚ùå",
            "warning": "‚ö†Ô∏è",
            "info": "‚ÑπÔ∏è",
            "success": "‚úÖ",
            "startup": "üöÄ",
            "shutdown": "üõë",
            "update": "üîÑ"
        }
        
        emoji = emoji_map.get(event_type, "üì¢")
        
        message = f"{emoji} <b>InvoiceGemini - {event_type.upper()}</b>\n\n"
        
        if event_type == "error":
            message += f"üî¥ <b>–û—à–∏–±–∫–∞:</b> {details.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"
            if details.get('file'):
                message += f"üìÅ <b>–§–∞–π–ª:</b> {details['file']}\n"
            if details.get('timestamp'):
                message += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {details['timestamp']}\n"
                
        elif event_type == "warning":
            message += f"üü° <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</b> {details.get('message', '')}\n"
            
        elif event_type == "success":
            message += f"üü¢ <b>–£—Å–ø–µ—Ö:</b> {details.get('message', '')}\n"
            if details.get('count'):
                message += f"üìä <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {details['count']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
                
        elif event_type == "startup":
            message += f"üü¢ <b>–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞</b>\n"
            message += f"‚è∞ <b>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</b> {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}\n"
            if details.get('version'):
                message += f"üì¶ <b>–í–µ—Ä—Å–∏—è:</b> {details['version']}\n"
                
        elif event_type == "shutdown":
            message += f"üî¥ <b>–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n"
            message += f"‚è∞ <b>–í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:</b> {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}\n"
            
        elif event_type == "update":
            message += f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã</b>\n"
            if details.get('from_version') and details.get('to_version'):
                message += f"üì¶ <b>–í–µ—Ä—Å–∏—è:</b> {details['from_version']} ‚Üí {details['to_version']}\n"
        
        return message.strip()
    
    def send_statistics_report(self, stats: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        try:
            message = self._format_statistics_message(stats)
            return self.send_notification(message)
            
        except Exception as e:
            self.set_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return False
    
    def _format_statistics_message(self, stats: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        template = """
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ InvoiceGemini</b>

üìã <b>–î–æ–∫—É–º–µ–Ω—Ç—ã:</b>
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {processed_today}
‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_processed}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success_count}
‚Ä¢ –° –æ—à–∏–±–∫–∞–º–∏: {error_count}

‚è±Ô∏è <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {avg_processing_time}—Å
‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {system_load}%

ü§ñ <b>–ú–æ–¥–µ–ª–∏:</b>
{models_stats}

üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {report_period}
üïê <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:</b> {generated_time}
"""
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º
        models_stats = ""
        for model, count in stats.get("models_usage", {}).items():
            models_stats += f"‚Ä¢ {model}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        
        return template.format(
            processed_today=stats.get("processed_today", 0),
            total_processed=stats.get("total_processed", 0),
            success_count=stats.get("success_count", 0),
            error_count=stats.get("error_count", 0),
            avg_processing_time=stats.get("avg_processing_time", 0),
            system_load=stats.get("system_load", 0),
            models_stats=models_stats.strip() or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            report_period=stats.get("period", "–ù–µ —É–∫–∞–∑–∞–Ω"),
            generated_time=datetime.now().strftime("%H:%M:%S %d.%m.%Y")
        ).strip()
    
    def send_document_with_caption(self, document_path: str, caption: str, **kwargs) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–¥–ø–∏—Å—å—é"""
        try:
            url = f"https://api.telegram.org/bot{self._bot_token}/sendDocument"
            
            chat_id = kwargs.get("chat_id")
            if not chat_id and self._chat_ids:
                chat_id = self._chat_ids[0]  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø–µ—Ä–≤—ã–π —á–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            with open(document_path, 'rb') as doc:
                files = {'document': doc}
                data = {
                    'chat_id': chat_id,
                    'caption': caption,
                    'parse_mode': kwargs.get("parse_mode", self.config.get("parse_mode", "HTML"))
                }
                
                response = self._session.post(url, files=files, data=data)
                
                if response.status_code == 200:
                    result = response.json()
                    return result.get("ok", False)
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: HTTP {response.status_code}")
                    return False
                    
        except Exception as e:
            self.set_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return False
    
    def get_chat_info(self, chat_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ"""
        try:
            url = f"https://api.telegram.org/bot{self._bot_token}/getChat"
            response = self._session.get(url, params={"chat_id": chat_id})
            
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    return result.get("result")
            
            return None
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat_id}: {e}")
            return None 