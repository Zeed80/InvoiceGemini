"""
–ü—Ä–∏–º–µ—Ä –ø–ª–∞–≥–∏–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞–≥–∏–Ω–æ–≤ InvoiceGemini
"""
from typing import Dict, Any, List
import json
import xml.etree.ElementTree as ET
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –º–æ–¥—É–ª—é –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

try:
    from base_plugin import ExporterPlugin, PluginMetadata, PluginType, PluginCapability
except ImportError:
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from app.plugins.base_plugin import ExporterPlugin, PluginMetadata, PluginType, PluginCapability

class XMLExporterPlugin(ExporterPlugin):
    """
    –ü—Ä–∏–º–µ—Ä –ø–ª–∞–≥–∏–Ω–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç XML
    """
    
    @property
    def metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="XML Exporter",
            version="1.0.0",
            description="–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç XML",
            author="InvoiceGemini Team",
            plugin_type=PluginType.EXPORTER,
            capabilities=[PluginCapability.TEXT],
            dependencies=[],
            config_schema={
                "required": [],
                "optional": {
                    "encoding": "utf-8",
                    "pretty_print": True,
                    "root_element": "invoices"
                }
            }
        )
    
    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–∞–≥–∏–Ω"""
        self.is_loaded = True
        print("‚úÖ XML Exporter Plugin –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    
    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø–ª–∞–≥–∏–Ω–∞"""
        self.is_loaded = False
        print("üßπ XML Exporter Plugin –æ—á–∏—â–µ–Ω")
    
    def export(self, data: Any, output_path: str, **kwargs) -> bool:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ XML —Ñ–æ—Ä–º–∞—Ç
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (dict –∏–ª–∏ list)
            output_path: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            bool: True –µ—Å–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            encoding = self.config.get('encoding', 'utf-8')
            pretty_print = self.config.get('pretty_print', True)
            root_element = self.config.get('root_element', 'invoices')
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
            root = ET.Element(root_element)
            
            if isinstance(data, list):
                # –ü–∞–∫–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                for i, item in enumerate(data):
                    invoice_elem = ET.SubElement(root, "invoice")
                    invoice_elem.set("id", str(i + 1))
                    self._dict_to_xml(item, invoice_elem)
            elif isinstance(data, dict):
                # –û–¥–∏–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                invoice_elem = ET.SubElement(root, "invoice")
                self._dict_to_xml(data, invoice_elem)
            else:
                # –ü—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
                data_elem = ET.SubElement(root, "data")
                data_elem.text = str(data)
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ä–µ–≤–æ XML
            tree = ET.ElementTree(root)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            if pretty_print:
                self._prettify_xml(root)
            
            tree.write(output_path, encoding=encoding, xml_declaration=True)
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ XML: {output_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ XML: {e}")
            return False
    
    def get_supported_formats(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        return ["xml"]
    
    def _dict_to_xml(self, data_dict: Dict[str, Any], parent_element: ET.Element):
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤ XML —ç–ª–µ–º–µ–Ω—Ç—ã
        
        Args:
            data_dict: –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö
            parent_element: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π XML —ç–ª–µ–º–µ–Ω—Ç
        """
        for key, value in data_dict.items():
            # –û—á–∏—â–∞–µ–º –∫–ª—é—á –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è XML
            clean_key = self._clean_xml_key(key)
            
            if isinstance(value, dict):
                # –í–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
                child_elem = ET.SubElement(parent_element, clean_key)
                self._dict_to_xml(value, child_elem)
            elif isinstance(value, list):
                # –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
                for i, item in enumerate(value):
                    item_elem = ET.SubElement(parent_element, clean_key)
                    item_elem.set("index", str(i))
                    if isinstance(item, dict):
                        self._dict_to_xml(item, item_elem)
                    else:
                        item_elem.text = str(item)
            else:
                # –ü—Ä–æ—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                child_elem = ET.SubElement(parent_element, clean_key)
                child_elem.text = str(value) if value is not None else ""
    
    def _clean_xml_key(self, key: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç –∫–ª—é—á –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ XML
        
        Args:
            key: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–ª—é—á
            
        Returns:
            str: –û—á–∏—â–µ–Ω–Ω—ã–π –∫–ª—é—á
        """
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        clean_key = key.replace(" ", "_").replace("-", "_")
        clean_key = "".join(c for c in clean_key if c.isalnum() or c == "_")
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–ª—é—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã
        if clean_key and not clean_key[0].isalpha():
            clean_key = "field_" + clean_key
        
        return clean_key or "unknown_field"
    
    def _prettify_xml(self, element: ET.Element, level: int = 0):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è XML
        
        Args:
            element: XML —ç–ª–µ–º–µ–Ω—Ç
            level: –£—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        """
        indent = "\n" + level * "  "
        if len(element):
            if not element.text or not element.text.strip():
                element.text = indent + "  "
            if not element.tail or not element.tail.strip():
                element.tail = indent
            for child in element:
                self._prettify_xml(child, level + 1)
            if not child.tail or not child.tail.strip():
                child.tail = indent
        else:
            if level and (not element.tail or not element.tail.strip()):
                element.tail = indent

class YAMLExporterPlugin(ExporterPlugin):
    """
    –ü—Ä–∏–º–µ—Ä –ø–ª–∞–≥–∏–Ω–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç YAML
    """
    
    @property
    def metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="YAML Exporter",
            version="1.0.0",
            description="–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç YAML",
            author="InvoiceGemini Team",
            plugin_type=PluginType.EXPORTER,
            capabilities=[PluginCapability.TEXT],
            dependencies=["pyyaml"],
            config_schema={
                "required": [],
                "optional": {
                    "encoding": "utf-8",
                    "default_flow_style": False,
                    "allow_unicode": True
                }
            }
        )
    
    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–∞–≥–∏–Ω"""
        try:
            import yaml
            self.yaml = yaml
            self.is_loaded = True
            print("‚úÖ YAML Exporter Plugin –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except ImportError:
            print("‚ùå PyYAML –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyyaml")
            return False
    
    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø–ª–∞–≥–∏–Ω–∞"""
        self.is_loaded = False
        print("üßπ YAML Exporter Plugin –æ—á–∏—â–µ–Ω")
    
    def export(self, data: Any, output_path: str, **kwargs) -> bool:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ YAML —Ñ–æ—Ä–º–∞—Ç
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            output_path: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            bool: True –µ—Å–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            encoding = self.config.get('encoding', 'utf-8')
            default_flow_style = self.config.get('default_flow_style', False)
            allow_unicode = self.config.get('allow_unicode', True)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if isinstance(data, list):
                yaml_data = {"invoices": data}
            elif isinstance(data, dict):
                yaml_data = {"invoice": data}
            else:
                yaml_data = {"data": data}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(output_path, 'w', encoding=encoding) as f:
                self.yaml.dump(
                    yaml_data,
                    f,
                    default_flow_style=default_flow_style,
                    allow_unicode=allow_unicode,
                    indent=2
                )
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ YAML: {output_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ YAML: {e}")
            return False
    
    def get_supported_formats(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        return ["yaml", "yml"] 