"""
–ü–ª–∞–≥–∏–Ω –¥–ª—è Google Gemini API.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π GeminiProcessor —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø–ª–∞–≥–∏–Ω–æ–≤.
"""
import os
import json
import tempfile
from datetime import datetime
from typing import Dict, Optional, Any
from pathlib import Path
from PIL import Image

from ..base_llm_plugin import BaseLLMPlugin

class GeminiPlugin(BaseLLMPlugin):
    """
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è Google Gemini API.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π GeminiProcessor –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º.
    """
    
    def __init__(self, model_name: str = None, api_key: str = None, **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ Google Gemini.
        
        Args:
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Gemini
            api_key: API –∫–ª—é—á Google
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        super().__init__("google", model_name, api_key, **kwargs)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π GeminiProcessor
        try:
            from ...gemini_processor import GeminiProcessor
            self.gemini_processor = None
            self.GeminiProcessor = GeminiProcessor
        except ImportError:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å GeminiProcessor")
            # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            self.GeminiProcessor = None
            self.gemini_processor = None
        
        print(f"ü§ñ –°–æ–∑–¥–∞–Ω –ø–ª–∞–≥–∏–Ω Google Gemini –¥–ª—è –º–æ–¥–µ–ª–∏ {self.model_name}")
    
    def load_model(self) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å Google Gemini.
        
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        if not self.GeminiProcessor:
            print("‚ùå GeminiProcessor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä GeminiProcessor
            self.gemini_processor = self.GeminiProcessor()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            if self.model_name:
                self.gemini_processor.model_id = self.model_name
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á, –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
            if self.api_key:
                self.gemini_processor.api_key = self.api_key
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
            success = self.gemini_processor.load_model()
            if success:
                self.is_loaded = True
                self.client = self.gemini_processor
                print(f"‚úÖ Google Gemini –º–æ–¥–µ–ª—å {self.model_name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å {self.model_name}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Google Gemini: {e}")
            return False
    
    def generate_response(self, prompt: str, image_path: str = None, image_context: str = "") -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Google Gemini.
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            image_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            str: –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
        """
        if not self.is_loaded or not self.gemini_processor:
            raise RuntimeError("–ú–æ–¥–µ–ª—å Google Gemini –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        try:
            if image_path:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ process –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                result = self.gemini_processor.process(image_path)
                if result:
                    return json.dumps(result, ensure_ascii=False, indent=2)
                else:
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
            else:
                # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
                try:
                    import google.generativeai as genai
                    response = self.gemini_processor.model.generate_content(prompt)
                    return response.text
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
                    return f"–û—à–∏–±–∫–∞: {str(e)}"
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ generate_response: {e}")
            return f"–û—à–∏–±–∫–∞: {str(e)}"
    
    def process_image(self, image_path: str, ocr_lang=None, custom_prompt=None) -> Optional[Dict]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å–∞.
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            ocr_lang: –Ø–∑—ã–∫ OCR (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Gemini)
            custom_prompt: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
            
        Returns:
            Optional[Dict]: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None
        """
        if not self.is_loaded or not self.gemini_processor:
            print("‚ùå –ú–æ–¥–µ–ª—å Google Gemini –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return None
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ process_image –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ GeminiProcessor
            result = self.gemini_processor.process_image(image_path, ocr_lang, custom_prompt)
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None
    
    def extract_invoice_data(self, image_path: str, prompt: str = None) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω–≤–æ–π—Å–∞.
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–Ω–≤–æ–π—Å–∞
            prompt: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
            
        Returns:
            Dict[str, Any]: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        if not self.is_loaded:
            raise RuntimeError("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        result = self.process_image(image_path, custom_prompt=prompt)
        return result if result else {}
    
    def get_model_info(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏.
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        """
        info = super().get_model_info()
        info.update({
            "provider": "Google Gemini",
            "supports_vision": True,
            "supports_pdf": True,
            "max_tokens": 30720,
            "context_window": 1048576,
            "input_cost_per_1k": 0.075,  # USD per 1K tokens
            "output_cost_per_1k": 0.30   # USD per 1K tokens
        })
        
        if self.gemini_processor:
            info["processor_loaded"] = True
            info["temp_files_count"] = len(getattr(self.gemini_processor, 'temp_files', []))
        
        return info
    
    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø–ª–∞–≥–∏–Ω–∞."""
        if self.gemini_processor:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if hasattr(self.gemini_processor, 'cleanup_temp_files'):
                self.gemini_processor.cleanup_temp_files()
        
        self.is_loaded = False
        self.client = None
        self.gemini_processor = None
        print("üßπ –†–µ—Å—É—Ä—Å—ã –ø–ª–∞–≥–∏–Ω–∞ Google Gemini –æ—á–∏—â–µ–Ω—ã")
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        try:
            self.cleanup()
        except (AttributeError, RuntimeError, Exception) as e:
            # –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ - –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass 