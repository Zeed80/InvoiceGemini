"""
–ü–ª–∞–≥–∏–Ω –¥–ª—è Anthropic API (Claude).
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Claude 3.5 Sonnet, Haiku –∏ –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
"""
import os
import json
import base64
from datetime import datetime
from typing import Dict, Optional, Any
from pathlib import Path
from PIL import Image

from ..base_llm_plugin import BaseLLMPlugin

class AnthropicPlugin(BaseLLMPlugin):
    """
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è Anthropic Claude API.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Claude 3.5 –∏ –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    """
    
    def __init__(self, model_name: str = None, api_key: str = None, **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ Anthropic.
        
        Args:
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Claude
            api_key: API –∫–ª—é—á Anthropic
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        super().__init__("anthropic", model_name, api_key, **kwargs)
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Anthropic
        self.max_image_size = kwargs.get('max_image_size', 5 * 1024 * 1024)  # 5MB
        self.max_images = kwargs.get('max_images', 20)  # –î–æ 20 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ –∑–∞–ø—Ä–æ—Å
        
        print(f"ü§ñ –°–æ–∑–¥–∞–Ω –ø–ª–∞–≥–∏–Ω Anthropic Claude –¥–ª—è –º–æ–¥–µ–ª–∏ {self.model_name}")
    
    def load_model(self) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Anthropic.
        
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            import anthropic
            
            if not self.api_key:
                print("‚ùå API –∫–ª—é—á Anthropic –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
                return False
            
            self.client = anthropic.Anthropic(api_key=self.api_key)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            try:
                response = self.client.messages.create(
                    model=self.model_name,
                    max_tokens=1,
                    messages=[{"role": "user", "content": "test"}]
                )
                
                self.is_loaded = True
                print(f"‚úÖ Anthropic –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é {self.model_name}")
                return True
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
                return False
                
        except ImportError:
            print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ anthropic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install anthropic")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Anthropic: {e}")
            return False
    
    def _encode_image_base64(self, image_path: str) -> tuple:
        """
        –ö–æ–¥–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 –¥–ª—è Anthropic API.
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            
        Returns:
            tuple: (base64_string, media_type)
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image = Image.open(image_path)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ —Å–∂–∏–º–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            max_size = (1568, 1568)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è Claude
            if image.size[0] > max_size[0] or image.size[1] > max_size[1]:
                image.thumbnail(max_size, Image.Resampling.LANCZOS)
                print(f"üìè –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∂–∞—Ç–æ –¥–æ {image.size}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –∏ –∫–æ–¥–∏—Ä—É–µ–º
            import io
            buffered = io.BytesIO()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if image_path.lower().endswith('.png'):
                image.save(buffered, format="PNG")
                media_type = "image/png"
            else:
                image.save(buffered, format="JPEG", quality=85)
                media_type = "image/jpeg"
            
            img_bytes = buffered.getvalue()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if len(img_bytes) > self.max_image_size:
                # –°–∂–∏–º–∞–µ–º –µ—â–µ –±–æ–ª—å—à–µ
                buffered = io.BytesIO()
                if media_type == "image/png":
                    image.save(buffered, format="JPEG", quality=70)
                    media_type = "image/jpeg"
                else:
                    image.save(buffered, format="JPEG", quality=60)
                img_bytes = buffered.getvalue()
                print(f"üì¶ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–∂–∞—Ç–æ –¥–æ {len(img_bytes)} –±–∞–π—Ç")
            
            encoded = base64.b64encode(img_bytes).decode('utf-8')
            return encoded, media_type
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            raise
    
    def generate_response(self, prompt: str, image_path: str = None, image_context: str = "") -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Claude.
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            image_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            str: –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
        """
        if not self.is_loaded:
            raise RuntimeError("–ú–æ–¥–µ–ª—å Anthropic –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            content = []
            
            if image_path and os.path.exists(image_path):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                vision_models = ["claude-3", "claude-3.5"]
                if not any(vm in self.model_name for vm in vision_models):
                    return f"–ú–æ–¥–µ–ª—å {self.model_name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
                
                # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                base64_image, media_type = self._encode_image_base64(image_path)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç
                content.append({
                    "type": "image",
                    "source": {
                        "type": "base64",
                        "media_type": media_type,
                        "data": base64_image
                    }
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
            content.append({
                "type": "text",
                "text": prompt
            })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = self.client.messages.create(
                model=self.model_name,
                max_tokens=self.generation_config.get("max_tokens", 4096),
                temperature=self.generation_config.get("temperature", 0.1),
                top_p=self.generation_config.get("top_p", 0.9),
                messages=[{
                    "role": "user",
                    "content": content
                }]
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            if response.content and len(response.content) > 0:
                return response.content[0].text
            else:
                return "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏"
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ Anthropic: {e}")
            return f"–û—à–∏–±–∫–∞: {str(e)}"
    
    def process_image(self, image_path: str, ocr_lang=None, custom_prompt=None) -> Optional[Dict]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å–∞.
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            ocr_lang: –Ø–∑—ã–∫ OCR (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–º–ø—Ç–µ)
            custom_prompt: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
            
        Returns:
            Optional[Dict]: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None
        """
        if not self.is_loaded:
            print("‚ùå –ú–æ–¥–µ–ª—å Anthropic –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return None
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π
            if custom_prompt:
                prompt = custom_prompt
            else:
                prompt = self.create_invoice_prompt(custom_prompt, True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if ocr_lang:
                lang_info = f"\n–Ø–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {ocr_lang}"
                prompt += lang_info
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Claude
            claude_instruction = """
            
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–æ—á–Ω–æ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ.
            –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º –∫ –¥–µ—Ç–∞–ª—è–º.
            """
            prompt += claude_instruction
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = self.generate_response(prompt, image_path)
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                json_match = None
                if '```json' in response:
                    json_start = response.find('```json') + 7
                    json_end = response.find('```', json_start)
                    json_match = response[json_start:json_end].strip()
                elif '{' in response and '}' in response:
                    json_start = response.find('{')
                    json_end = response.rfind('}') + 1
                    json_match = response[json_start:json_end]
                
                if json_match:
                    result = json.loads(json_match)
                    return self._normalize_invoice_data(result)
                else:
                    print("‚ùå JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ Claude")
                    return None
                    
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                print(f"–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {response}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None
    
    def extract_invoice_data(self, image_path: str, prompt: str = None) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω–≤–æ–π—Å–∞.
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–Ω–≤–æ–π—Å–∞
            prompt: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
            
        Returns:
            Dict[str, Any]: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        if not self.is_loaded:
            raise RuntimeError("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        result = self.process_image(image_path, custom_prompt=prompt)
        return result if result else {}
    
    def get_model_info(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏.
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        """
        info = super().get_model_info()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö Claude
        model_specs = {
            "claude-3-5-sonnet": {
                "max_tokens": 8192,
                "context_window": 200000,
                "supports_vision": True,
                "input_cost_per_1k": 0.003,
                "output_cost_per_1k": 0.015
            },
            "claude-3-5-haiku": {
                "max_tokens": 8192,
                "context_window": 200000,
                "supports_vision": True,
                "input_cost_per_1k": 0.0008,
                "output_cost_per_1k": 0.004
            },
            "claude-3-opus": {
                "max_tokens": 4096,
                "context_window": 200000,
                "supports_vision": True,
                "input_cost_per_1k": 0.015,
                "output_cost_per_1k": 0.075
            },
            "claude-3-sonnet": {
                "max_tokens": 4096,
                "context_window": 200000,
                "supports_vision": True,
                "input_cost_per_1k": 0.003,
                "output_cost_per_1k": 0.015
            },
            "claude-3-haiku": {
                "max_tokens": 4096,
                "context_window": 200000,
                "supports_vision": True,
                "input_cost_per_1k": 0.00025,
                "output_cost_per_1k": 0.00125
            }
        }
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
        spec = None
        for model_key, model_spec in model_specs.items():
            if model_key in self.model_name:
                spec = model_spec
                break
        
        if spec:
            info.update(spec)
        
        info.update({
            "provider": "Anthropic Claude",
            "supports_pdf": False,  # –¢—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            "max_image_size": self.max_image_size,
            "max_images": self.max_images,
            "supports_system_prompt": True
        })
        
        return info
    
    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø–ª–∞–≥–∏–Ω–∞."""
        self.is_loaded = False
        self.client = None
        print("üßπ –†–µ—Å—É—Ä—Å—ã –ø–ª–∞–≥–∏–Ω–∞ Anthropic –æ—á–∏—â–µ–Ω—ã")
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        try:
            self.cleanup()
        except (AttributeError, RuntimeError, Exception) as e:
            # –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ - –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass 