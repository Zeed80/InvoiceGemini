"""
–î–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞–º–∏ –¥–ª—è InvoiceGemini
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import os
import json
from datetime import datetime
from typing import Dict, List, Optional
import threading

from PyQt6.QtWidgets import (    QDialog, QVBoxLayout, QHBoxLayout, QTabWidget, QWidget, QGroupBox,    QLabel, QPushButton, QComboBox, QProgressBar, QTextEdit, QTableWidget,    QTableWidgetItem, QFileDialog, QMessageBox, QSplitter, QFrame,    QScrollArea, QGridLayout, QSpinBox, QDoubleSpinBox, QCheckBox,    QLineEdit, QFormLayout, QHeaderView, QApplication, QSlider, QInputDialog)

# –§–ê–ó–ê 2: –ò–º–ø–æ—Ä—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from .performance_optimized_widgets import OptimizedTableWidget
from PyQt6.QtCore import Qt, pyqtSignal, QThread, QTimer, QPropertyAnimation, QEasingCurve
from PyQt6.QtGui import QPixmap, QIcon, QFont, QPalette, QMovie

from ..plugins.unified_plugin_manager import get_unified_plugin_manager
from ..plugins.llm_trainer import LLMTrainer, TrainingMetrics

class PluginsDialog(QDialog):
    """
    –ì–ª–∞–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞–º–∏
    """
    
    def __init__(self, parent=None, model_manager=None):
        super().__init__(parent)
        self.parent_window = parent
        self.model_manager = model_manager
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤
        self.plugin_manager = get_unified_plugin_manager()
        
        # –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä
        self.current_trainer = None
        self.training_thread = None
        
        self.setup_ui()
        self.load_plugin_info()
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_timer = QTimer()
        self.progress_timer.timeout.connect(self.update_training_progress)
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("üîå " + self.tr("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ LLM –ø–ª–∞–≥–∏–Ω–∞–º–∏ - InvoiceGemini"))
        self.setMinimumSize(1000, 700)
        self.resize(1200, 800)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        header = self.create_header()
        main_layout.addWidget(header)
        
        # –¢–∞–±—ã
        self.tab_widget = QTabWidget()
        self.tab_widget.setTabPosition(QTabWidget.TabPosition.North)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.create_plugins_tab()        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞–º–∏
        self.create_training_tab()       # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        self.create_dataset_tab()        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
        self.create_monitoring_tab()     # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        
        main_layout.addWidget(self.tab_widget)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        buttons_layout.addStretch()
        
        self.refresh_button = QPushButton("üîÑ " + self.tr("–û–±–Ω–æ–≤–∏—Ç—å"))
        self.refresh_button.clicked.connect(self.refresh_all)
        
        self.close_button = QPushButton(self.tr("–ó–∞–∫—Ä—ã—Ç—å"))
        self.close_button.clicked.connect(self.accept)
        
        buttons_layout.addWidget(self.refresh_button)
        buttons_layout.addWidget(self.close_button)
        main_layout.addLayout(buttons_layout)
    
    def create_header(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        header_widget = QWidget()
        header_layout = QVBoxLayout(header_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("üöÄ " + self.tr("–°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–≥–∏–Ω–æ–≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö LLM"))
        title_font = QFont()
        title_font.setPointSize(16)
        title_font.setBold(True)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle_label = QLabel(self.tr("–û–±—É—á–∞–π—Ç–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥–µ–ª–∏ Llama, Mistral, CodeLlama –ª–æ–∫–∞–ª—å–Ω–æ"))
        subtitle_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        subtitle_label.setStyleSheet("color: #666; font-size: 12px;")
        
        header_layout.addWidget(title_label)
        header_layout.addWidget(subtitle_label)
        
        return header_widget
    
    def create_plugins_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞–º–∏"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
        stats_group = QGroupBox("üìä " + self.tr("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤"))
        stats_layout = QGridLayout(stats_group)
        
        self.total_plugins_label = QLabel("0")
        self.loaded_plugins_label = QLabel("0")
        self.available_plugins_label = QLabel("0")
        
        stats_layout.addWidget(QLabel(self.tr("–í—Å–µ–≥–æ –ø–ª–∞–≥–∏–Ω–æ–≤:")), 0, 0)
        stats_layout.addWidget(self.total_plugins_label, 0, 1)
        stats_layout.addWidget(QLabel(self.tr("–ó–∞–≥—Ä—É–∂–µ–Ω–æ:")), 0, 2)
        stats_layout.addWidget(self.loaded_plugins_label, 0, 3)
        stats_layout.addWidget(QLabel(self.tr("–î–æ—Å—Ç—É–ø–Ω–æ:")), 0, 4)
        stats_layout.addWidget(self.available_plugins_label, 0, 5)
        
        layout.addWidget(stats_group)
        
        # –°–ø–∏—Å–æ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤
        plugins_group = QGroupBox("üîå " + self.tr("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã"))
        plugins_layout = QVBoxLayout(plugins_group)
        
        # –§–ê–ó–ê 2: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
        self.plugins_table = OptimizedTableWidget()
        self.plugins_table.setColumnCount(6)
        self.plugins_table.setHorizontalHeaderLabels([
            self.tr("–ù–∞–∑–≤–∞–Ω–∏–µ"), self.tr("–¢–∏–ø"), self.tr("–°—Ç–∞—Ç—É—Å"), self.tr("–ü–∞–º—è—Ç—å"), self.tr("–î–µ–π—Å—Ç–≤–∏—è"), self.tr("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        header = self.plugins_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(4, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(5, QHeaderView.ResizeMode.ResizeToContents)
        
        plugins_layout.addWidget(self.plugins_table)
        layout.addWidget(plugins_group)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
        install_group = QGroupBox("üì¶ " + self.tr("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤"))
        install_layout = QHBoxLayout(install_group)
        
        install_button = QPushButton("üìÅ " + self.tr("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞"))
        install_button.clicked.connect(self.install_plugin_from_file)
        
        create_template_button = QPushButton("üìù " + self.tr("–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω"))
        create_template_button.clicked.connect(self.create_plugin_template)
        
        install_layout.addWidget(install_button)
        install_layout.addWidget(create_template_button)
        install_layout.addStretch()
        
        layout.addWidget(install_group)
        
        self.tab_widget.addTab(tab, "üîå " + self.tr("–ü–ª–∞–≥–∏–Ω—ã"))
    
    def create_training_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # –í—ã–±–æ—Ä –ø–ª–∞–≥–∏–Ω–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        plugin_group = QGroupBox("üéØ " + self.tr("–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"))
        plugin_layout = QFormLayout(plugin_group)
        
        self.training_plugin_combo = QComboBox()
        self.training_plugin_combo.currentTextChanged.connect(self.on_training_plugin_changed)
        plugin_layout.addRow(self.tr("–ü–ª–∞–≥–∏–Ω:"), self.training_plugin_combo)
        
        self.plugin_info_label = QLabel(self.tr("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–≥–∏–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"))
        self.plugin_info_label.setWordWrap(True)
        plugin_layout.addRow(self.tr("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"), self.plugin_info_label)
        
        layout.addWidget(plugin_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è
        settings_group = QGroupBox("‚öôÔ∏è " + self.tr("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è"))
        settings_layout = QFormLayout(settings_group)
        
        self.epochs_spin = QSpinBox()
        self.epochs_spin.setRange(1, 50)
        self.epochs_spin.setValue(3)
        settings_layout.addRow(self.tr("–≠–ø–æ—Ö–∏:"), self.epochs_spin)
        
        self.batch_size_spin = QSpinBox()
        self.batch_size_spin.setRange(1, 32)
        self.batch_size_spin.setValue(4)
        settings_layout.addRow(self.tr("–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞:"), self.batch_size_spin)
        
        self.learning_rate_edit = QLineEdit("2e-4")
        settings_layout.addRow(self.tr("Learning rate:"), self.learning_rate_edit)
        
        self.lora_rank_spin = QSpinBox()
        self.lora_rank_spin.setRange(4, 128)
        self.lora_rank_spin.setValue(16)
        settings_layout.addRow(self.tr("LoRA Rank:"), self.lora_rank_spin)
        
        layout.addWidget(settings_group)
        
        # –í—ã–±–æ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞
        dataset_group = QGroupBox("üìä " + self.tr("–î–∞—Ç–∞—Å–µ—Ç"))
        dataset_layout = QVBoxLayout(dataset_group)
        
        dataset_select_layout = QHBoxLayout()
        self.dataset_path_edit = QLineEdit()
        self.dataset_path_edit.setPlaceholderText(self.tr("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è..."))
        
        select_dataset_button = QPushButton("üìÅ " + self.tr("–í—ã–±—Ä–∞—Ç—å"))
        select_dataset_button.clicked.connect(self.select_training_dataset)
        
        dataset_select_layout.addWidget(self.dataset_path_edit)
        dataset_select_layout.addWidget(select_dataset_button)
        dataset_layout.addLayout(dataset_select_layout)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–∞—Å–µ—Ç–µ
        self.dataset_info_label = QLabel(self.tr("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–∞—Å–µ—Ç–µ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞"))
        self.dataset_info_label.setWordWrap(True)
        dataset_layout.addWidget(self.dataset_info_label)
        
        layout.addWidget(dataset_group)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏–µ–º
        control_group = QGroupBox("üöÄ " + self.tr("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏–µ–º"))
        control_layout = QVBoxLayout(control_group)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        self.start_training_button = QPushButton("üöÄ " + self.tr("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ"))
        self.start_training_button.clicked.connect(self.start_training)
        
        self.stop_training_button = QPushButton("üõë " + self.tr("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"))
        self.stop_training_button.clicked.connect(self.stop_training)
        self.stop_training_button.setEnabled(False)
        
        buttons_layout.addWidget(self.start_training_button)
        buttons_layout.addWidget(self.stop_training_button)
        buttons_layout.addStretch()
        control_layout.addLayout(buttons_layout)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.training_progress = QProgressBar()
        self.training_progress.setVisible(False)
        control_layout.addWidget(self.training_progress)
        
        self.training_status_label = QLabel(self.tr("–ì–æ—Ç–æ–≤ –∫ –æ–±—É—á–µ–Ω–∏—é"))
        control_layout.addWidget(self.training_status_label)
        
        layout.addWidget(control_group)
        
        self.tab_widget.addTab(tab, "üéì " + self.tr("–û–±—É—á–µ–Ω–∏–µ"))
    
    def create_dataset_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = QLabel(
            self.tr("üí° –≠—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è LLM –º–æ–¥–µ–ª–µ–π.\n") +
            self.tr("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Gemini API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."))
        info_label.setWordWrap(True)
        info_label.setStyleSheet("background: #e3f2fd; padding: 10px; border-radius: 5px; color: #1976d2;")
        layout.addWidget(info_label)
        
        # –í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_group = QGroupBox("üìÅ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        images_layout = QVBoxLayout(images_group)
        
        select_images_layout = QHBoxLayout()
        self.images_folder_edit = QLineEdit()
        self.images_folder_edit.setPlaceholderText(self.tr("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Å—á–µ—Ç–æ–≤..."))
        
        select_folder_button = QPushButton("üìÅ " + self.tr("–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É"))
        select_folder_button.clicked.connect(self.select_images_folder)
        
        select_images_layout.addWidget(self.images_folder_edit)
        select_images_layout.addWidget(select_folder_button)
        images_layout.addLayout(select_images_layout)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        self.images_info_label = QLabel(self.tr("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏"))
        images_layout.addWidget(self.images_info_label)
        
        layout.addWidget(images_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generation_group = QGroupBox("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        generation_layout = QFormLayout(generation_group)
        
        self.output_dataset_edit = QLineEdit()
        self.output_dataset_edit.setPlaceholderText(self.tr("–ò–º—è –¥–∞—Ç–∞—Å–µ—Ç–∞..."))
        generation_layout.addRow(self.tr("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞:"), self.output_dataset_edit)
        
        self.use_gemini_checkbox = QCheckBox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Gemini –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π")
        self.use_gemini_checkbox.setChecked(True)
        generation_layout.addRow("", self.use_gemini_checkbox)
        
        layout.addWidget(generation_group)
        
        # –ü—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        process_group = QGroupBox("üîÑ –ü—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        process_layout = QVBoxLayout(process_group)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        start_generation_layout = QHBoxLayout()
        self.start_generation_button = QPushButton("üöÄ " + self.tr("–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞—Ç–∞—Å–µ—Ç–∞"))
        self.start_generation_button.clicked.connect(self.start_dataset_generation)
        
        self.stop_generation_button = QPushButton("üõë " + self.tr("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"))
        self.stop_generation_button.clicked.connect(self.stop_dataset_generation)
        self.stop_generation_button.setEnabled(False)
        
        start_generation_layout.addWidget(self.start_generation_button)
        start_generation_layout.addWidget(self.stop_generation_button)
        start_generation_layout.addStretch()
        process_layout.addLayout(start_generation_layout)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.generation_progress = QProgressBar()
        self.generation_progress.setVisible(False)
        process_layout.addWidget(self.generation_progress)
        
        # –õ–æ–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞
        self.generation_log = QTextEdit()
        self.generation_log.setMaximumHeight(200)
        self.generation_log.setReadOnly(True)
        process_layout.addWidget(self.generation_log)
        
        layout.addWidget(process_group)
        
        self.tab_widget.addTab(tab, "üìä " + self.tr("–î–∞—Ç–∞—Å–µ—Ç"))
    
    def create_monitoring_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # –¢–µ–∫—É—â–µ–µ –æ–±—É—á–µ–Ω–∏–µ
        current_group = QGroupBox("üìà –¢–µ–∫—É—â–µ–µ –æ–±—É—á–µ–Ω–∏–µ")
        current_layout = QGridLayout(current_group)
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        self.current_epoch_label = QLabel("0")
        self.current_step_label = QLabel("0")
        self.current_loss_label = QLabel("0.000")
        self.current_lr_label = QLabel("0.0000")
        
        current_layout.addWidget(QLabel(self.tr("–≠–ø–æ—Ö–∞:")), 0, 0)
        current_layout.addWidget(self.current_epoch_label, 0, 1)
        current_layout.addWidget(QLabel(self.tr("–®–∞–≥:")), 0, 2)
        current_layout.addWidget(self.current_step_label, 0, 3)
        
        current_layout.addWidget(QLabel(self.tr("Loss:")), 1, 0)
        current_layout.addWidget(self.current_loss_label, 1, 1)
        current_layout.addWidget(QLabel(self.tr("Learning Rate:")), 1, 2)
        current_layout.addWidget(self.current_lr_label, 1, 3)
        
        layout.addWidget(current_group)
        
        # –ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è
        history_group = QGroupBox("üìã –ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è")
        history_layout = QVBoxLayout(history_group)
        
        # –§–ê–ó–ê 2: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏
        self.history_table = OptimizedTableWidget()
        self.history_table.setColumnCount(5)
        self.history_table.setHorizontalHeaderLabels([
            self.tr("–≠–ø–æ—Ö–∞"), self.tr("–®–∞–≥"), self.tr("Loss"), self.tr("Eval Loss"), self.tr("–í—Ä–µ–º—è")
        ])
        
        history_layout.addWidget(self.history_table)
        layout.addWidget(history_group)
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        system_group = QGroupBox("üíª –°–∏—Å—Ç–µ–º–∞")
        system_layout = QGridLayout(system_group)
        
        self.gpu_memory_label = QLabel("–ó–∞–≥—Ä—É–∑–∫–∞...")
        self.gpu_utilization_label = QLabel("–ó–∞–≥—Ä—É–∑–∫–∞...")
        self.cpu_usage_label = QLabel("–ó–∞–≥—Ä—É–∑–∫–∞...")
        
        system_layout.addWidget(QLabel(self.tr("GPU –ø–∞–º—è—Ç—å:")), 0, 0)
        system_layout.addWidget(self.gpu_memory_label, 0, 1)
        system_layout.addWidget(QLabel(self.tr("GPU –∑–∞–≥—Ä—É–∑–∫–∞:")), 0, 2)
        system_layout.addWidget(self.gpu_utilization_label, 0, 3)
        
        system_layout.addWidget(QLabel(self.tr("CPU:")), 1, 0)
        system_layout.addWidget(self.cpu_usage_label, 1, 1)
        
        layout.addWidget(system_group)
        
        self.tab_widget.addTab(tab, "üìä " + self.tr("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"))
    
    def load_plugin_info(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–≥–∏–Ω–∞—Ö"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.plugin_manager.get_plugin_statistics()
        self.total_plugins_label.setText(str(stats["total_plugins"]))
        self.loaded_plugins_label.setText(str(stats["loaded_instances"]))
        self.available_plugins_label.setText(str(len(stats["available_plugins"])))
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–ª–∞–≥–∏–Ω–æ–≤
        self.populate_plugins_table()
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        self.populate_training_combo()
    
    def populate_plugins_table(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø–ª–∞–≥–∏–Ω–æ–≤"""
        available_plugins = self.plugin_manager.get_available_plugins()
        self.plugins_table.setRowCount(len(available_plugins))
        
        for i, plugin_id in enumerate(available_plugins):
            plugin_info = self.plugin_manager.get_plugin_info(plugin_id)
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            self.plugins_table.setItem(i, 0, QTableWidgetItem(plugin_info["name"]))
            
            # –¢–∏–ø
            self.plugins_table.setItem(i, 1, QTableWidgetItem(plugin_id.title()))
            
            # –°—Ç–∞—Ç—É—Å
            status = "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω" if plugin_info["is_loaded"] else "‚ö™ –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
            self.plugins_table.setItem(i, 2, QTableWidgetItem(status))
            
            # –û—Ü–µ–Ω–∫–∞ –ø–∞–º—è—Ç–∏
            instance = self.plugin_manager.get_plugin_instance(plugin_id)
            if instance:
                memory_req = instance.get_model_info().get("memory_requirements", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            else:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                temp_instance = self.plugin_manager.create_plugin_instance(plugin_id)
                if temp_instance:
                    memory_req = temp_instance.get_model_info().get("memory_requirements", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    self.plugin_manager.remove_plugin_instance(plugin_id)
                else:
                    memory_req = "–û—à–∏–±–∫–∞"
            
            self.plugins_table.setItem(i, 3, QTableWidgetItem(memory_req))
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            actions_widget = QWidget()
            actions_layout = QHBoxLayout(actions_widget)
            actions_layout.setContentsMargins(5, 2, 5, 2)
            
            if plugin_info["is_loaded"]:
                unload_btn = QPushButton("–í—ã–≥—Ä—É–∑–∏—Ç—å")
                unload_btn.clicked.connect(lambda checked, pid=plugin_id: self.unload_plugin(pid))
                actions_layout.addWidget(unload_btn)
            else:
                load_btn = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å")
                load_btn.clicked.connect(lambda checked, pid=plugin_id: self.load_plugin(pid))
                actions_layout.addWidget(load_btn)
            
            self.plugins_table.setCellWidget(i, 4, actions_widget)
            
            # –ö–Ω–æ–ø–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            info_btn = QPushButton("‚ÑπÔ∏è")
            info_btn.clicked.connect(lambda checked, pid=plugin_id: self.show_plugin_info(pid))
            self.plugins_table.setCellWidget(i, 5, info_btn)
    
    def populate_training_combo(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞–≥–∏–Ω–∞ –æ–±—É—á–µ–Ω–∏—è"""
        self.training_plugin_combo.clear()
        available_plugins = self.plugin_manager.get_available_plugins()
        
        for plugin_id in available_plugins:
            self.training_plugin_combo.addItem(f"{plugin_id.title()} Plugin", plugin_id)
    
    def on_training_plugin_changed(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –ø–ª–∞–≥–∏–Ω–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        plugin_id = self.training_plugin_combo.currentData()
        if plugin_id:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            instance = self.plugin_manager.get_plugin_instance(plugin_id)
            if not instance:
                instance = self.plugin_manager.create_plugin_instance(plugin_id)
            
            if instance:
                info = instance.get_model_info()
                config = instance.get_training_config()
                
                info_text = f"""
                <b>–ú–æ–¥–µ–ª—å:</b> {info.get('name', 'Unknown')}<br>
                <b>–°–µ–º–µ–π—Å—Ç–≤–æ:</b> {info.get('model_family', 'Unknown')}<br>
                <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> {info.get('device', 'Unknown')}<br>
                <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏:</b> {info.get('memory_requirements', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}<br>
                <b>LoRA –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> {'–î–∞' if config.get('supports_lora') else '–ù–µ—Ç'}<br>
                <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π batch size:</b> {config.get('training_args', {}).get('batch_size', 4)}
                """
                
                self.plugin_info_label.setText(info_text)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                training_args = config.get('training_args', {})
                self.batch_size_spin.setValue(training_args.get('batch_size', 4))
                self.epochs_spin.setValue(training_args.get('num_epochs', 3))
                self.lora_rank_spin.setValue(config.get('default_lora_rank', 16))
    
    def load_plugin(self, plugin_id: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–ª–∞–≥–∏–Ω"""
        try:
            instance = self.plugin_manager.create_plugin_instance(plugin_id)
            if instance:
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ü–ª–∞–≥–∏–Ω {plugin_id} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                self.populate_plugins_table()
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–≥–∏–Ω {plugin_id}")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–≥–∏–Ω–∞: {e}")
    
    def unload_plugin(self, plugin_id: str):
        """–í—ã–≥—Ä—É–∂–∞–µ—Ç –ø–ª–∞–≥–∏–Ω"""
        try:
            if self.plugin_manager.remove_plugin_instance(plugin_id):
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ü–ª–∞–≥–∏–Ω {plugin_id} –≤—ã–≥—Ä—É–∂–µ–Ω")
                self.populate_plugins_table()
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–≥–∏–Ω {plugin_id}")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –ø–ª–∞–≥–∏–Ω–∞: {e}")
    
    def show_plugin_info(self, plugin_id: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–≥–∏–Ω–µ"""
        plugin_info = self.plugin_manager.get_plugin_info(plugin_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        instance = self.plugin_manager.get_plugin_instance(plugin_id)
        if not instance:
            instance = self.plugin_manager.create_plugin_instance(plugin_id)
            temp_created = True
        else:
            temp_created = False
        
        if instance:
            model_info = instance.get_model_info()
            training_config = instance.get_training_config()
            
            info_text = f"""
            <h3>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–≥–∏–Ω–µ: {plugin_info['name']}</h3>
            
            <h4>üîß –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</h4>
            <ul>
            <li><b>ID:</b> {plugin_id}</li>
            <li><b>–ú–æ–¥—É–ª—å:</b> {plugin_info['module']}</li>
            <li><b>–°–µ–º–µ–π—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏:</b> {model_info.get('model_family', 'Unknown')}</li>
            <li><b>–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏:</b> {model_info.get('model_path', 'Unknown')}</li>
            <li><b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> {model_info.get('device', 'Unknown')}</li>
            <li><b>–ó–∞–≥—Ä—É–∂–µ–Ω–∞:</b> {'–î–∞' if model_info.get('is_loaded') else '–ù–µ—Ç'}</li>
            </ul>
            
            <h4>üíæ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ—Å—É—Ä—Å–∞–º:</h4>
            <ul>
            <li><b>–ü–∞–º—è—Ç—å:</b> {model_info.get('memory_requirements', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</li>
            <li><b>PyTorch –¥–æ—Å—Ç—É–ø–µ–Ω:</b> {'–î–∞' if model_info.get('torch_available') else '–ù–µ—Ç'}</li>
            </ul>
            
            <h4>üéì –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è:</h4>
            <ul>
            <li><b>LoRA –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> {'–î–∞' if training_config.get('supports_lora') else '–ù–µ—Ç'}</li>
            <li><b>QLoRA –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> {'–î–∞' if training_config.get('supports_qlora') else '–ù–µ—Ç'}</li>
            <li><b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π LoRA rank:</b> {training_config.get('default_lora_rank', 16)}</li>
            <li><b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b> {training_config.get('max_sequence_length', 2048)}</li>
            </ul>
            
            <h4>‚öôÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è:</h4>
            <ul>
            <li><b>Batch size:</b> {training_config.get('training_args', {}).get('batch_size', 4)}</li>
            <li><b>Learning rate:</b> {training_config.get('training_args', {}).get('learning_rate', '2e-4')}</li>
            <li><b>–≠–ø–æ—Ö–∏:</b> {training_config.get('training_args', {}).get('num_epochs', 3)}</li>
            </ul>
            """
            
            if temp_created:
                self.plugin_manager.remove_plugin_instance(plugin_id)
        else:
            info_text = f"<h3>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–≥–∏–Ω–µ {plugin_id}</h3>"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        info_dialog = QDialog(self)
        info_dialog.setWindowTitle(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–≥–∏–Ω–µ: {plugin_info['name']}")
        info_dialog.setMinimumSize(600, 500)
        
        layout = QVBoxLayout(info_dialog)
        
        info_label = QLabel(info_text)
        info_label.setWordWrap(True)
        info_label.setOpenExternalLinks(True)
        
        scroll_area = QScrollArea()
        scroll_area.setWidget(info_label)
        scroll_area.setWidgetResizable(True)
        
        layout.addWidget(scroll_area)
        
        close_button = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_button.clicked.connect(info_dialog.accept)
        layout.addWidget(close_button)
        
        info_dialog.exec()
    
    def install_plugin_from_file(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–≥–∏–Ω –∏–∑ —Ñ–∞–π–ª–∞"""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            self.tr("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø–ª–∞–≥–∏–Ω–∞"),
            "",
            self.tr("Python —Ñ–∞–π–ª—ã (*.py);;–í—Å–µ —Ñ–∞–π–ª—ã (*)")
        )
        
        if file_path:
            try:
                if self.plugin_manager.install_plugin_from_file(file_path):
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", self.tr("–ü–ª–∞–≥–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!"))
                    self.refresh_all()
                else:
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", self.tr("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–≥–∏–Ω"))
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞: {e}")
    
    def create_plugin_template(self):
        """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø–ª–∞–≥–∏–Ω–∞"""
        plugin_name, ok = QInputDialog.getText(
            self, 
            self.tr("–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–ª–∞–≥–∏–Ω–∞"),
            self.tr("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞:")
        )
        
        if ok and plugin_name:
            try:
                template_path = self.plugin_manager.create_plugin_template(plugin_name)
                QMessageBox.information(
                    self, 
                    self.tr("–£—Å–ø–µ—Ö"), 
                    self.tr("–®–∞–±–ª–æ–Ω –ø–ª–∞–≥–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω:\n") + template_path + "\n\n" +
                    self.tr("–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –∏ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏."))
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
    
    def select_training_dataset(self):
        """–í—ã–±–æ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            self.tr("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"),
            "",
            self.tr("JSON —Ñ–∞–π–ª—ã (*.json);;–í—Å–µ —Ñ–∞–π–ª—ã (*)")
        )
        
        if file_path:
            self.dataset_path_edit.setText(file_path)
            self.analyze_dataset(file_path)
    
    def analyze_dataset(self, dataset_path: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç"""
        try:
            with open(dataset_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            if isinstance(data, list):
                count = len(data)
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                if data and isinstance(data[0], dict):
                    keys = list(data[0].keys())
                    info_text = f"""
                    <b>–î–∞—Ç–∞—Å–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:</b><br>
                    üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {count}<br>
                    üîë –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {', '.join(keys)}<br>
                    üìà –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —ç–ø–æ—Ö–∏: {min(10, max(3, 20 // (count // 100 + 1)))}<br>
                    ‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {self.estimate_training_time(count)} –º–∏–Ω—É—Ç
                    """
                else:
                    info_text = f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞"
            else:
                info_text = f"‚ùå –î–∞—Ç–∞—Å–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏–º–µ—Ä–æ–≤"
            
            self.dataset_info_label.setText(info_text)
            
        except Exception as e:
            self.dataset_info_label.setText(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
    
    def estimate_training_time(self, dataset_size: int) -> int:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö"""
        plugin_id = self.training_plugin_combo.currentData()
        if plugin_id and "70b" in plugin_id:
            return dataset_size * 2  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –ø—Ä–∏–º–µ—Ä –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π
        elif plugin_id and "13b" in plugin_id:
            return dataset_size // 2  # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø—Ä–∏–º–µ—Ä
        else:
            return dataset_size // 5  # 12 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø—Ä–∏–º–µ—Ä –¥–ª—è 7B –º–æ–¥–µ–ª–µ–π
    
    def start_training(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        plugin_id = self.training_plugin_combo.currentData()
        dataset_path = self.dataset_path_edit.text()
        
        if not plugin_id:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", self.tr("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–≥–∏–Ω –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"))
            return
        
        if not dataset_path or not os.path.exists(dataset_path):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", self.tr("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç"))
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–≥–∏–Ω–∞
            plugin_instance = self.plugin_manager.get_plugin_instance(plugin_id)
            if not plugin_instance:
                plugin_instance = self.plugin_manager.create_plugin_instance(plugin_id)
            
            if not plugin_instance:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", self.tr("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–≥–∏–Ω–∞"))
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä
            self.current_trainer = LLMTrainer(plugin_instance, self.training_progress_callback)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–±—É—á–µ–Ω–∏—è
            training_config = plugin_instance.get_training_config()
            training_config["training_args"].update({
                "num_epochs": self.epochs_spin.value(),
                "batch_size": self.batch_size_spin.value(),
                "learning_rate": float(self.learning_rate_edit.text()),
            })
            training_config["default_lora_rank"] = self.lora_rank_spin.value()
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_dir = os.path.join("data", "trained_models", f"{plugin_id}_{timestamp}")
            os.makedirs(output_dir, exist_ok=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.training_thread = TrainingThread(
                self.current_trainer, 
                dataset_path, 
                output_dir, 
                training_config
            )
            self.training_thread.finished.connect(self.on_training_finished)
            self.training_thread.error.connect(self.on_training_error)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.start_training_button.setEnabled(False)
            self.stop_training_button.setEnabled(True)
            self.training_progress.setVisible(True)
            self.training_progress.setValue(0)
            self.training_status_label.setText("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –∏ —Ç–∞–π–º–µ—Ä
            self.training_thread.start()
            self.progress_timer.start(1000)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
    
    def training_progress_callback(self, progress: int, message: str):
        """Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
        if progress >= 0:
            self.training_progress.setValue(progress)
        
        if message:
            if progress == -1:  # –õ–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–µ
                timestamp = datetime.now().strftime("%H:%M:%S")
                print(f"[{timestamp}] {message}")
            else:
                self.training_status_label.setText(message)
    
    def update_training_progress(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è"""
        if self.current_trainer:
            metrics = self.current_trainer.get_training_metrics()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.current_epoch_label.setText(str(metrics.epoch))
            self.current_step_label.setText(str(metrics.step))
            self.current_loss_label.setText(f"{metrics.loss:.4f}")
            self.current_lr_label.setText(f"{metrics.learning_rate:.2e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏
            self.update_history_table()
    
    def update_history_table(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è"""
        if not self.current_trainer:
            return
        
        history = self.current_trainer.get_training_history()
        self.history_table.setRowCount(len(history))
        
        for i, entry in enumerate(history):
            self.history_table.setItem(i, 0, QTableWidgetItem(str(entry.get("epoch", 0))))
            self.history_table.setItem(i, 1, QTableWidgetItem(str(entry.get("step", 0))))
            self.history_table.setItem(i, 2, QTableWidgetItem(f"{entry.get('loss', 0):.4f}"))
            self.history_table.setItem(i, 3, QTableWidgetItem(f"{entry.get('eval_loss', 0):.4f}"))
            
            timestamp = entry.get("timestamp", "")
            if timestamp:
                time_str = datetime.fromisoformat(timestamp).strftime("%H:%M:%S")
                self.history_table.setItem(i, 4, QTableWidgetItem(time_str))
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
        if history:
            self.history_table.scrollToBottom()
    
    def stop_training(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ"""
        if self.current_trainer:
            self.current_trainer.stop_training()
            self.training_status_label.setText("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—É—á–µ–Ω–∏—è...")
            self.stop_training_button.setEnabled(False)
    
    def on_training_finished(self, success: bool, output_path: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è"""
        self.progress_timer.stop()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UI
        self.start_training_button.setEnabled(True)
        self.stop_training_button.setEnabled(False)
        self.training_progress.setVisible(False)
        
        if success:
            self.training_status_label.setText(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {output_path}")
            QMessageBox.information(
                self, 
                self.tr("–£—Å–ø–µ—Ö"), 
                self.tr("–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: ") + output_path)
        else:
            self.training_status_label.setText("‚ùå –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ —Å –æ—à–∏–±–∫–æ–π")
        
        self.current_trainer = None
        self.training_thread = None
    
    def on_training_error(self, error_message: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –æ–±—É—á–µ–Ω–∏—è"""
        self.progress_timer.stop()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UI
        self.start_training_button.setEnabled(True)
        self.stop_training_button.setEnabled(False)
        self.training_progress.setVisible(False)
        
        self.training_status_label.setText(f"‚ùå –û—à–∏–±–∫–∞: {error_message}")
        QMessageBox.critical(self, self.tr("–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è"), error_message)
        
        self.current_trainer = None
        self.training_thread = None
    
    def select_images_folder(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        folder_path = QFileDialog.getExistingDirectory(
            self,
            self.tr("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Å—á–µ—Ç–æ–≤")
        )
        
        if folder_path:
            self.images_folder_edit.setText(folder_path)
            self.analyze_images_folder(folder_path)
    
    def analyze_images_folder(self, folder_path: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
        try:
            image_extensions = {'.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.pdf'}
            files = []
            
            for file_name in os.listdir(folder_path):
                if any(file_name.lower().endswith(ext) for ext in image_extensions):
                    files.append(file_name)
            
            info_text = f"""
            <b>–ê–Ω–∞–ª–∏–∑ –ø–∞–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω:</b><br>
            üìÅ –ü—É—Ç—å: {folder_path}<br>
            üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}<br>
            üïí –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {len(files) * 2} –º–∏–Ω—É—Ç<br>
            üíæ –†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: ~{len(files) * 1.5:.1f} –ú–ë
            """
            
            self.images_info_label.setText(info_text)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if not self.output_dataset_edit.text():
                folder_name = os.path.basename(folder_path)
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                self.output_dataset_edit.setText(f"dataset_{folder_name}_{timestamp}")
                
        except Exception as e:
            self.images_info_label.setText(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–ø–∫–∏: {e}")
    
    def start_dataset_generation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        folder_path = self.images_folder_edit.text()
        dataset_name = self.output_dataset_edit.text()
        
        if not folder_path or not os.path.exists(folder_path):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", self.tr("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"))
            return
        
        if not dataset_name:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", self.tr("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞"))
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Gemini –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        if not self.use_gemini_checkbox.isChecked():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", self.tr("–í –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å Gemini"))
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º Gemini –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            if self.parent_window and hasattr(self.parent_window, 'model_manager'):
                gemini_processor = self.parent_window.model_manager.get_gemini_processor()
                if not gemini_processor:
                    QMessageBox.warning(
                        self, 
                        self.tr("–û—à–∏–±–∫–∞"), 
                        self.tr("Gemini –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞."))
                    return
            else:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", self.tr("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Gemini –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—É"))
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞
            temp_plugin = self.plugin_manager.create_plugin_instance("llama")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
            if not temp_plugin:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", self.tr("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω"))
                return
            
            trainer = LLMTrainer(temp_plugin, self.generation_progress_callback)
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
            image_extensions = {'.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.pdf'}
            image_paths = []
            
            for file_name in os.listdir(folder_path):
                if any(file_name.lower().endswith(ext) for ext in image_extensions):
                    image_paths.append(os.path.join(folder_path, file_name))
            
            # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            output_path = os.path.join("data", "training_datasets", dataset_name)
            os.makedirs(output_path, exist_ok=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.generation_thread = DatasetGenerationThread(
                trainer, image_paths, gemini_processor, output_path
            )
            self.generation_thread.finished.connect(self.on_generation_finished)
            self.generation_thread.error.connect(self.on_generation_error)
            self.generation_thread.log_message.connect(self.on_generation_log)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.start_generation_button.setEnabled(False)
            self.stop_generation_button.setEnabled(True)
            self.generation_progress.setVisible(True)
            self.generation_progress.setValue(0)
            self.generation_log.clear()
            self.generation_log.append("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞—Ç–∞—Å–µ—Ç–∞...")
            
            self.generation_thread.start()
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
    
    def generation_progress_callback(self, progress: int, message: str):
        """Callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        if progress >= 0:
            self.generation_progress.setValue(progress)
        
        if message:
            timestamp = datetime.now().strftime("%H:%M:%S")
            self.generation_log.append(f"[{timestamp}] {message}")
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–æ–Ω—Ü—É
            scrollbar = self.generation_log.verticalScrollBar()
            scrollbar.setValue(scrollbar.maximum())
    
    def on_generation_log(self, message: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        self.generation_log.append(message)
        scrollbar = self.generation_log.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
    
    def on_generation_finished(self, dataset_path: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UI
        self.start_generation_button.setEnabled(True)
        self.stop_generation_button.setEnabled(False)
        self.generation_progress.setVisible(False)
        
        self.generation_log.append(f"‚úÖ –î–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω: {dataset_path}")
        
        QMessageBox.information(
            self,
            self.tr("–£—Å–ø–µ—Ö"),
            self.tr("–î–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n") + dataset_path + "\n\n" +
            self.tr("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è."))
    
    def on_generation_error(self, error_message: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UI
        self.start_generation_button.setEnabled(True)
        self.stop_generation_button.setEnabled(False)
        self.generation_progress.setVisible(False)
        
        self.generation_log.append(f"‚ùå –û—à–∏–±–∫–∞: {error_message}")
        QMessageBox.critical(self, self.tr("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"), error_message)
    
    def stop_dataset_generation(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.generation_log.append("üõë –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
    
    def refresh_all(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        self.plugin_manager.reload_plugins()
        self.load_plugin_info()
        QMessageBox.information(self, self.tr("–û–±–Ω–æ–≤–ª–µ–Ω–æ"), self.tr("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–≥–∏–Ω–∞—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞"))


class TrainingThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    finished = pyqtSignal(bool, str)
    error = pyqtSignal(str)
    
    def __init__(self, trainer, dataset_path, output_dir, training_config):
        super().__init__()
        self.trainer = trainer
        self.dataset_path = dataset_path
        self.output_dir = output_dir
        self.training_config = training_config
        self._should_stop = False  # –§–ª–∞–≥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    
    def stop(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞."""
        self._should_stop = True
        self.quit()
        self.wait(5000)  # –ñ–¥–µ–º –¥–æ 5 —Å–µ–∫—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Ç–æ–∫–∞."""
        try:
            self.stop()
            # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏
            self.trainer = None
            self.deleteLater()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ TrainingThread: {e}")
    
    def run(self):
        try:
            success = self.trainer.train_model(
                self.dataset_path,
                self.output_dir,
                self.training_config
            )
            
            if success:
                self.finished.emit(True, self.output_dir)
            else:
                self.error.emit("–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –Ω–µ—É—Å–ø–µ—à–Ω–æ")
                
        except Exception as e:
            self.error.emit(str(e))


class DatasetGenerationThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    finished = pyqtSignal(str)
    error = pyqtSignal(str)
    log_message = pyqtSignal(str)
    
    def __init__(self, trainer, image_paths, gemini_processor, output_path):
        super().__init__()
        self.trainer = trainer
        self.image_paths = image_paths
        self.gemini_processor = gemini_processor
        self.output_path = output_path
        self._should_stop = False  # –§–ª–∞–≥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    
    def stop(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞."""
        self._should_stop = True
        self.quit()
        self.wait(5000)  # –ñ–¥–µ–º –¥–æ 5 —Å–µ–∫—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Ç–æ–∫–∞."""
        try:
            self.stop()
            # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏
            self.trainer = None
            self.gemini_processor = None
            self.deleteLater()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ DatasetGenerationThread: {e}")
    
    def run(self):
        try:
            dataset_path = self.trainer.prepare_dataset_with_gemini(
                self.image_paths,
                self.gemini_processor,
                self.output_path
            )
            self.finished.emit(dataset_path)
            
        except Exception as e:
            self.error.emit(str(e)) 