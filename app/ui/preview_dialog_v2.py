#!/usr/bin/env python3
"""
Optimized Preview Dialog v2.0 for InvoiceGemini
–ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å lazy loading –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import json
import copy
from typing import Dict, List, Optional, Any, Union
from datetime import datetime

from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QTabWidget, QWidget,
    QTableWidget, QTableWidgetItem, QHeaderView, QPushButton,
    QLabel, QTextEdit, QSplitter, QGroupBox, QComboBox,
    QCheckBox, QSpinBox, QDoubleSpinBox, QLineEdit, QFrame,
    QScrollArea, QMessageBox, QProgressBar, QStatusBar,
    QFormLayout, QGridLayout, QSpacerItem, QSizePolicy
)
from PyQt6.QtCore import Qt, pyqtSignal, QTimer, QThread, QRunnable, QThreadPool, QMutex
from PyQt6.QtGui import QIcon, QPixmap, QFont

from ..settings_manager import settings_manager
from .. import utils


class PreviewDataModel:
    """–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    
    def __init__(self, results=None, model_type=None, file_path=None):
        self.original_results = results or {}
        self.current_results = copy.deepcopy(self.original_results)
        self.model_type = model_type or "unknown"
        self.file_path = file_path or ""
        self.is_modified = False
        self.comparison_results = {}
        self._change_mutex = QMutex()
    
    def update_field(self, field_id: str, value: Any) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è —Å threading protection"""
        self._change_mutex.lock()
        try:
            old_value = self.current_results.get(field_id)
            if old_value != value:
                self.current_results[field_id] = value
                self.is_modified = True
                return True
            return False
        finally:
            self._change_mutex.unlock()
    
    def get_changes(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –ø–æ–ª—è"""
        changes = {}
        for key, value in self.current_results.items():
            original_value = self.original_results.get(key)
            if original_value != value:
                changes[key] = {"old": original_value, "new": value}
        return changes
    
    def reset_to_original(self):
        """–°–±—Ä–æ—Å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º"""
        self._change_mutex.lock()
        try:
            self.current_results = copy.deepcopy(self.original_results)
            self.is_modified = False
        finally:
            self._change_mutex.unlock()


class OptimizedPreviewDialog(QDialog):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    –ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
    - –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
    - Lazy loading –≤–∫–ª–∞–¥–æ–∫
    - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
    - –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π UI
    - –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    """
    
    # –°–∏–≥–Ω–∞–ª—ã
    results_edited = pyqtSignal(dict)
    export_requested = pyqtSignal(dict, str)
    
    def __init__(self, results=None, model_type=None, file_path=None, parent=None):
        super().__init__(parent)
        
        # –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
        self.data_model = PreviewDataModel(results, model_type, file_path)
        
        # UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—Å–æ–∑–¥–∞—é—Ç—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
        self.field_widgets = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
        self._setup_ui()
        self._setup_connections()
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        self.auto_save_timer = QTimer()
        self.auto_save_timer.timeout.connect(self._auto_save)
        self.auto_save_timer.start(30000)  # 30 —Å–µ–∫—É–Ω–¥
    
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä v2.0 - InvoiceGemini")
        self.setMinimumSize(800, 500)
        self.resize(1000, 600)
        
        layout = QVBoxLayout(self)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        info_panel = self._create_info_panel()
        layout.addWidget(info_panel)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        main_area = self._create_main_area()
        layout.addWidget(main_area)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = QStatusBar()
        layout.addWidget(self.status_bar)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_panel = self._create_buttons_panel()
        layout.addWidget(buttons_panel)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self._update_status()
    
    def _create_info_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        panel = QFrame()
        panel.setFrameStyle(QFrame.Shape.StyledPanel)
        panel.setMaximumHeight(60)
        
        layout = QHBoxLayout(panel)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∏ —Ñ–∞–π–ª–µ
        model_label = QLabel(f"ü§ñ –ú–æ–¥–µ–ª—å: {self.data_model.model_type}")
        model_label.setFont(QFont("Arial", 10, QFont.Weight.Bold))
        layout.addWidget(model_label)
        
        layout.addStretch()
        
        file_info = "üìÅ –ü–∞–ø–∫–∞" if os.path.isdir(self.data_model.file_path) else "üìÑ –§–∞–π–ª"
        file_name = os.path.basename(self.data_model.file_path) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        file_label = QLabel(f"{file_info}: {file_name}")
        layout.addWidget(file_label)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.changes_indicator = QLabel("üíæ")
        self.changes_indicator.setToolTip("–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        self.changes_indicator.setVisible(False)
        layout.addWidget(self.changes_indicator)
        
        return panel
    
    def _create_main_area(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏"""
        splitter = QSplitter(Qt.Orientation.Horizontal)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø–æ–ª–µ–π
        left_panel = self._create_field_editor()
        splitter.addWidget(left_panel)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ —ç–∫—Å–ø–æ—Ä—Ç
        right_panel = self._create_right_panel()
        splitter.addWidget(right_panel)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        splitter.setSizes([600, 400])
        
        return splitter
    
    def _create_field_editor(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø–æ–ª–µ–π"""
        group = QGroupBox("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π")
        layout = QVBoxLayout(group)
        
        # Scroll area –¥–ª—è –ø–æ–ª–µ–π
        scroll_area = QScrollArea()
        scroll_widget = QWidget()
        self.fields_layout = QFormLayout(scroll_widget)
        
        scroll_area.setWidget(scroll_widget)
        scroll_area.setWidgetResizable(True)
        layout.addWidget(scroll_area)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è
        self._create_field_widgets()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_layout = QHBoxLayout()
        
        validate_btn = QPushButton("‚úÖ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å")
        validate_btn.clicked.connect(self._validate_fields)
        actions_layout.addWidget(validate_btn)
        
        reset_btn = QPushButton("üîÑ –°–±—Ä–æ—Å")
        reset_btn.clicked.connect(self._reset_fields)
        actions_layout.addWidget(reset_btn)
        
        layout.addLayout(actions_layout)
        
        return group
    
    def _create_right_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        compare_group = QGroupBox("‚öñÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è")
        compare_layout = QVBoxLayout(compare_group)
        
        self.comparison_table = QTableWidget()
        self.comparison_table.setColumnCount(3)
        self.comparison_table.setHorizontalHeaderLabels(["–ü–æ–ª–µ", "–û—Ä–∏–≥–∏–Ω–∞–ª", "–¢–µ–∫—É—â–∏–π"])
        self.comparison_table.setMaximumHeight(200)
        self.comparison_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        compare_layout.addWidget(self.comparison_table)
        
        layout.addWidget(compare_group)
        
        # –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç
        export_group = QGroupBox("üíæ –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç")
        export_layout = QGridLayout(export_group)
        
        excel_btn = QPushButton("üìä Excel")
        excel_btn.clicked.connect(lambda: self.export_requested.emit(self.data_model.current_results, "excel"))
        export_layout.addWidget(excel_btn, 0, 0)
        
        json_btn = QPushButton("üìÑ JSON")
        json_btn.clicked.connect(lambda: self.export_requested.emit(self.data_model.current_results, "json"))
        export_layout.addWidget(json_btn, 0, 1)
        
        csv_btn = QPushButton("üìã CSV")
        csv_btn.clicked.connect(lambda: self.export_requested.emit(self.data_model.current_results, "csv"))
        export_layout.addWidget(csv_btn, 1, 0)
        
        pdf_btn = QPushButton("üìë PDF")
        pdf_btn.clicked.connect(lambda: self.export_requested.emit(self.data_model.current_results, "pdf"))
        export_layout.addWidget(pdf_btn, 1, 1)
        
        layout.addWidget(export_group)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_group = QGroupBox("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_layout = QVBoxLayout(stats_group)
        
        self.stats_label = QLabel("–ü–æ–ª–µ–π: 0 | –ò–∑–º–µ–Ω–µ–Ω–∏–π: 0")
        stats_layout.addWidget(self.stats_label)
        
        layout.addWidget(stats_group)
        layout.addStretch()
        
        return widget
    
    def _create_field_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –ø–æ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        table_fields = settings_manager.get_table_fields()
        
        for field in table_fields[:8]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if not field.get("visible", True):
                continue
                
            field_id = field.get("id", "")
            field_name = field.get("name", field_id)
            field_type = field.get("type", "text")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∏–¥–∂–µ—Ç
            widget = self._create_field_widget(field_type)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            current_value = self.data_model.current_results.get(field_id, "")
            self._set_widget_value(widget, current_value)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            self._connect_widget_signals(widget, field_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–∂–µ—Ç
            self.field_widgets[field_id] = widget
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ layout
            self.fields_layout.addRow(f"{field_name}:", widget)
    
    def _create_field_widget(self, field_type: str) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –ø–æ —Ç–∏–ø—É –ø–æ–ª—è"""
        if field_type == "number":
            widget = QDoubleSpinBox()
            widget.setRange(-999999.99, 999999.99)
            widget.setDecimals(2)
            return widget
        elif field_type == "integer":
            widget = QSpinBox()
            widget.setRange(-999999, 999999)
            return widget
        elif field_type == "date":
            widget = QLineEdit()
            widget.setPlaceholderText("–î–î.–ú–ú.–ì–ì–ì–ì")
            return widget
        else:  # text
            return QLineEdit()
    
    def _set_widget_value(self, widget: QWidget, value: Any):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞"""
        if isinstance(widget, QLineEdit):
            widget.setText(str(value) if value else "")
        elif isinstance(widget, (QSpinBox, QDoubleSpinBox)):
            try:
                widget.setValue(float(value) if value else 0)
            except (ValueError, TypeError):
                widget.setValue(0)
    
    def _connect_widget_signals(self, widget: QWidget, field_id: str):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–∏–¥–∂–µ—Ç–∞"""
        if isinstance(widget, QLineEdit):
            widget.textChanged.connect(lambda text: self._on_field_changed(field_id, text))
        elif isinstance(widget, (QSpinBox, QDoubleSpinBox)):
            widget.valueChanged.connect(lambda value: self._on_field_changed(field_id, value))
    
    def _create_buttons_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∫–Ω–æ–ø–æ–∫"""
        panel = QWidget()
        layout = QHBoxLayout(panel)
        
        # –õ–µ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        help_btn = QPushButton("‚ùì –°–ø—Ä–∞–≤–∫–∞")
        help_btn.clicked.connect(self._show_help)
        layout.addWidget(help_btn)
        
        layout.addStretch()
        
        # –ü—Ä–∞–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        apply_btn = QPushButton("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å")
        apply_btn.clicked.connect(self._apply_changes)
        apply_btn.setStyleSheet("QPushButton { background-color: #2196F3; color: white; font-weight: bold; }")
        layout.addWidget(apply_btn)
        
        ok_btn = QPushButton("‚úÖ OK")
        ok_btn.clicked.connect(self.accept)
        ok_btn.setDefault(True)
        layout.addWidget(ok_btn)
        
        cancel_btn = QPushButton("‚ùå –û—Ç–º–µ–Ω–∞")
        cancel_btn.clicked.connect(self.reject)
        layout.addWidget(cancel_btn)
        
        return panel
    
    def _setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤"""
        pass
    
    def _on_field_changed(self, field_id: str, value: Any):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è"""
        if self.data_model.update_field(field_id, value):
            self._update_status()
            self._update_changes_indicator()
            self._update_comparison_table()
            self._update_stats()
    
    def _update_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        status = "–ò–∑–º–µ–Ω–µ–Ω–æ" if self.data_model.is_modified else "–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        field_count = len(self.data_model.current_results)
        self.status_bar.showMessage(f"–°—Ç–∞—Ç—É—Å: {status} | –ü–æ–ª–µ–π: {field_count}")
    
    def _update_changes_indicator(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        self.changes_indicator.setVisible(self.data_model.is_modified)
    
    def _update_comparison_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        changes = self.data_model.get_changes()
        self.comparison_table.setRowCount(len(changes))
        
        for row, (field, change) in enumerate(changes.items()):
            self.comparison_table.setItem(row, 0, QTableWidgetItem(field))
            self.comparison_table.setItem(row, 1, QTableWidgetItem(str(change["old"] or "")))
            self.comparison_table.setItem(row, 2, QTableWidgetItem(str(change["new"] or "")))
    
    def _update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if hasattr(self, 'stats_label'):
            changes_count = len(self.data_model.get_changes())
            fields_count = len(self.data_model.current_results)
            self.stats_label.setText(f"–ü–æ–ª–µ–π: {fields_count} | –ò–∑–º–µ–Ω–µ–Ω–∏–π: {changes_count}")
    
    def _validate_fields(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π"""
        errors = []
        
        required_fields = ["–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞", "–î–∞—Ç–∞"]
        for field in required_fields:
            if not self.data_model.current_results.get(field, "").strip():
                errors.append(f"–ü—É—Å—Ç–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
        
        if errors:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", "\n".join(errors))
        else:
            QMessageBox.information(self, "–í–∞–ª–∏–¥–∞—Ü–∏—è", "‚úÖ –í—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
    
    def _reset_fields(self):
        """–°–±—Ä–æ—Å –ø–æ–ª–µ–π –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º"""
        self.data_model.reset_to_original()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã
        for field_id, widget in self.field_widgets.items():
            value = self.data_model.current_results.get(field_id, "")
            self._set_widget_value(widget, value)
        
        self._update_status()
        self._update_changes_indicator()
        self._update_comparison_table()
        self._update_stats()
        
        self.status_bar.showMessage("üîÑ –ü–æ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º", 3000)
    
    def _apply_changes(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        self.results_edited.emit(self.data_model.current_results)
        self.data_model.original_results = copy.deepcopy(self.data_model.current_results)
        self.data_model.is_modified = False
        self._update_status()
        self._update_changes_indicator()
        self._update_comparison_table()
        self.status_bar.showMessage("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã", 3000)
    
    def _auto_save(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
        if self.data_model.is_modified:
            self._apply_changes()
            self.status_bar.showMessage("üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", 2000)
    
    def _show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
        <h3>üîç –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä v2.0</h3>
        
        <h4>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</h4>
        <ul>
        <li><b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π</b> - –ò–∑–º–µ–Ω—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é</li>
        <li><b>–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ</b> - –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥</li>
        <li><b>–í–∞–ª–∏–¥–∞—Ü–∏—è</b> - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><b>–ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç</b> - –í Excel, JSON, CSV, PDF</li>
        <li><b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π</b> - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º</li>
        </ul>
        
        <h4>–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:</h4>
        <ul>
        <li><b>Ctrl+S</b> - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</li>
        <li><b>Ctrl+R</b> - –°–±—Ä–æ—Å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É</li>
        <li><b>F1</b> - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞</li>
        </ul>
        """
        QMessageBox.information(self, "–°–ø—Ä–∞–≤–∫–∞", help_text)
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞"""
        if self.data_model.is_modified:
            reply = QMessageBox.question(
                self, "–ù–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö?",
                QMessageBox.StandardButton.Save | 
                QMessageBox.StandardButton.Discard | 
                QMessageBox.StandardButton.Cancel
            )
            
            if reply == QMessageBox.StandardButton.Save:
                self._apply_changes()
                event.accept()
            elif reply == QMessageBox.StandardButton.Discard:
                event.accept()
            else:
                event.ignore()
                return
        
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        self.auto_save_timer.stop()
        event.accept()


# –ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
PreviewDialog = OptimizedPreviewDialog 