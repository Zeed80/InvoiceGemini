"""
–î–∏–∞–ª–æ–≥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Paperless-NGX –∏ Paperless-AI
"""
from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit,
    QPushButton, QCheckBox, QSpinBox, QDoubleSpinBox,
    QGroupBox, QFormLayout, QTextEdit, QMessageBox,
    QTabWidget, QWidget, QComboBox, QListWidget, QProgressBar
)
from PyQt6.QtCore import Qt, pyqtSignal, QThread
from PyQt6.QtGui import QIcon
import logging
from typing import Dict, Any, Optional
from pathlib import Path
from app.core.scheduler import get_scheduler, ScheduleInterval


class PaperlessSyncWorker(QThread):
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Paperless –≤ —Ñ–æ–Ω–µ"""
    progress_updated = pyqtSignal(int, str)
    sync_completed = pyqtSignal(dict)
    error_occurred = pyqtSignal(str)
    
    def __init__(self, plugin, data: Dict[str, Any], direction: str):
        super().__init__()
        self.plugin = plugin
        self.data = data
        self.direction = direction
    
    def run(self):
        try:
            self.progress_updated.emit(10, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Paperless...")
            
            if not self.plugin.test_connection():
                if not self.plugin.connect():
                    self.error_occurred.emit("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Paperless")
                    return
            
            self.progress_updated.emit(30, f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ({self.direction})...")
            
            result = self.plugin.sync_data(self.data, self.direction)
            
            self.progress_updated.emit(100, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            self.sync_completed.emit(result)
            
        except Exception as e:
            self.error_occurred.emit(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")


class PaperlessIntegrationDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å Paperless-NGX"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle(self.tr("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Paperless-NGX"))
        self.setMinimumSize(700, 600)
        
        self.paperless_plugin = None
        self.paperless_ai_plugin = None
        self.sync_worker = None
        
        self._init_ui()
        self._load_settings()
    
    def _init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        
        # –í–∫–ª–∞–¥–∫–∏
        tabs = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        tabs.addTab(self._create_connection_tab(), self.tr("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"))
        
        # –í–∫–ª–∞–¥–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        tabs.addTab(self._create_sync_tab(), self.tr("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"))
        
        # –í–∫–ª–∞–¥–∫–∞ AI –Ω–∞—Å—Ç—Ä–æ–µ–∫
        tabs.addTab(self._create_ai_tab(), self.tr("AI –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"))
        
        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        tabs.addTab(self._create_status_tab(), self.tr("–°—Ç–∞—Ç—É—Å"))
        
        layout.addWidget(tabs)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        self.test_btn = QPushButton(self.tr("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"))
        self.test_btn.clicked.connect(self._test_connection)
        buttons_layout.addWidget(self.test_btn)
        
        buttons_layout.addStretch()
        
        self.save_btn = QPushButton(self.tr("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"))
        self.save_btn.clicked.connect(self._save_settings)
        buttons_layout.addWidget(self.save_btn)
        
        self.close_btn = QPushButton(self.tr("–ó–∞–∫—Ä—ã—Ç—å"))
        self.close_btn.clicked.connect(self.accept)
        buttons_layout.addWidget(self.close_btn)
        
        layout.addLayout(buttons_layout)
    
    def _create_connection_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ì—Ä—É–ø–ø–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        main_group = QGroupBox(self.tr("–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"))
        main_layout = QFormLayout()
        
        self.server_url_edit = QLineEdit()
        self.server_url_edit.setPlaceholderText("http://192.168.1.125:8000")
        main_layout.addRow(self.tr("URL —Å–µ—Ä–≤–µ—Ä–∞:"), self.server_url_edit)
        
        self.api_token_edit = QLineEdit()
        self.api_token_edit.setEchoMode(QLineEdit.EchoMode.Password)
        self.api_token_edit.setPlaceholderText(self.tr("–í–≤–µ–¥–∏—Ç–µ API —Ç–æ–∫–µ–Ω"))
        
        token_layout = QHBoxLayout()
        token_layout.addWidget(self.api_token_edit)
        
        self.show_token_btn = QPushButton(self.tr("üëÅ"))
        self.show_token_btn.setMaximumWidth(40)
        self.show_token_btn.setCheckable(True)
        self.show_token_btn.toggled.connect(self._toggle_token_visibility)
        token_layout.addWidget(self.show_token_btn)
        
        main_layout.addRow(self.tr("API —Ç–æ–∫–µ–Ω:"), token_layout)
        
        self.timeout_spin = QSpinBox()
        self.timeout_spin.setRange(5, 300)
        self.timeout_spin.setValue(30)
        self.timeout_spin.setSuffix(self.tr(" —Å–µ–∫"))
        main_layout.addRow(self.tr("–¢–∞–π–º–∞—É—Ç:"), self.timeout_spin)
        
        self.ssl_verify_check = QCheckBox(self.tr("–ü—Ä–æ–≤–µ—Ä—è—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"))
        self.ssl_verify_check.setChecked(True)
        main_layout.addRow("", self.ssl_verify_check)
        
        main_group.setLayout(main_layout)
        layout.addWidget(main_group)
        
        # –ì—Ä—É–ø–ø–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        auto_group = QGroupBox(self.tr("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"))
        auto_layout = QFormLayout()
        
        self.auto_sync_check = QCheckBox(self.tr("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"))
        auto_layout.addRow("", self.auto_sync_check)
        
        self.sync_interval_spin = QSpinBox()
        self.sync_interval_spin.setRange(60, 3600)
        self.sync_interval_spin.setValue(300)
        self.sync_interval_spin.setSuffix(self.tr(" —Å–µ–∫"))
        auto_layout.addRow(self.tr("–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:"), self.sync_interval_spin)
        
        self.create_correspondents_check = QCheckBox(self.tr("–°–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"))
        self.create_correspondents_check.setChecked(True)
        auto_layout.addRow("", self.create_correspondents_check)
        
        self.create_doc_types_check = QCheckBox(self.tr("–°–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"))
        self.create_doc_types_check.setChecked(True)
        auto_layout.addRow("", self.create_doc_types_check)
        
        auto_group.setLayout(auto_layout)
        layout.addWidget(auto_group)
        
        layout.addStretch()
        
        return widget
    
    def _create_sync_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        direction_group = QGroupBox(self.tr("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"))
        direction_layout = QVBoxLayout()
        
        self.export_radio = QCheckBox(self.tr("–≠–∫—Å–ø–æ—Ä—Ç –≤ Paperless-NGX"))
        self.export_radio.setChecked(True)
        direction_layout.addWidget(self.export_radio)
        
        self.import_radio = QCheckBox(self.tr("–ò–º–ø–æ—Ä—Ç –∏–∑ Paperless-NGX"))
        direction_layout.addWidget(self.import_radio)
        
        self.bidirectional_radio = QCheckBox(self.tr("–î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"))
        direction_layout.addWidget(self.bidirectional_radio)
        
        direction_group.setLayout(direction_layout)
        layout.addWidget(direction_group)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        progress_group = QGroupBox(self.tr("–ü—Ä–æ–≥—Ä–µ—Å—Å"))
        progress_layout = QVBoxLayout()
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 100)
        progress_layout.addWidget(self.progress_bar)
        
        self.progress_label = QLabel(self.tr("–ì–æ—Ç–æ–≤–æ –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"))
        progress_layout.addWidget(self.progress_label)
        
        progress_group.setLayout(progress_layout)
        layout.addWidget(progress_group)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_layout = QHBoxLayout()
        
        self.sync_current_btn = QPushButton(self.tr("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç"))
        self.sync_current_btn.clicked.connect(self._sync_current_document)
        actions_layout.addWidget(self.sync_current_btn)
        
        self.sync_all_btn = QPushButton(self.tr("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ"))
        self.sync_all_btn.clicked.connect(self._sync_all_documents)
        actions_layout.addWidget(self.sync_all_btn)
        
        layout.addLayout(actions_layout)
        
        # –õ–æ–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        log_group = QGroupBox(self.tr("–õ–æ–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"))
        log_layout = QVBoxLayout()
        
        self.sync_log = QTextEdit()
        self.sync_log.setReadOnly(True)
        self.sync_log.setMaximumHeight(200)
        log_layout.addWidget(self.sync_log)
        
        log_group.setLayout(log_layout)
        layout.addWidget(log_group)
        
        layout.addStretch()
        
        return widget
    
    def _create_ai_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É AI –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ì—Ä—É–ø–ø–∞ Paperless-AI
        ai_group = QGroupBox(self.tr("Paperless-AI"))
        ai_layout = QFormLayout()
        
        self.ai_enabled_check = QCheckBox(self.tr("–í–∫–ª—é—á–∏—Ç—å AI —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"))
        self.ai_enabled_check.setChecked(True)
        ai_layout.addRow("", self.ai_enabled_check)
        
        self.auto_tag_check = QCheckBox(self.tr("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–≥–æ–≤"))
        self.auto_tag_check.setChecked(True)
        ai_layout.addRow("", self.auto_tag_check)
        
        self.auto_categorize_check = QCheckBox(self.tr("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è"))
        self.auto_categorize_check.setChecked(True)
        ai_layout.addRow("", self.auto_categorize_check)
        
        self.confidence_spin = QDoubleSpinBox()
        self.confidence_spin.setRange(0.1, 1.0)
        self.confidence_spin.setSingleStep(0.05)
        self.confidence_spin.setValue(0.7)
        self.confidence_spin.setDecimals(2)
        ai_layout.addRow(self.tr("–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:"), self.confidence_spin)
        
        self.sync_tags_check = QCheckBox(self.tr("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ InvoiceGemini"))
        self.sync_tags_check.setChecked(True)
        ai_layout.addRow("", self.sync_tags_check)
        
        ai_group.setLayout(ai_layout)
        layout.addWidget(ai_group)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI
        test_group = QGroupBox(self.tr("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"))
        test_layout = QVBoxLayout()
        
        test_btn_layout = QHBoxLayout()
        self.test_ai_btn = QPushButton(self.tr("–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å AI —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"))
        self.test_ai_btn.clicked.connect(self._test_ai_tagging)
        test_btn_layout.addWidget(self.test_ai_btn)
        test_layout.addLayout(test_btn_layout)
        
        self.ai_test_result = QTextEdit()
        self.ai_test_result.setReadOnly(True)
        self.ai_test_result.setMaximumHeight(150)
        test_layout.addWidget(self.ai_test_result)
        
        test_group.setLayout(test_layout)
        layout.addWidget(test_group)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ AI
        advanced_group = QGroupBox(self.tr("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ AI"))
        advanced_layout = QVBoxLayout()
        
        advanced_info = QLabel(
            self.tr("–ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–µ–π")
        )
        advanced_info.setWordWrap(True)
        advanced_layout.addWidget(advanced_info)
        
        self.advanced_ai_btn = QPushButton(self.tr("üéì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI (–ø—Ä–∞–≤–∏–ª–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –æ–±—É—á–µ–Ω–∏–µ)"))
        self.advanced_ai_btn.clicked.connect(self._show_advanced_ai_dialog)
        advanced_layout.addWidget(self.advanced_ai_btn)
        
        advanced_group.setLayout(advanced_layout)
        layout.addWidget(advanced_group)
        
        layout.addStretch()
        
        return widget
    
    def _create_status_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç—É—Å–∞"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        status_group = QGroupBox(self.tr("–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"))
        status_layout = QFormLayout()
        
        self.connection_status_label = QLabel(self.tr("–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"))
        status_layout.addRow(self.tr("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:"), self.connection_status_label)
        
        self.last_sync_label = QLabel(self.tr("–ù–∏–∫–æ–≥–¥–∞"))
        status_layout.addRow(self.tr("–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:"), self.last_sync_label)
        
        self.cached_items_label = QLabel(self.tr("0 / 0 / 0"))
        status_layout.addRow(self.tr("–ö—ç—à (–∫–æ—Ä—Ä./—Ç–∏–ø—ã/—Ç–µ–≥–∏):"), self.cached_items_label)
        
        status_group.setLayout(status_layout)
        layout.addWidget(status_group)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_group = QGroupBox(self.tr("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        stats_layout = QFormLayout()
        
        self.exported_count_label = QLabel("0")
        stats_layout.addRow(self.tr("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:"), self.exported_count_label)
        
        self.imported_count_label = QLabel("0")
        stats_layout.addRow(self.tr("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:"), self.imported_count_label)
        
        self.errors_count_label = QLabel("0")
        stats_layout.addRow(self.tr("–û—à–∏–±–æ–∫:"), self.errors_count_label)
        
        stats_group.setLayout(stats_layout)
        layout.addWidget(stats_group)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        refresh_btn = QPushButton(self.tr("–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"))
        refresh_btn.clicked.connect(self._refresh_status)
        layout.addWidget(refresh_btn)
        
        layout.addStretch()
        
        return widget
    
    def _toggle_token_visibility(self, checked: bool):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞"""
        if checked:
            self.api_token_edit.setEchoMode(QLineEdit.EchoMode.Normal)
        else:
            self.api_token_edit.setEchoMode(QLineEdit.EchoMode.Password)
    
    def _test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Paperless"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            config = self._get_current_config()
            
            from app.plugins.integrations.paperless_ngx_plugin import PaperlessNGXPlugin
            
            plugin = PaperlessNGXPlugin(config)
            
            if not plugin.initialize():
                QMessageBox.warning(self, self.tr("–û—à–∏–±–∫–∞"), 
                                   self.tr(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {plugin.last_error}"))
                return
            
            if plugin.test_connection():
                QMessageBox.information(self, self.tr("–£—Å–ø–µ—Ö"), 
                                       self.tr("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Paperless-NGX —É—Å–ø–µ—à–Ω–æ!"))
                self._log_sync(self.tr("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if plugin.connect():
                    status = plugin.get_connection_status()
                    self.connection_status_label.setText(self.tr("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ"))
                    self.cached_items_label.setText(
                        f"{status.get('cached_correspondents', 0)} / "
                        f"{status.get('cached_document_types', 0)} / "
                        f"{status.get('cached_tags', 0)}"
                    )
            else:
                QMessageBox.warning(self, self.tr("–û—à–∏–±–∫–∞"), 
                                   self.tr("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Paperless-NGX.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."))
                self._log_sync(self.tr("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"))
            
            plugin.cleanup()
            
        except Exception as e:
            QMessageBox.critical(self, self.tr("–û—à–∏–±–∫–∞"), 
                                self.tr(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"))
            self._log_sync(self.tr(f"‚ùå –û—à–∏–±–∫–∞: {e}"))
    
    def _save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            config = self._get_current_config()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SecretsManager
            from app.security.secrets_manager import get_secrets_manager
            secrets_manager = get_secrets_manager()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º API —Ç–æ–∫–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ
            secrets_manager.set_secret("paperless_ngx_api_token", config["api_token"])
            secrets_manager.set_secret("paperless_ngx_server_url", config["server_url"])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            from app.settings_manager import settings_manager
            settings_manager.set_setting("paperless_timeout", config["timeout"])
            settings_manager.set_setting("paperless_ssl_verify", config["ssl_verify"])
            settings_manager.set_setting("paperless_auto_sync", config["auto_sync"])
            settings_manager.set_setting("paperless_sync_interval", config["sync_interval"])
            settings_manager.set_setting("paperless_create_correspondents", config["create_correspondents"])
            settings_manager.set_setting("paperless_create_document_types", config["create_document_types"])
            settings_manager.set_setting("paperless_ai_enabled", config["paperless_ai_enabled"])
            settings_manager.set_setting("paperless_auto_tag", config["auto_tag"])
            settings_manager.set_setting("paperless_auto_categorize", config.get("auto_categorize", True))
            settings_manager.set_setting("paperless_confidence_threshold", config.get("confidence_threshold", 0.7))
            settings_manager.set_setting("paperless_sync_tags_to_invoicegemini", config.get("sync_tags_to_invoicegemini", True))
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self._configure_scheduler(config)
            
            QMessageBox.information(self, self.tr("–£—Å–ø–µ—Ö"), 
                                   self.tr("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"))
            self._log_sync(self.tr("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"))
            
        except Exception as e:
            QMessageBox.critical(self, self.tr("–û—à–∏–±–∫–∞"), 
                                self.tr(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}"))
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Paperless: {e}")
    
    def _load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            from app.security.secrets_manager import get_secrets_manager
            from app.settings_manager import settings_manager
            
            secrets_manager = get_secrets_manager()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ SecretsManager
            api_token = secrets_manager.get_secret("paperless_ngx_api_token")
            server_url = secrets_manager.get_secret("paperless_ngx_server_url")
            
            if server_url:
                self.server_url_edit.setText(server_url)
            else:
                self.server_url_edit.setText("http://192.168.1.125:8000")
            
            if api_token:
                self.api_token_edit.setText(api_token)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.timeout_spin.setValue(int(settings_manager.get_setting("paperless_timeout", 30)))
            self.ssl_verify_check.setChecked(bool(settings_manager.get_setting("paperless_ssl_verify", True)))
            self.auto_sync_check.setChecked(bool(settings_manager.get_setting("paperless_auto_sync", False)))
            self.sync_interval_spin.setValue(int(settings_manager.get_setting("paperless_sync_interval", 300)))
            self.create_correspondents_check.setChecked(settings_manager.get_setting("paperless_create_correspondents", True))
            self.create_doc_types_check.setChecked(settings_manager.get_setting("paperless_create_document_types", True))
            self.ai_enabled_check.setChecked(settings_manager.get_setting("paperless_ai_enabled", True))
            self.auto_tag_check.setChecked(settings_manager.get_setting("paperless_auto_tag", True))
            self.auto_categorize_check.setChecked(settings_manager.get_setting("paperless_auto_categorize", True))
            self.confidence_spin.setValue(settings_manager.get_setting("paperless_confidence_threshold", 0.7))
            self.sync_tags_check.setChecked(settings_manager.get_setting("paperless_sync_tags_to_invoicegemini", True))
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Paperless: {e}")
    
    def _get_current_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ UI"""
        return {
            "server_url": self.server_url_edit.text().strip(),
            "api_token": self.api_token_edit.text().strip(),
            "timeout": self.timeout_spin.value(),
            "ssl_verify": self.ssl_verify_check.isChecked(),
            "auto_sync": self.auto_sync_check.isChecked(),
            "sync_interval": self.sync_interval_spin.value(),
            "create_correspondents": self.create_correspondents_check.isChecked(),
            "create_document_types": self.create_doc_types_check.isChecked(),
            "paperless_ai_enabled": self.ai_enabled_check.isChecked(),
            "auto_tag": self.auto_tag_check.isChecked(),
            "auto_categorize": self.auto_categorize_check.isChecked(),
            "confidence_threshold": self.confidence_spin.value(),
            "sync_tags_to_invoicegemini": self.sync_tags_check.isChecked()
        }
    
    def _sync_current_document(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ parent (main_window)
            if not hasattr(self.parent(), 'current_invoice_data'):
                QMessageBox.warning(self, self.tr("–û—à–∏–±–∫–∞"), 
                                   self.tr("–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"))
                return
            
            current_data = self.parent().current_invoice_data
            
            if not current_data:
                QMessageBox.warning(self, self.tr("–û—à–∏–±–∫–∞"), 
                                   self.tr("–î–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—É—Å—Ç—ã"))
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
            if not hasattr(self.parent(), 'current_file_path') or not self.parent().current_file_path:
                QMessageBox.warning(self, self.tr("–û—à–∏–±–∫–∞"), 
                                   self.tr("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –Ω–∞–π–¥–µ–Ω"))
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            sync_data = current_data.copy()
            sync_data['file_path'] = self.parent().current_file_path
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            direction = "export"
            if self.export_radio.isChecked() and self.import_radio.isChecked():
                direction = "both"
            elif self.import_radio.isChecked():
                direction = "import"
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
            self._start_sync(sync_data, direction, single_document=True)
            
        except Exception as e:
            QMessageBox.critical(self, self.tr("–û—à–∏–±–∫–∞"), 
                                self.tr(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}"))
            logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}", exc_info=True)
    
    def _sync_all_documents(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            if not hasattr(self.parent(), 'get_all_processed_documents'):
                QMessageBox.warning(self, self.tr("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"), 
                                   self.tr("–§—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏"))
                return
            
            all_docs = self.parent().get_all_processed_documents()
            
            if not all_docs:
                QMessageBox.information(self, self.tr("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), 
                                       self.tr("–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"))
                return
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            reply = QMessageBox.question(
                self, 
                self.tr("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"), 
                self.tr(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å {len(all_docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤?"),
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            
            if reply == QMessageBox.StandardButton.Yes:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                direction = "export"
                if self.export_radio.isChecked() and self.import_radio.isChecked():
                    direction = "both"
                elif self.import_radio.isChecked():
                    direction = "import"
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                self._start_batch_sync(all_docs, direction)
                
        except Exception as e:
            QMessageBox.critical(self, self.tr("–û—à–∏–±–∫–∞"), 
                                self.tr(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}"))
            logging.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
    
    def _test_ai_tagging(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            self.ai_test_result.clear()
            self.ai_test_result.append(self.tr("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...\n"))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ AI –ø–ª–∞–≥–∏–Ω–∞
            if not self.paperless_ai_plugin:
                self.ai_test_result.append(self.tr("‚ùå AI –ø–ª–∞–≥–∏–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"))
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            if not hasattr(self.parent(), 'current_invoice_data') or not self.parent().current_invoice_data:
                self.ai_test_result.append(self.tr("‚ùå –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"))
                self.ai_test_result.append(self.tr("\n–û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º AI"))
                return
            
            test_data = self.parent().current_invoice_data
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            self.ai_test_result.append(self.tr("üìä –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞...\n"))
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –æ—Ç AI
            tags = self.paperless_ai_plugin.analyze_document_for_tags(test_data)
            
            if tags:
                self.ai_test_result.append(self.tr(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tags)} —Ç–µ–≥–æ–≤:\n"))
                for tag_name, confidence in tags:
                    self.ai_test_result.append(self.tr(f"  ‚Ä¢ {tag_name} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})"))
            else:
                self.ai_test_result.append(self.tr("‚ö†Ô∏è –¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"))
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if test_data.get('category'):
                self.ai_test_result.append(self.tr(f"\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {test_data.get('category')}"))
            
            self.ai_test_result.append(self.tr("\n\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"))
            
        except Exception as e:
            self.ai_test_result.append(self.tr(f"\n‚ùå –û—à–∏–±–∫–∞: {e}"))
            logging.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI: {e}", exc_info=True)
    
    def _start_sync(self, data, direction, single_document=False):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            from PyQt6.QtCore import QThread, pyqtSignal
            
            class SyncWorker(QThread):
                finished = pyqtSignal(bool, str)
                progress = pyqtSignal(str)
                
                def __init__(self, plugin, data, direction):
                    super().__init__()
                    self.plugin = plugin
                    self.data = data
                    self.direction = direction
                
                def run(self):
                    try:
                        self.progress.emit(self.tr("üîÑ –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏..."))
                        
                        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –ø–ª–∞–≥–∏–Ω
                        result = self.plugin.sync_data(self.data, direction=self.direction)
                        
                        if result.get('success'):
                            msg = self.tr("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                            self.finished.emit(True, msg)
                        else:
                            msg = self.tr(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                            self.finished.emit(False, msg)
                    except Exception as e:
                        self.finished.emit(False, str(e))
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º worker
            self.sync_worker = SyncWorker(self.paperless_plugin, data, direction)
            self.sync_worker.progress.connect(lambda msg: self._log_sync(msg))
            self.sync_worker.finished.connect(self._on_sync_finished)
            self.sync_worker.start()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            self._log_sync(self.tr("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞..."))
            
        except Exception as e:
            QMessageBox.critical(self, self.tr("–û—à–∏–±–∫–∞"), 
                                self.tr(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}"))
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
    
    def _start_batch_sync(self, documents, direction):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∞—Å—Å–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
        try:
            from PyQt6.QtCore import QThread, pyqtSignal
            
            class BatchSyncWorker(QThread):
                finished = pyqtSignal(int, int)
                progress = pyqtSignal(str, int, int)
                
                def __init__(self, plugin, documents, direction):
                    super().__init__()
                    self.plugin = plugin
                    self.documents = documents
                    self.direction = direction
                
                def run(self):
                    success_count = 0
                    total = len(self.documents)
                    
                    for idx, doc in enumerate(self.documents, 1):
                        try:
                            self.progress.emit(
                                self.tr(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {idx}/{total}: {doc.get('file_name', '–¥–æ–∫—É–º–µ–Ω—Ç')}"),
                                idx, total
                            )
                            
                            result = self.plugin.sync_data(doc, direction=self.direction)
                            
                            if result.get('success'):
                                success_count += 1
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {idx}: {e}")
                    
                    self.finished.emit(success_count, total)
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º worker
            self.batch_worker = BatchSyncWorker(self.paperless_plugin, documents, direction)
            self.batch_worker.progress.connect(
                lambda msg, current, total: self._log_sync(f"{msg} [{current}/{total}]")
            )
            self.batch_worker.finished.connect(self._on_batch_sync_finished)
            self.batch_worker.start()
            
            self._log_sync(self.tr(f"üîÑ –ù–∞—á–∞—Ç–∞ –º–∞—Å—Å–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."))
            
        except Exception as e:
            QMessageBox.critical(self, self.tr("–û—à–∏–±–∫–∞"), 
                                self.tr(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}"))
            logging.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
    
    def _on_sync_finished(self, success, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self._log_sync(message)
        if success:
            QMessageBox.information(self, self.tr("–£—Å–ø–µ—Ö"), message)
        else:
            QMessageBox.warning(self, self.tr("–û—à–∏–±–∫–∞"), message)
        self._refresh_status()
    
    def _on_batch_sync_finished(self, success_count, total):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        msg = self.tr(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{total} —É—Å–ø–µ—à–Ω–æ")
        self._log_sync(msg)
        QMessageBox.information(self, self.tr("–†–µ–∑—É–ª—å—Ç–∞—Ç"), msg)
        self._refresh_status()
    
    def _show_advanced_ai_dialog(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π AI"""
        try:
            from .paperless_ai_manager_dialog import PaperlessAIManagerDialog
            
            dialog = PaperlessAIManagerDialog(self)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å AI –ø–ª–∞–≥–∏–Ω, –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ
            if self.paperless_ai_plugin:
                dialog.set_ai_plugin(self.paperless_ai_plugin)
            
            dialog.exec()
            
        except Exception as e:
            QMessageBox.critical(self, self.tr("–û—à–∏–±–∫–∞"), 
                                self.tr(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ AI: {e}"))
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ AI: {e}", exc_info=True)
    
    def _refresh_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            config = self._get_current_config()
            
            from app.plugins.integrations.paperless_ngx_plugin import PaperlessNGXPlugin
            
            plugin = PaperlessNGXPlugin(config)
            
            if plugin.initialize() and plugin.connect():
                status = plugin.get_connection_status()
                
                self.connection_status_label.setText(self.tr("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ"))
                
                if status.get("last_sync"):
                    from datetime import datetime
                    last_sync = datetime.fromisoformat(status["last_sync"])
                    self.last_sync_label.setText(last_sync.strftime("%d.%m.%Y %H:%M:%S"))
                
                self.cached_items_label.setText(
                    f"{status.get('cached_correspondents', 0)} / "
                    f"{status.get('cached_document_types', 0)} / "
                    f"{status.get('cached_tags', 0)}"
                )
                
                plugin.cleanup()
            else:
                self.connection_status_label.setText(self.tr("‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"))
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            self.connection_status_label.setText(self.tr("‚ùå –û—à–∏–±–∫–∞"))
    
    def _log_sync(self, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        from datetime import datetime
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.sync_log.append(f"[{timestamp}] {message}")
    
    def _configure_scheduler(self, config: Dict[str, Any]):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            scheduler = get_scheduler()
            task_id = "paperless_auto_sync"
            
            if config.get("auto_sync", False):
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –µ—Å—Ç—å
                scheduler.remove_task(task_id)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç—ã
                interval_seconds = config.get("sync_interval", 300)
                interval_minutes = max(1, interval_seconds // 60)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                def auto_sync_task():
                    """–ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
                    try:
                        if hasattr(self.parent(), 'get_all_processed_documents'):
                            docs = self.parent().get_all_processed_documents()
                            
                            if docs and self.paperless_plugin:
                                logging.info(f"–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                                
                                for doc in docs:
                                    try:
                                        self.paperless_plugin.sync_data(doc, direction="export")
                                    except Exception as e:
                                        logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
                                
                                logging.info("–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
                success = scheduler.add_task(
                    task_id=task_id,
                    name=self.tr("–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Paperless"),
                    func=auto_sync_task,
                    interval=ScheduleInterval.MINUTES,
                    interval_value=interval_minutes,
                    enabled=True
                )
                
                if success:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
                    if not scheduler.running:
                        scheduler.start()
                    
                    self._log_sync(
                        self.tr(f"‚è∞ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: –∫–∞–∂–¥—ã–µ {interval_minutes} –º–∏–Ω")
                    )
                    logging.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {interval_minutes} –º–∏–Ω—É—Ç")
                else:
                    logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
            else:
                # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                if scheduler.remove_task(task_id):
                    self._log_sync(self.tr("‚è∞ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"))
                    logging.info("–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}", exc_info=True)
    
    def set_paperless_plugin(self, plugin):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–≥–∏–Ω Paperless –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        self.paperless_plugin = plugin
    
    def set_paperless_ai_plugin(self, plugin):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–≥–∏–Ω Paperless-AI –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        self.paperless_ai_plugin = plugin

