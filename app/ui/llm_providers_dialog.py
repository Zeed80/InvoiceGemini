"""
–î–∏–∞–ª–æ–≥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏ –∏—Ö API –∫–ª—é—á–µ–π.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç OpenAI, Anthropic, Google, Mistral, DeepSeek, xAI, Ollama.
"""
import os
import json
from typing import Dict, Optional, Any
from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, 
    QPushButton, QComboBox, QGroupBox, QTabWidget, QWidget,
    QFormLayout, QTextEdit, QMessageBox, QCheckBox, QSpinBox,
    QDoubleSpinBox, QScrollArea, QSizePolicy, QFrame, QProgressBar
)
from PyQt6.QtCore import Qt, pyqtSignal, QThread, QTimer
from PyQt6.QtGui import QFont, QIcon

from ..plugins.base_llm_plugin import BaseLLMPlugin, LLM_PROVIDERS
from ..settings_manager import settings_manager


class LLMProviderTestThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É"""
    test_completed = pyqtSignal(str, bool, str)  # provider_name, success, message
    
    def __init__(self, provider_name: str, model_name: str, api_key: str):
        super().__init__()
        self.provider_name = provider_name
        self.model_name = model_name
        self.api_key = api_key
    
    def run(self):
        try:
            from ..plugins.models.universal_llm_plugin import UniversalLLMPlugin
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≥–∏–Ω –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            plugin = UniversalLLMPlugin(
                provider_name=self.provider_name,
                model_name=self.model_name,
                api_key=self.api_key
            )
            
            success = plugin.load_model()
            if success:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                try:
                    response = plugin.generate_response("Test connection. Respond with 'OK'.")
                    if response and len(response.strip()) > 0:
                        self.test_completed.emit(self.provider_name, True, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                    else:
                        self.test_completed.emit(self.provider_name, False, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                except Exception as e:
                    self.test_completed.emit(self.provider_name, False, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            else:
                self.test_completed.emit(self.provider_name, False, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞")
                
        except Exception as e:
            self.test_completed.emit(self.provider_name, False, f"–û—à–∏–±–∫–∞: {str(e)}")


class ModelRefreshThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    refresh_completed = pyqtSignal(str, list, str)  # provider_name, models, error
    
    def __init__(self, provider_name: str, api_key: str):
        super().__init__()
        self.provider_name = provider_name
        self.api_key = api_key
    
    def run(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
            models = BaseLLMPlugin.refresh_provider_models(self.provider_name, self.api_key)
            
            if models:
                self.refresh_completed.emit(self.provider_name, models, "")
            else:
                self.refresh_completed.emit(self.provider_name, [], "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
                
        except Exception as e:
            self.refresh_completed.emit(self.provider_name, [], str(e))


class LLMProvidersDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    providers_updated = pyqtSignal()  # –°–∏–≥–Ω–∞–ª –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle(self.tr("üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"))
        self.setMinimumSize(800, 600)
        self.resize(900, 700)
        
        # –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        self.provider_widgets = {}
        self.test_threads = {}
        
        self.init_ui()
        self.load_settings()
    
    def tr(self, text):
        """–ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è tr –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return text
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel(self.tr("üîå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"))
        title_font = QFont()
        title_font.setPointSize(14)
        title_font.setBold(True)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title_label)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_label = QLabel(self.tr(
            "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤.\n"
            "–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—á–µ—Ç–æ–≤."
        ))
        desc_label.setWordWrap(True)
        desc_label.setStyleSheet("color: #666; margin: 10px 0;")
        layout.addWidget(desc_label)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        self.tab_widget = QTabWidget()
        
        for provider_name, config in LLM_PROVIDERS.items():
            tab = self._create_provider_tab(provider_name, config)
            icon_text = self._get_provider_icon(provider_name)
            self.tab_widget.addTab(tab, f"{icon_text} {config.display_name}")
        
        layout.addWidget(self.tab_widget)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        
        self.test_all_button = QPushButton(self.tr("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ"))
        self.test_all_button.clicked.connect(self.test_all_providers)
        buttons_layout.addWidget(self.test_all_button)
        
        buttons_layout.addStretch()
        
        self.reset_button = QPushButton(self.tr("‚Üª –°–±—Ä–æ—Å"))
        self.reset_button.clicked.connect(self.reset_to_defaults)
        buttons_layout.addWidget(self.reset_button)
        
        self.save_button = QPushButton(self.tr("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"))
        self.save_button.clicked.connect(self.save_settings)
        self.save_button.setDefault(True)
        buttons_layout.addWidget(self.save_button)
        
        self.close_button = QPushButton(self.tr("‚ùå –ó–∞–∫—Ä—ã—Ç—å"))
        self.close_button.clicked.connect(self.accept)
        buttons_layout.addWidget(self.close_button)
        
        layout.addLayout(buttons_layout)
    
    def _get_provider_icon(self, provider_name: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        icons = {
            "openai": "ü§ñ",
            "anthropic": "üß†", 
            "google": "üîç",
            "mistral": "üå™Ô∏è",
            "deepseek": "üî¨",
            "xai": "‚ùå",
            "ollama": "ü¶ô"
        }
        return icons.get(provider_name, "üîå")
    
    def _create_provider_tab(self, provider_name: str, config) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
        if provider_name not in self.provider_widgets:
            self.provider_widgets[provider_name] = {}
        
        # Scroll area –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout(scroll_widget)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        info_group = QGroupBox(self.tr("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ"))
        info_layout = QFormLayout()
        
        info_layout.addRow(self.tr("–ù–∞–∑–≤–∞–Ω–∏–µ:"), QLabel(config.display_name))
        info_layout.addRow(self.tr("–¢—Ä–µ–±—É–µ—Ç API –∫–ª—é—á:"), 
                          QLabel(self.tr("–î–∞") if config.requires_api_key else self.tr("–ù–µ—Ç")))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É vision
        vision_support = self.tr("–î–∞") if config.supports_vision else self.tr("–ù–µ—Ç (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç + OCR)")
        info_layout.addRow(self.tr("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:"), QLabel(vision_support))
        
        info_group.setLayout(info_layout)
        scroll_layout.addWidget(info_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
        api_group = QGroupBox(self.tr("üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API"))
        api_layout = QFormLayout()
        
        # API –∫–ª—é—á (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        if config.requires_api_key:
            api_key_edit = QLineEdit()
            api_key_edit.setEchoMode(QLineEdit.EchoMode.Password)
            api_key_edit.setPlaceholderText(self.tr("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á..."))
            
            # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å
            show_key_btn = QPushButton(self.tr("üëÅÔ∏è"))
            show_key_btn.setMaximumWidth(40)
            show_key_btn.clicked.connect(lambda: self._toggle_password_visibility(api_key_edit))
            
            key_layout = QHBoxLayout()
            key_layout.addWidget(api_key_edit, 1)
            key_layout.addWidget(show_key_btn)
            
            api_layout.addRow(self.tr("API –∫–ª—é—á:"), key_layout)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–∂–µ—Ç
            self.provider_widgets[provider_name]['api_key_edit'] = api_key_edit
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        model_layout = QHBoxLayout()
        model_combo = QComboBox()
        model_combo.addItems(config.models)
        if config.default_model in config.models:
            model_combo.setCurrentText(config.default_model)
        model_layout.addWidget(model_combo)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
        refresh_models_btn = QPushButton("üîÑ")
        refresh_models_btn.setToolTip(self.tr("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"))
        refresh_models_btn.setMaximumWidth(30)
        refresh_models_btn.clicked.connect(lambda: self.refresh_models(provider_name))
        model_layout.addWidget(refresh_models_btn)
        
        model_widget = QWidget()
        model_widget.setLayout(model_layout)
        api_layout.addRow(self.tr("–ú–æ–¥–µ–ª—å:"), model_widget)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Ollama
        if provider_name == "ollama":
            base_url_edit = QLineEdit()
            base_url_edit.setText("http://localhost:11434")
            base_url_edit.setPlaceholderText("http://localhost:11434")
            api_layout.addRow(self.tr("URL —Å–µ—Ä–≤–µ—Ä–∞:"), base_url_edit)
            self.provider_widgets[provider_name]['base_url_edit'] = base_url_edit
        
        api_group.setLayout(api_layout)
        scroll_layout.addWidget(api_group)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–∂–µ—Ç—ã
        self.provider_widgets[provider_name]['model_combo'] = model_combo
        self.provider_widgets[provider_name]['refresh_models_btn'] = refresh_models_btn
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        gen_group = QGroupBox(self.tr("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"))
        gen_layout = QFormLayout()
        
        # Temperature
        temp_spin = QDoubleSpinBox()
        temp_spin.setRange(0.0, 2.0)
        temp_spin.setSingleStep(0.1)
        temp_spin.setValue(0.1)
        temp_spin.setDecimals(1)
        gen_layout.addRow(self.tr("Temperature:"), temp_spin)
        
        # Max tokens
        tokens_spin = QSpinBox()
        tokens_spin.setRange(100, 8192)
        tokens_spin.setValue(4096)
        gen_layout.addRow(self.tr("Max tokens:"), tokens_spin)
        
        # Top P
        top_p_spin = QDoubleSpinBox()
        top_p_spin.setRange(0.1, 1.0)
        top_p_spin.setSingleStep(0.1)
        top_p_spin.setValue(0.9)
        top_p_spin.setDecimals(1)
        gen_layout.addRow(self.tr("Top P:"), top_p_spin)
        
        gen_group.setLayout(gen_layout)
        scroll_layout.addWidget(gen_group)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.provider_widgets[provider_name]['temperature'] = temp_spin
        self.provider_widgets[provider_name]['max_tokens'] = tokens_spin
        self.provider_widgets[provider_name]['top_p'] = top_p_spin
        
        # –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å
        test_group = QGroupBox(self.tr("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"))
        test_layout = QVBoxLayout()
        
        test_buttons_layout = QHBoxLayout()
        
        test_btn = QPushButton(self.tr("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"))
        test_btn.clicked.connect(lambda: self.test_provider(provider_name))
        test_buttons_layout.addWidget(test_btn)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        progress_bar = QProgressBar()
        progress_bar.setVisible(False)
        test_buttons_layout.addWidget(progress_bar)
        
        test_layout.addLayout(test_buttons_layout)
        
        # –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        status_label = QLabel(self.tr("–°—Ç–∞—Ç—É—Å: –ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª—Å—è"))
        status_label.setStyleSheet("padding: 5px; border: 1px solid #ddd; border-radius: 3px;")
        test_layout.addWidget(status_label)
        
        test_group.setLayout(test_layout)
        scroll_layout.addWidget(test_group)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–∂–µ—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.provider_widgets[provider_name]['test_button'] = test_btn
        self.provider_widgets[provider_name]['progress_bar'] = progress_bar
        self.provider_widgets[provider_name]['status_label'] = status_label
        
        scroll_layout.addStretch()
        scroll.setWidget(scroll_widget)
        layout.addWidget(scroll)
        
        return tab
    
    def _toggle_password_visibility(self, line_edit: QLineEdit):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è"""
        if line_edit.echoMode() == QLineEdit.EchoMode.Password:
            line_edit.setEchoMode(QLineEdit.EchoMode.Normal)
        else:
            line_edit.setEchoMode(QLineEdit.EchoMode.Password)
    
    def test_provider(self, provider_name: str):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É"""
        widgets = self.provider_widgets.get(provider_name, {})
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        config = LLM_PROVIDERS[provider_name]
        
        if config.requires_api_key:
            api_key = widgets.get('api_key_edit', QLineEdit()).text().strip()
            if not api_key:
                QMessageBox.warning(self, self.tr("–û—à–∏–±–∫–∞"), 
                                  self.tr("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"))
                return
        else:
            api_key = None
        
        model_name = widgets.get('model_combo', QComboBox()).currentText()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        test_btn = widgets.get('test_button')
        progress_bar = widgets.get('progress_bar')
        status_label = widgets.get('status_label')
        
        if test_btn:
            test_btn.setEnabled(False)
        if progress_bar:
            progress_bar.setVisible(True)
            progress_bar.setRange(0, 0)  # Indeterminate progress
        if status_label:
            status_label.setText(self.tr("–°—Ç–∞—Ç—É—Å: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."))
            status_label.setStyleSheet("padding: 5px; border: 1px solid #2196F3; border-radius: 3px; color: #2196F3;")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        test_thread = LLMProviderTestThread(provider_name, model_name, api_key)
        test_thread.test_completed.connect(self._on_test_completed)
        test_thread.start()
        
        self.test_threads[provider_name] = test_thread
    
    def _on_test_completed(self, provider_name: str, success: bool, message: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        widgets = self.provider_widgets.get(provider_name, {})
        
        test_btn = widgets.get('test_button')
        progress_bar = widgets.get('progress_bar')
        status_label = widgets.get('status_label')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        if test_btn:
            test_btn.setEnabled(True)
        if progress_bar:
            progress_bar.setVisible(False)
        
        if status_label:
            if success:
                status_label.setText(f"–°—Ç–∞—Ç—É—Å: ‚úÖ {message}")
                status_label.setStyleSheet("padding: 5px; border: 1px solid #4CAF50; border-radius: 3px; color: #4CAF50;")
            else:
                status_label.setText(f"–°—Ç–∞—Ç—É—Å: ‚ùå {message}")
                status_label.setStyleSheet("padding: 5px; border: 1px solid #F44336; border-radius: 3px; color: #F44336;")
        
        # –û—á–∏—â–∞–µ–º –ø–æ—Ç–æ–∫
        if provider_name in self.test_threads:
            del self.test_threads[provider_name]
    
    def test_all_providers(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã"""
        for provider_name in LLM_PROVIDERS.keys():
            widgets = self.provider_widgets.get(provider_name, {})
            config = LLM_PROVIDERS[provider_name]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ API –∫–ª—é—á (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
            if config.requires_api_key:
                api_key = widgets.get('api_key_edit', QLineEdit()).text().strip()
                if api_key:
                    QTimer.singleShot(100 * list(LLM_PROVIDERS.keys()).index(provider_name), 
                                    lambda p=provider_name: self.test_provider(p))
            else:
                # –î–ª—è Ollama —Ç–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ API –∫–ª—é—á–∞
                QTimer.singleShot(100 * list(LLM_PROVIDERS.keys()).index(provider_name),
                                lambda p=provider_name: self.test_provider(p))
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            llm_settings = settings_manager.get_setting('llm_providers', {})
            
            for provider_name, widgets in self.provider_widgets.items():
                provider_settings = llm_settings.get(provider_name, {})
                config = LLM_PROVIDERS[provider_name]
                
                # API –∫–ª—é—á
                if config.requires_api_key and 'api_key_edit' in widgets:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á
                    encrypted_key = settings_manager.get_encrypted_setting(f'{provider_name}_api_key')
                    if encrypted_key:
                        widgets['api_key_edit'].setText(encrypted_key)
                
                # –ú–æ–¥–µ–ª—å
                if 'model_combo' in widgets:
                    saved_model = provider_settings.get('model', config.default_model)
                    if saved_model in config.models:
                        widgets['model_combo'].setCurrentText(saved_model)
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                if 'temperature' in widgets:
                    widgets['temperature'].setValue(provider_settings.get('temperature', 0.1))
                if 'max_tokens' in widgets:
                    widgets['max_tokens'].setValue(provider_settings.get('max_tokens', 4096))
                if 'top_p' in widgets:
                    widgets['top_p'].setValue(provider_settings.get('top_p', 0.9))
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Ollama
                if provider_name == "ollama" and 'base_url_edit' in widgets:
                    widgets['base_url_edit'].setText(provider_settings.get('base_url', 'http://localhost:11434'))
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ LLM: {e}")
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        try:
            llm_settings = {}
            
            for provider_name, widgets in self.provider_widgets.items():
                config = LLM_PROVIDERS[provider_name]
                provider_settings = {}
                
                # API –∫–ª—é—á
                if config.requires_api_key and 'api_key_edit' in widgets:
                    api_key = widgets['api_key_edit'].text().strip()
                    if api_key:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á
                        settings_manager.save_encrypted_setting(f'{provider_name}_api_key', api_key)
                
                # –ú–æ–¥–µ–ª—å
                if 'model_combo' in widgets:
                    provider_settings['model'] = widgets['model_combo'].currentText()
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                if 'temperature' in widgets:
                    provider_settings['temperature'] = widgets['temperature'].value()
                if 'max_tokens' in widgets:
                    provider_settings['max_tokens'] = widgets['max_tokens'].value()
                if 'top_p' in widgets:
                    provider_settings['top_p'] = widgets['top_p'].value()
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Ollama
                if provider_name == "ollama" and 'base_url_edit' in widgets:
                    provider_settings['base_url'] = widgets['base_url_edit'].text()
                
                llm_settings[provider_name] = provider_settings
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ settings_manager
            settings_manager.save_setting('llm_providers', llm_settings)
            settings_manager.save_settings()
            
            QMessageBox.information(self, self.tr("–£—Å–ø–µ—Ö"), 
                                  self.tr("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"))
            
            self.providers_updated.emit()
            
        except Exception as e:
            QMessageBox.critical(self, self.tr("–û—à–∏–±–∫–∞"), 
                               self.tr(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}"))
    
    def reset_to_defaults(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        reply = QMessageBox.question(self, self.tr("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"),
                                   self.tr("–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?"),
                                   QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
        
        if reply == QMessageBox.StandardButton.Yes:
            for provider_name, widgets in self.provider_widgets.items():
                config = LLM_PROVIDERS[provider_name]
                
                # –û—á–∏—â–∞–µ–º API –∫–ª—é—á
                if 'api_key_edit' in widgets:
                    widgets['api_key_edit'].clear()
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å
                if 'model_combo' in widgets:
                    widgets['model_combo'].setCurrentText(config.default_model)
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                if 'temperature' in widgets:
                    widgets['temperature'].setValue(0.1)
                if 'max_tokens' in widgets:
                    widgets['max_tokens'].setValue(4096)
                if 'top_p' in widgets:
                    widgets['top_p'].setValue(0.9)
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                if 'status_label' in widgets:
                    widgets['status_label'].setText(self.tr("–°—Ç–∞—Ç—É—Å: –ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª—Å—è"))
                    widgets['status_label'].setStyleSheet("padding: 5px; border: 1px solid #ddd; border-radius: 3px;")
    
    def get_provider_settings(self, provider_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        widgets = self.provider_widgets.get(provider_name, {})
        config = LLM_PROVIDERS[provider_name]
        
        settings = {
            'model': widgets.get('model_combo', QComboBox()).currentText(),
            'temperature': widgets.get('temperature', QDoubleSpinBox()).value(),
            'max_tokens': widgets.get('max_tokens', QSpinBox()).value(),
            'top_p': widgets.get('top_p', QDoubleSpinBox()).value(),
        }
        
        if config.requires_api_key and 'api_key_edit' in widgets:
            settings['api_key'] = widgets['api_key_edit'].text().strip()
        
        if provider_name == "ollama" and 'base_url_edit' in widgets:
            settings['base_url'] = widgets['base_url_edit'].text()
        
        return settings
    
    def refresh_models(self, provider_name: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        widgets = self.provider_widgets.get(provider_name, {})
        config = LLM_PROVIDERS[provider_name]
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        api_key = None
        if config.requires_api_key:
            api_key_edit = widgets.get('api_key_edit')
            if api_key_edit:
                api_key = api_key_edit.text().strip()
                if not api_key:
                    QMessageBox.warning(self, self.tr("–û—à–∏–±–∫–∞"), 
                                      self.tr("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π"))
                    return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã
        model_combo = widgets.get('model_combo')
        refresh_btn = widgets.get('refresh_models_btn')
        
        if not model_combo:
            return
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        if refresh_btn:
            refresh_btn.setEnabled(False)
            refresh_btn.setText("‚è≥")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        current_model = model_combo.currentText()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        refresh_thread = ModelRefreshThread(provider_name, api_key)
        refresh_thread.refresh_completed.connect(
            lambda pn, models, error: self._on_models_refreshed(pn, models, error, current_model)
        )
        refresh_thread.start()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ç–æ–∫
        self.refresh_threads = getattr(self, 'refresh_threads', {})
        self.refresh_threads[provider_name] = refresh_thread
    
    def _on_models_refreshed(self, provider_name: str, models: list, error: str, previous_model: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
        widgets = self.provider_widgets.get(provider_name, {})
        model_combo = widgets.get('model_combo')
        refresh_btn = widgets.get('refresh_models_btn')
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        if refresh_btn:
            refresh_btn.setEnabled(True)
            refresh_btn.setText("üîÑ")
        
        if error:
            QMessageBox.warning(self, self.tr("–û—à–∏–±–∫–∞"), 
                              self.tr(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π: {error}"))
            return
        
        if not model_combo or not models:
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        model_combo.clear()
        model_combo.addItems(models)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é
        if previous_model in models:
            model_combo.setCurrentText(previous_model)
        elif models:
            model_combo.setCurrentIndex(0)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        QMessageBox.information(self, self.tr("–£—Å–ø–µ—Ö"), 
                              self.tr(f"–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π."))
        
        # –û—á–∏—â–∞–µ–º –ø–æ—Ç–æ–∫
        if hasattr(self, 'refresh_threads') and provider_name in self.refresh_threads:
            del self.refresh_threads[provider_name]
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        for thread in self.test_threads.values():
            if thread.isRunning():
                thread.terminate()
                thread.wait(1000)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
        if hasattr(self, 'refresh_threads'):
            for thread in self.refresh_threads.values():
                if thread.isRunning():
                    thread.terminate()
                    thread.wait(1000)
        
        event.accept() 