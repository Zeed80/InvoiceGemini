"""
–î–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Paperless-AI —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
–ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –æ–±—É—á–µ–Ω–∏–µ
"""
from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit,
    QPushButton, QCheckBox, QSpinBox, QDoubleSpinBox,
    QGroupBox, QFormLayout, QTextEdit, QMessageBox,
    QTabWidget, QWidget, QComboBox, QListWidget, QProgressBar,
    QTableWidget, QTableWidgetItem, QHeaderView, QFileDialog
)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont
import logging
from typing import Dict, Any, Optional
from pathlib import Path
import json
from datetime import datetime


class CustomRuleWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞"""
    
    rule_saved = pyqtSignal(dict)
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self._init_ui()
    
    def _init_ui(self):
        layout = QVBoxLayout(self)
        
        # –§–æ—Ä–º–∞ –ø—Ä–∞–≤–∏–ª–∞
        form_group = QGroupBox(self.tr("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∞–≤–∏–ª–∞"))
        form_layout = QFormLayout()
        
        self.name_edit = QLineEdit()
        self.name_edit.setPlaceholderText(self.tr("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞"))
        form_layout.addRow(self.tr("–ù–∞–∑–≤–∞–Ω–∏–µ:"), self.name_edit)
        
        self.pattern_edit = QLineEdit()
        self.pattern_edit.setPlaceholderText(self.tr("Regex –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"))
        form_layout.addRow(self.tr("–ü–∞—Ç—Ç–µ—Ä–Ω:"), self.pattern_edit)
        
        self.tags_edit = QLineEdit()
        self.tags_edit.setPlaceholderText(self.tr("—Ç–µ–≥1, —Ç–µ–≥2, —Ç–µ–≥3"))
        form_layout.addRow(self.tr("–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):"), self.tags_edit)
        
        self.confidence_spin = QDoubleSpinBox()
        self.confidence_spin.setRange(0.1, 1.0)
        self.confidence_spin.setSingleStep(0.05)
        self.confidence_spin.setValue(1.0)
        form_layout.addRow(self.tr("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:"), self.confidence_spin)
        
        self.enabled_check = QCheckBox(self.tr("–ü—Ä–∞–≤–∏–ª–æ –∞–∫—Ç–∏–≤–Ω–æ"))
        self.enabled_check.setChecked(True)
        form_layout.addRow("", self.enabled_check)
        
        form_group.setLayout(form_layout)
        layout.addWidget(form_group)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        
        self.save_btn = QPushButton(self.tr("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ"))
        self.save_btn.clicked.connect(self._save_rule)
        buttons_layout.addWidget(self.save_btn)
        
        self.clear_btn = QPushButton(self.tr("–û—á–∏—Å—Ç–∏—Ç—å"))
        self.clear_btn.clicked.connect(self._clear_form)
        buttons_layout.addWidget(self.clear_btn)
        
        layout.addLayout(buttons_layout)
        
        # –ü—Ä–∏–º–µ—Ä—ã
        examples_group = QGroupBox(self.tr("–ü—Ä–∏–º–µ—Ä—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"))
        examples_layout = QVBoxLayout()
        
        examples_text = QTextEdit()
        examples_text.setReadOnly(True)
        examples_text.setMaximumHeight(100)
        examples_text.setPlainText(
            "–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '—Å—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä–∞'\n"
            "Regex: '\\d{2}\\.\\d{2}\\.\\d{4}' (–¥–∞—Ç–∞)\n"
            "–õ—é–±–æ–µ —Å–ª–æ–≤–æ: '.*—É—Å–ª—É–≥.*' (—Å–æ–¥–µ—Ä–∂–∏—Ç '—É—Å–ª—É–≥')\n"
            "–ù–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏: '^–û–û–û' (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '–û–û–û')"
        )
        examples_layout.addWidget(examples_text)
        
        examples_group.setLayout(examples_layout)
        layout.addWidget(examples_group)
    
    def _save_rule(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ"""
        if not self.name_edit.text() or not self.pattern_edit.text():
            QMessageBox.warning(self, self.tr("–û—à–∏–±–∫–∞"), 
                               self.tr("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω"))
            return
        
        tags = [tag.strip() for tag in self.tags_edit.text().split(',') if tag.strip()]
        if not tags:
            QMessageBox.warning(self, self.tr("–û—à–∏–±–∫–∞"), 
                               self.tr("–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥"))
            return
        
        rule_data = {
            "rule_id": f"rule_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            "name": self.name_edit.text(),
            "pattern": self.pattern_edit.text(),
            "tags": tags,
            "confidence": self.confidence_spin.value(),
            "enabled": self.enabled_check.isChecked()
        }
        
        self.rule_saved.emit(rule_data)
        self._clear_form()
        
        QMessageBox.information(self, self.tr("–£—Å–ø–µ—Ö"), 
                               self.tr(f"–ü—Ä–∞–≤–∏–ª–æ '{rule_data['name']}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!"))
    
    def _clear_form(self):
        """–û—á–∏—â–∞–µ—Ç —Ñ–æ—Ä–º—É"""
        self.name_edit.clear()
        self.pattern_edit.clear()
        self.tags_edit.clear()
        self.confidence_spin.setValue(1.0)
        self.enabled_check.setChecked(True)


class StatisticsWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self._init_ui()
    
    def _init_ui(self):
        layout = QVBoxLayout(self)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary_group = QGroupBox(self.tr("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        summary_layout = QFormLayout()
        
        self.total_docs_label = QLabel("0")
        summary_layout.addRow(self.tr("–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:"), self.total_docs_label)
        
        self.total_suggested_label = QLabel("0")
        summary_layout.addRow(self.tr("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ —Ç–µ–≥–æ–≤:"), self.total_suggested_label)
        
        self.total_applied_label = QLabel("0")
        summary_layout.addRow(self.tr("–ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Ç–µ–≥–æ–≤:"), self.total_applied_label)
        
        self.acceptance_rate_label = QLabel("0%")
        summary_layout.addRow(self.tr("–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è:"), self.acceptance_rate_label)
        
        self.session_duration_label = QLabel("0:00:00")
        summary_layout.addRow(self.tr("–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏:"), self.session_duration_label)
        
        summary_group.setLayout(summary_layout)
        layout.addWidget(summary_group)
        
        # –¢–æ–ø —Ç–µ–≥–æ–≤
        top_tags_group = QGroupBox(self.tr("–¢–æ–ø-10 —Ç–µ–≥–æ–≤ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"))
        top_tags_layout = QVBoxLayout()
        
        self.top_tags_table = QTableWidget()
        self.top_tags_table.setColumnCount(4)
        self.top_tags_table.setHorizontalHeaderLabels([
            self.tr("–¢–µ–≥"), 
            self.tr("–¢–æ—á–Ω–æ—Å—Ç—å"), 
            self.tr("–ü—Ä–∏–º–µ–Ω–µ–Ω–æ"), 
            self.tr("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        ])
        self.top_tags_table.horizontalHeader().setStretchLastSection(True)
        self.top_tags_table.setMaximumHeight(250)
        
        top_tags_layout.addWidget(self.top_tags_table)
        top_tags_group.setLayout(top_tags_layout)
        layout.addWidget(top_tags_group)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_layout = QHBoxLayout()
        
        self.refresh_btn = QPushButton(self.tr("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"))
        self.refresh_btn.clicked.connect(self.refresh_statistics)
        buttons_layout.addWidget(self.refresh_btn)
        
        self.export_btn = QPushButton(self.tr("üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"))
        self.export_btn.clicked.connect(self.export_statistics)
        buttons_layout.addWidget(self.export_btn)
        
        buttons_layout.addStretch()
        
        layout.addLayout(buttons_layout)
    
    def update_statistics(self, stats: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            self.total_docs_label.setText(str(stats.get("total_documents", 0)))
            self.total_suggested_label.setText(str(stats.get("total_tags_suggested", 0)))
            self.total_applied_label.setText(str(stats.get("total_tags_applied", 0)))
            
            acceptance_rate = stats.get("acceptance_rate", 0) * 100
            self.acceptance_rate_label.setText(f"{acceptance_rate:.1f}%")
            
            self.session_duration_label.setText(stats.get("session_duration", "0:00:00"))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ø —Ç–µ–≥–æ–≤
            tag_accuracy = stats.get("tag_accuracy", {})
            self.top_tags_table.setRowCount(0)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏
            sorted_tags = sorted(
                tag_accuracy.items(), 
                key=lambda x: x[1].get("accuracy", 0), 
                reverse=True
            )[:10]
            
            for row, (tag_name, tag_stats) in enumerate(sorted_tags):
                self.top_tags_table.insertRow(row)
                
                # –¢–µ–≥
                self.top_tags_table.setItem(row, 0, QTableWidgetItem(tag_name))
                
                # –¢–æ—á–Ω–æ—Å—Ç—å
                accuracy = tag_stats.get("accuracy", 0) * 100
                accuracy_item = QTableWidgetItem(f"{accuracy:.1f}%")
                self.top_tags_table.setItem(row, 1, accuracy_item)
                
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–æ
                applied = QTableWidgetItem(str(tag_stats.get("applied", 0)))
                self.top_tags_table.setItem(row, 2, applied)
                
                # –û—Ç–∫–ª–æ–Ω–µ–Ω–æ
                rejected = QTableWidgetItem(str(tag_stats.get("rejected", 0)))
                self.top_tags_table.setItem(row, 3, rejected)
            
            self.top_tags_table.resizeColumnsToContents()
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def refresh_statistics(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ä–æ–¥–∏—Ç–µ–ª–µ–º)"""
        pass
    
    def export_statistics(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ä–æ–¥–∏—Ç–µ–ª–µ–º)"""
        pass


class PaperlessAIManagerDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ Paperless-AI"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle(self.tr("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Paperless-AI"))
        self.setMinimumSize(800, 700)
        
        self.ai_plugin = None
        self.custom_rules = []
        
        self._init_ui()
        self._load_settings()
    
    def _init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        
        # –í–∫–ª–∞–¥–∫–∏
        tabs = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
        tabs.addTab(self._create_rules_tab(), self.tr("üìã –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞"))
        
        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        tabs.addTab(self._create_statistics_tab(), self.tr("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        
        # –í–∫–ª–∞–¥–∫–∞ –æ–±—É—á–µ–Ω–∏—è
        tabs.addTab(self._create_learning_tab(), self.tr("üéì –û–±—É—á–µ–Ω–∏–µ"))
        
        layout.addWidget(tabs)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        
        buttons_layout.addStretch()
        
        self.close_btn = QPushButton(self.tr("–ó–∞–∫—Ä—ã—Ç—å"))
        self.close_btn.clicked.connect(self.accept)
        buttons_layout.addWidget(self.close_btn)
        
        layout.addLayout(buttons_layout)
    
    def _create_rules_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
        self.rule_widget = CustomRuleWidget()
        self.rule_widget.rule_saved.connect(self._on_rule_saved)
        layout.addWidget(self.rule_widget)
        
        # –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª
        rules_group = QGroupBox(self.tr("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞"))
        rules_layout = QVBoxLayout()
        
        self.rules_table = QTableWidget()
        self.rules_table.setColumnCount(5)
        self.rules_table.setHorizontalHeaderLabels([
            self.tr("–ù–∞–∑–≤–∞–Ω–∏–µ"), 
            self.tr("–ü–∞—Ç—Ç–µ—Ä–Ω"), 
            self.tr("–¢–µ–≥–∏"), 
            self.tr("–ê–∫—Ç–∏–≤–Ω–æ"),
            self.tr("–î–µ–π—Å—Ç–≤–∏—è")
        ])
        self.rules_table.horizontalHeader().setStretchLastSection(True)
        
        rules_layout.addWidget(self.rules_table)
        rules_group.setLayout(rules_layout)
        layout.addWidget(rules_group)
        
        return widget
    
    def _create_statistics_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.statistics_widget = StatisticsWidget()
        self.statistics_widget.refresh_statistics = self._refresh_statistics
        self.statistics_widget.export_statistics = self._export_statistics
        return self.statistics_widget
    
    def _create_learning_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –æ–±—É—á–µ–Ω–∏—è"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—É—á–µ–Ω–∏–∏
        info_group = QGroupBox(self.tr("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—É—á–µ–Ω–∏–∏"))
        info_layout = QVBoxLayout()
        
        info_text = QLabel(
            self.tr(
                "–°–∏—Å—Ç–µ–º–∞ —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ç–µ–≥–∞—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è "
                "–∫–∞—á–µ—Å—Ç–≤–∞ AI —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è. –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è "
                "–∫–∞—Å—Ç–æ–º–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏–ª–∏ –∞–Ω–∞–ª–∏–∑–∞."
            )
        )
        info_text.setWordWrap(True)
        info_layout.addWidget(info_text)
        
        info_group.setLayout(info_layout)
        layout.addWidget(info_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è
        settings_group = QGroupBox(self.tr("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è"))
        settings_layout = QFormLayout()
        
        self.enable_learning_check = QCheckBox(self.tr("–í–∫–ª—é—á–∏—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"))
        self.enable_learning_check.setChecked(True)
        settings_layout.addRow("", self.enable_learning_check)
        
        self.learning_history_limit = QSpinBox()
        self.learning_history_limit.setRange(100, 10000)
        self.learning_history_limit.setValue(1000)
        settings_layout.addRow(self.tr("–†–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏:"), self.learning_history_limit)
        
        settings_group.setLayout(settings_layout)
        layout.addWidget(settings_group)
        
        # –î–µ–π—Å—Ç–≤–∏—è
        actions_group = QGroupBox(self.tr("–î–µ–π—Å—Ç–≤–∏—è"))
        actions_layout = QVBoxLayout()
        
        export_learning_btn = QPushButton(self.tr("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"))
        export_learning_btn.clicked.connect(self._export_learning_data)
        actions_layout.addWidget(export_learning_btn)
        
        clear_history_btn = QPushButton(self.tr("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è"))
        clear_history_btn.clicked.connect(self._clear_learning_history)
        actions_layout.addWidget(clear_history_btn)
        
        actions_group.setLayout(actions_layout)
        layout.addWidget(actions_group)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
        learning_stats_group = QGroupBox(self.tr("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"))
        learning_stats_layout = QFormLayout()
        
        self.history_size_label = QLabel("0")
        learning_stats_layout.addRow(self.tr("–ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏:"), self.history_size_label)
        
        self.unique_tags_label = QLabel("0")
        learning_stats_layout.addRow(self.tr("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤:"), self.unique_tags_label)
        
        learning_stats_group.setLayout(learning_stats_layout)
        layout.addWidget(learning_stats_group)
        
        layout.addStretch()
        
        return widget
    
    def _on_rule_saved(self, rule_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞"""
        try:
            if self.ai_plugin and hasattr(self.ai_plugin, 'add_custom_rule'):
                from app.plugins.integrations.paperless_ai_advanced import CustomTaggingRule
                
                rule = CustomTaggingRule(
                    rule_id=rule_data["rule_id"],
                    name=rule_data["name"],
                    pattern=rule_data["pattern"],
                    tags=rule_data["tags"],
                    enabled=rule_data["enabled"],
                    confidence=rule_data["confidence"]
                )
                
                if self.ai_plugin.add_custom_rule(rule):
                    self._refresh_rules_table()
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
                self.custom_rules.append(rule_data)
                self._refresh_rules_table()
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
                if not self.ai_plugin:
                    QMessageBox.information(
                        self, 
                        self.tr("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
                        self.tr("–ü—Ä–∞–≤–∏–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ. –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Paperless-AI Advanced –ø–ª–∞–≥–∏–Ω.")
                    )
                
        except Exception as e:
            QMessageBox.critical(self, self.tr("–û—à–∏–±–∫–∞"), 
                                self.tr(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞: {e}"))
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞: {e}", exc_info=True)
    
    def _refresh_rules_table(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∞–≤–∏–ª"""
        try:
            self.rules_table.setRowCount(0)
            
            rules_to_display = []
            if self.ai_plugin:
                rules_to_display = [rule.to_dict() for rule in self.ai_plugin.custom_rules.values()]
            else:
                rules_to_display = self.custom_rules
            
            for row, rule in enumerate(rules_to_display):
                self.rules_table.insertRow(row)
                
                # –ù–∞–∑–≤–∞–Ω–∏–µ
                self.rules_table.setItem(row, 0, QTableWidgetItem(rule["name"]))
                
                # –ü–∞—Ç—Ç–µ—Ä–Ω
                self.rules_table.setItem(row, 1, QTableWidgetItem(rule["pattern"]))
                
                # –¢–µ–≥–∏
                tags_str = ", ".join(rule["tags"])
                self.rules_table.setItem(row, 2, QTableWidgetItem(tags_str))
                
                # –ê–∫—Ç–∏–≤–Ω–æ
                enabled_str = "‚úì" if rule["enabled"] else "‚úó"
                self.rules_table.setItem(row, 3, QTableWidgetItem(enabled_str))
                
                # –î–µ–π—Å—Ç–≤–∏—è
                actions_widget = QWidget()
                actions_layout = QHBoxLayout(actions_widget)
                actions_layout.setContentsMargins(2, 2, 2, 2)
                
                delete_btn = QPushButton("üóë")
                delete_btn.setMaximumWidth(40)
                delete_btn.clicked.connect(lambda checked, r=rule["rule_id"]: self._delete_rule(r))
                actions_layout.addWidget(delete_btn)
                
                self.rules_table.setCellWidget(row, 4, actions_widget)
            
            self.rules_table.resizeColumnsToContents()
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∞–≤–∏–ª: {e}")
    
    def _delete_rule(self, rule_id: str):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ"""
        reply = QMessageBox.question(
            self, 
            self.tr("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"), 
            self.tr("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–æ?"),
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            try:
                if self.ai_plugin:
                    self.ai_plugin.remove_custom_rule(rule_id)
                else:
                    self.custom_rules = [r for r in self.custom_rules if r["rule_id"] != rule_id]
                
                self._refresh_rules_table()
                
            except Exception as e:
                QMessageBox.critical(self, self.tr("–û—à–∏–±–∫–∞"), 
                                    self.tr(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞: {e}"))
    
    def _refresh_statistics(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            if self.ai_plugin:
                stats = self.ai_plugin.get_statistics()
                self.statistics_widget.update_statistics(stats)
            
        except Exception as e:
            QMessageBox.critical(self, self.tr("–û—à–∏–±–∫–∞"), 
                                self.tr(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"))
    
    def _export_statistics(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                self.tr("–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"),
                f"paperless_ai_stats_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                self.tr("JSON —Ñ–∞–π–ª—ã (*.json)")
            )
            
            if file_path:
                if self.ai_plugin:
                    stats = self.ai_plugin.get_statistics()
                    
                    with open(file_path, 'w', encoding='utf-8') as f:
                        json.dump(stats, f, indent=2, ensure_ascii=False)
                    
                    QMessageBox.information(self, self.tr("–£—Å–ø–µ—Ö"), 
                                           self.tr(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {file_path}"))
                
        except Exception as e:
            QMessageBox.critical(self, self.tr("–û—à–∏–±–∫–∞"), 
                                self.tr(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"))
    
    def _export_learning_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        try:
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                self.tr("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"),
                f"learning_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                self.tr("JSON —Ñ–∞–π–ª—ã (*.json)")
            )
            
            if file_path and self.ai_plugin:
                if self.ai_plugin.export_learning_data(Path(file_path)):
                    QMessageBox.information(self, self.tr("–£—Å–ø–µ—Ö"), 
                                           self.tr(f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {file_path}"))
                
        except Exception as e:
            QMessageBox.critical(self, self.tr("–û—à–∏–±–∫–∞"), 
                                self.tr(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}"))
    
    def _clear_learning_history(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è"""
        reply = QMessageBox.question(
            self,
            self.tr("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"),
            self.tr("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."),
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            try:
                if self.ai_plugin:
                    self.ai_plugin.suggestion_history.clear()
                    QMessageBox.information(self, self.tr("–£—Å–ø–µ—Ö"), 
                                           self.tr("–ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è –æ—á–∏—â–µ–Ω–∞"))
                
            except Exception as e:
                QMessageBox.critical(self, self.tr("–û—à–∏–±–∫–∞"), 
                                    self.tr(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}"))
    
    def _load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            self._refresh_rules_table()
            self._refresh_statistics()
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def set_ai_plugin(self, plugin):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–≥–∏–Ω AI –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        self.ai_plugin = plugin
        self._refresh_rules_table()
        self._refresh_statistics()

