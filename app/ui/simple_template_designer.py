#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä —à–∞–±–ª–æ–Ω–æ–≤ –∫–∞–∫ fallback –≤–∞—Ä–∏–∞–Ω—Ç.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π ExportTemplateDesigner –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
"""

from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QPushButton,
    QLabel, QTextEdit, QMessageBox, QTabWidget, QWidget,
    QFormLayout, QLineEdit, QComboBox, QCheckBox
)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont

class SimpleTemplateDesigner(QDialog):
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä —à–∞–±–ª–æ–Ω–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞.
    –ú–µ–Ω—å—à–µ —Ñ—É–Ω–∫—Ü–∏–π, –Ω–æ –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π.
    """
    
    # –°–∏–≥–Ω–∞–ª—ã
    template_saved = pyqtSignal(str)
    template_applied = pyqtSignal(dict)
    
    def __init__(self, current_results=None, parent=None):
        super().__init__(parent)
        self.current_results = current_results or {}
        
        self.init_ui()
        self.populate_preview()
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("üé® –ü—Ä–æ—Å—Ç–æ–π –¥–∏–∑–∞–π–Ω–µ—Ä —à–∞–±–ª–æ–Ω–æ–≤ - InvoiceGemini")
        self.setMinimumSize(800, 600)
        self.resize(1000, 700)
        
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä —à–∞–±–ª–æ–Ω–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞")
        title_font = QFont()
        title_font.setPointSize(14)
        title_font.setBold(True)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title_label)
        
        # –í–∫–ª–∞–¥–∫–∏
        tabs = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_tab = self.create_settings_tab()
        tabs.addTab(settings_tab, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        preview_tab = self.create_preview_tab()
        tabs.addTab(preview_tab, "üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
        
        layout.addWidget(tabs)
        
        # –ö–Ω–æ–ø–∫–∏
        button_layout = QHBoxLayout()
        
        self.save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω")
        self.save_btn.clicked.connect(self.save_template)
        
        self.export_btn = QPushButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç")
        self.export_btn.clicked.connect(self.export_data)
        
        self.close_btn = QPushButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å")
        self.close_btn.clicked.connect(self.close)
        
        button_layout.addWidget(self.save_btn)
        button_layout.addWidget(self.export_btn)
        button_layout.addStretch()
        button_layout.addWidget(self.close_btn)
        
        layout.addLayout(button_layout)
    
    def create_settings_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        widget = QWidget()
        layout = QFormLayout(widget)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.template_name = QLineEdit("–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω")
        layout.addRow("üìù –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:", self.template_name)
        
        self.template_format = QComboBox()
        self.template_format.addItems(["Excel (.xlsx)", "CSV (.csv)", "HTML (.html)"])
        layout.addRow("üìÑ –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:", self.template_format)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        self.include_header = QCheckBox("–í–∫–ª—é—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫")
        self.include_header.setChecked(True)
        layout.addRow("üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫:", self.include_header)
        
        self.header_text = QLineEdit("–û—Ç—á—ë—Ç –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—á–µ—Ç–æ–≤")
        layout.addRow("   –¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞:", self.header_text)
        
        self.include_footer = QCheckBox("–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–≤–∞–ª")
        self.include_footer.setChecked(True)
        layout.addRow("üìã –ü–æ–¥–≤–∞–ª:", self.include_footer)
        
        self.footer_text = QLineEdit("–°–æ–∑–¥–∞–Ω–æ InvoiceGemini")
        layout.addRow("   –¢–µ–∫—Å—Ç –ø–æ–¥–≤–∞–ª–∞:", self.footer_text)
        
        self.include_timestamp = QCheckBox("–í–∫–ª—é—á–∏—Ç—å –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è")
        self.include_timestamp.setChecked(True)
        layout.addRow("üïí –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:", self.include_timestamp)
        
        return widget
    
    def create_preview_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        preview_label = QLabel("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:")
        layout.addWidget(preview_label)
        
        self.preview_text = QTextEdit()
        self.preview_text.setReadOnly(True)
        layout.addWidget(self.preview_text)
        
        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
        refresh_btn.clicked.connect(self.populate_preview)
        layout.addWidget(refresh_btn)
        
        return widget
    
    def populate_preview(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã–º–∏"""
        preview_html = """
        <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .header { text-align: center; font-size: 18px; font-weight: bold; margin-bottom: 20px; }
                .footer { text-align: center; font-size: 12px; color: gray; margin-top: 20px; }
                table { border-collapse: collapse; width: 100%; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                th { background-color: #f2f2f2; }
            </style>
        </head>
        <body>
        """
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if hasattr(self, 'include_header') and self.include_header.isChecked():
            header_text = self.header_text.text() if hasattr(self, 'header_text') else "–û—Ç—á—ë—Ç –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—á–µ—Ç–æ–≤"
            preview_html += f'<div class="header">{header_text}</div>\n'
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
        if self.current_results:
            preview_html += "<table>\n"
            
            if isinstance(self.current_results, dict) and "batch_results" in self.current_results:
                # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                batch_data = self.current_results["batch_results"]
                if batch_data:
                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                    headers = list(batch_data[0].keys())
                    preview_html += "<tr>"
                    for header in headers:
                        preview_html += f"<th>{header}</th>"
                    preview_html += "</tr>\n"
                    
                    # –î–∞–Ω–Ω—ã–µ
                    for row_data in batch_data:
                        preview_html += "<tr>"
                        for header in headers:
                            value = row_data.get(header, "")
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                            if "\n" in str(value):
                                value = str(value).replace("\n", "<br/>")
                            preview_html += f"<td>{value}</td>"
                        preview_html += "</tr>\n"
            else:
                # –û–¥–∏–Ω–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                preview_html += "<tr><th>–ü–æ–ª–µ</th><th>–ó–Ω–∞—á–µ–Ω–∏–µ</th></tr>\n"
                for key, value in self.current_results.items():
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                    if "\n" in str(value):
                        value = str(value).replace("\n", "<br/>")
                    preview_html += f"<tr><td>{key}</td><td>{value}</td></tr>\n"
            
            preview_html += "</table>\n"
        else:
            preview_html += "<p><em>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</em></p>\n"
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        if hasattr(self, 'include_timestamp') and self.include_timestamp.isChecked():
            from datetime import datetime
            timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            preview_html += f'<p style="font-size: 12px; color: gray;">–°–æ–∑–¥–∞–Ω–æ: {timestamp}</p>\n'
        
        # –ü–æ–¥–≤–∞–ª
        if hasattr(self, 'include_footer') and self.include_footer.isChecked():
            footer_text = self.footer_text.text() if hasattr(self, 'footer_text') else "–°–æ–∑–¥–∞–Ω–æ InvoiceGemini"
            preview_html += f'<div class="footer">{footer_text}</div>\n'
        
        preview_html += "</body></html>"
        
        self.preview_text.setHtml(preview_html)
    
    def save_template(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω"""
        template_name = self.template_name.text()
        
        template_data = {
            "name": template_name,
            "format": self.template_format.currentText(),
            "include_header": self.include_header.isChecked(),
            "header_text": self.header_text.text(),
            "include_footer": self.include_footer.isChecked(),
            "footer_text": self.footer_text.text(),
            "include_timestamp": self.include_timestamp.isChecked()
        }
        
        QMessageBox.information(
            self,
            "–®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
            f"–®–∞–±–ª–æ–Ω '{template_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ –§–æ—Ä–º–∞—Ç: {template_data['format']}\n"
            f"‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {'–î–∞' if template_data['include_header'] else '–ù–µ—Ç'}\n"
            f"‚Ä¢ –ü–æ–¥–≤–∞–ª: {'–î–∞' if template_data['include_footer'] else '–ù–µ—Ç'}\n"
            f"‚Ä¢ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {'–î–∞' if template_data['include_timestamp'] else '–ù–µ—Ç'}"
        )
        
        self.template_saved.emit(template_name)
    
    def export_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        if not self.current_results:
            QMessageBox.warning(
                self,
                "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã."
            )
            return
        
        from PyQt6.QtWidgets import QFileDialog
        
        format_text = self.template_format.currentText()
        if "Excel" in format_text:
            filter_text = "Excel files (*.xlsx)"
            default_ext = ".xlsx"
        elif "CSV" in format_text:
            filter_text = "CSV files (*.csv)"
            default_ext = ".csv"
        else:
            filter_text = "HTML files (*.html)"
            default_ext = ".html"
        
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
            f"export{default_ext}",
            filter_text
        )
        
        if file_path:
            try:
                if file_path.endswith('.html'):
                    self.export_to_html(file_path)
                elif file_path.endswith('.csv'):
                    self.export_to_csv(file_path)
                elif file_path.endswith('.xlsx'):
                    self.export_to_excel(file_path)
                
                QMessageBox.information(
                    self,
                    "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
                    f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\n{file_path}"
                )
                
            except Exception as e:
                QMessageBox.critical(
                    self,
                    "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ:\n{str(e)}"
                )
    
    def export_to_html(self, file_path):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ HTML"""
        html_content = self.preview_text.toHtml()
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
    
    def export_to_csv(self, file_path):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"""
        import csv
        
        with open(file_path, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            
            if isinstance(self.current_results, dict) and "batch_results" in self.current_results:
                # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                batch_data = self.current_results["batch_results"]
                if batch_data:
                    headers = list(batch_data[0].keys())
                    writer.writerow(headers)
                    for row_data in batch_data:
                        row = [row_data.get(h, "") for h in headers]
                        writer.writerow(row)
            else:
                # –û–¥–∏–Ω–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                writer.writerow(["–ü–æ–ª–µ", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
                for key, value in self.current_results.items():
                    writer.writerow([key, value])
    
    def export_to_excel(self, file_path):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"""
        try:
            import openpyxl
            from openpyxl.styles import Font, Alignment
            
            wb = openpyxl.Workbook()
            ws = wb.active
            ws.title = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            
            row_num = 1
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            if self.include_header.isChecked():
                ws.merge_cells(f'A{row_num}:B{row_num}')
                header_cell = ws[f'A{row_num}']
                header_cell.value = self.header_text.text()
                header_cell.font = Font(size=16, bold=True)
                header_cell.alignment = Alignment(horizontal='center')
                row_num += 2
            
            # –î–∞–Ω–Ω—ã–µ
            if isinstance(self.current_results, dict) and "batch_results" in self.current_results:
                # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                batch_data = self.current_results["batch_results"]
                if batch_data:
                    headers = list(batch_data[0].keys())
                    for col, header in enumerate(headers, 1):
                        ws.cell(row=row_num, column=col, value=header).font = Font(bold=True)
                    row_num += 1
                    
                    for row_data in batch_data:
                        for col, header in enumerate(headers, 1):
                            ws.cell(row=row_num, column=col, value=row_data.get(header, ""))
                        row_num += 1
            else:
                # –û–¥–∏–Ω–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                ws.cell(row=row_num, column=1, value="–ü–æ–ª–µ").font = Font(bold=True)
                ws.cell(row=row_num, column=2, value="–ó–Ω–∞—á–µ–Ω–∏–µ").font = Font(bold=True)
                row_num += 1
                
                for key, value in self.current_results.items():
                    ws.cell(row=row_num, column=1, value=key)
                    ws.cell(row=row_num, column=2, value=value)
                    row_num += 1
            
            # –ü–æ–¥–≤–∞–ª
            if self.include_footer.isChecked():
                row_num += 1
                ws.merge_cells(f'A{row_num}:B{row_num}')
                footer_cell = ws[f'A{row_num}']
                footer_cell.value = self.footer_text.text()
                footer_cell.font = Font(size=10, italic=True)
                footer_cell.alignment = Alignment(horizontal='center')
            
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
            if self.include_timestamp.isChecked():
                row_num += 1
                from datetime import datetime
                timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
                ws.merge_cells(f'A{row_num}:B{row_num}')
                timestamp_cell = ws[f'A{row_num}']
                timestamp_cell.value = f"–°–æ–∑–¥–∞–Ω–æ: {timestamp}"
                timestamp_cell.font = Font(size=9)
                timestamp_cell.alignment = Alignment(horizontal='center')
            
            # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
            for column in ws.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except (AttributeError, TypeError, ValueError) as e:
                        # –Ø—á–µ–π–∫–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å None –∏–ª–∏ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ç–∏–ø
                        pass
                adjusted_width = min(max_length + 2, 50)
                ws.column_dimensions[column_letter].width = adjusted_width
            
            wb.save(file_path)
            
        except ImportError:
            # Fallback –±–µ–∑ openpyxl
            raise Exception("–ú–æ–¥—É–ª—å openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CSV –∏–ª–∏ HTML —Ñ–æ—Ä–º–∞—Ç.")
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞"""
        event.accept() 