"""
–î–∏–∞–ª–æ–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
"""
import os
import sys
from pathlib import Path
from typing import Dict, Optional, Any

from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, 
    QScrollArea, QTableWidget, QTableWidgetItem, QTabWidget,
    QWidget, QGroupBox, QFrame, QSplitter, QTextEdit, QApplication
)
from PyQt6.QtCore import Qt, QTimer, pyqtSignal
from PyQt6.QtGui import QFont, QPixmap, QIcon
from app.ui.performance_optimized_widgets import OptimizedTableWidget

try:
    import fitz  # PyMuPDF –¥–ª—è PDF
    PYMUPDF_AVAILABLE = True
except ImportError:
    PYMUPDF_AVAILABLE = False

try:
    from PIL import Image
    PIL_AVAILABLE = True
except ImportError:
    PIL_AVAILABLE = False


class FileViewerDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    
    def __init__(self, file_path: str, processing_data: Dict[str, Any], parent=None):
        super().__init__(parent)
        self.file_path = file_path
        self.processing_data = processing_data
        self.filename = Path(file_path).name
        
        self._init_ui()
        self._load_file_content()
        
    def _init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –¥–∏–∞–ª–æ–≥–∞."""
        self.setWindowTitle(self.tr("–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞: {name}").format(name=self.filename))
        self.setMinimumSize(900, 700)
        self.resize(1200, 800)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(10, 10, 10, 10)
        main_layout.setSpacing(10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
        self._create_header()
        main_layout.addWidget(self.header_widget)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å —Ç–∞–±–∞–º–∏
        self.tab_widget = QTabWidget()
        main_layout.addWidget(self.tab_widget)
        
        # –¢–∞–± –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞
        self._create_file_view_tab()
        
        # –¢–∞–± —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω)
        if self.processing_data.get('status') == 'completed':
            self._create_results_tab()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self._create_buttons()
        main_layout.addWidget(self.buttons_widget)
        
        # –°—Ç–∏–ª–∏
        self.setStyleSheet("""
            QDialog {
                background-color: #f5f5f5;
            }
            QTabWidget::pane {
                border: 1px solid #ccc;
                background-color: white;
            }
            QTabWidget::tab-bar {
                alignment: left;
            }
            QTabBar::tab {
                background-color: #e0e0e0;
                padding: 8px 16px;
                margin-right: 2px;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
            }
            QTabBar::tab:selected {
                background-color: white;
                border-bottom: none;
            }
            QTabBar::tab:hover {
                background-color: #d0d0d0;
            }
        """)
        
    def _create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ."""
        self.header_widget = QGroupBox(self.tr("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ"))
        header_layout = QVBoxLayout(self.header_widget)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_layout1 = QHBoxLayout()
        
        # –ò–º—è —Ñ–∞–π–ª–∞
        filename_label = QLabel(f"üìÑ {self.filename}")
        filename_label.setFont(QFont("Arial", 12, QFont.Weight.Bold))
        info_layout1.addWidget(filename_label)
        
        info_layout1.addStretch()
        
        # –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status = self.processing_data.get('status', 'not_processed')
        status_text = {
            'not_processed': '‚è≥ ' + self.tr('–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ'),
            'processing': 'üîÑ ' + self.tr('–û–±—Ä–∞–±–æ—Ç–∫–∞...'),
            'completed': '‚úÖ ' + self.tr('–ó–∞–≤–µ—Ä—à–µ–Ω–æ'),
            'error': '‚ùå ' + self.tr('–û—à–∏–±–∫–∞')
        }.get(status, self.tr('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
        
        status_color = {
            'not_processed': '#666',
            'processing': '#2196F3',
            'completed': '#4CAF50',
            'error': '#f44336'
        }.get(status, '#666')
        
        status_label = QLabel(status_text)
        status_label.setFont(QFont("Arial", 10, QFont.Weight.Bold))
        status_label.setStyleSheet(f"color: {status_color}; padding: 4px 8px; background-color: rgba(0,0,0,0.1); border-radius: 4px;")
        info_layout1.addWidget(status_label)
        
        header_layout.addLayout(info_layout1)
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –¥–µ—Ç–∞–ª–∏
        info_layout2 = QHBoxLayout()
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        path_label = QLabel(f"üìÅ {self.file_path}")
        path_label.setFont(QFont("Arial", 9))
        path_label.setStyleSheet("color: #666;")
        info_layout2.addWidget(path_label)
        
        info_layout2.addStretch()
        
        # OCR —Å—Ç–∞—Ç—É—Å
        ocr_status = ("üü† " + self.tr("OCR —Ç—Ä–µ–±—É–µ—Ç—Å—è")) if self.processing_data.get('requires_ocr', True) else ("üü¢ " + self.tr("OCR –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"))
        ocr_label = QLabel(ocr_status)
        ocr_label.setFont(QFont("Arial", 9))
        info_layout2.addWidget(ocr_label)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–æ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if status == 'completed':
            progress = self.processing_data.get('progress', 0)
            recognized = self.processing_data.get('fields_recognized', 0)
            total = self.processing_data.get('total_fields', 0)
            
            if total > 0:
                accuracy = (recognized / total) * 100
                fields_text = f"üéØ –ü–æ–ª—è: {recognized}/{total} ({accuracy:.1f}%)"
                fields_color = "#4CAF50" if accuracy >= 80 else "#ff9800" if accuracy >= 50 else "#f44336"
                
                fields_label = QLabel(fields_text)
                fields_label.setFont(QFont("Arial", 9))
                fields_label.setStyleSheet(f"color: {fields_color}; font-weight: bold;")
                info_layout2.addWidget(fields_label)
        
        header_layout.addLayout(info_layout2)
        
    def _create_file_view_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞."""
        file_view_widget = QWidget()
        file_layout = QVBoxLayout(file_view_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        view_title = QLabel("üìñ " + self.tr("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞"))
        view_title.setFont(QFont("Arial", 11, QFont.Weight.Bold))
        file_layout.addWidget(view_title)
        
        # –û–±–ª–∞—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        self.file_content_scroll = QScrollArea()
        self.file_content_scroll.setWidgetResizable(True)
        self.file_content_scroll.setMinimumHeight(400)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        self.file_content_widget = QLabel()
        self.file_content_widget.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.file_content_widget.setStyleSheet("""
            QLabel {
                background-color: white;
                border: 1px solid #ddd;
                border-radius: 4px;
                padding: 20px;
            }
        """)
        
        self.file_content_scroll.setWidget(self.file_content_widget)
        file_layout.addWidget(self.file_content_scroll)
        
        self.tab_widget.addTab(file_view_widget, "üìñ " + self.tr("–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞"))
        
    def _create_results_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        results_widget = QWidget()
        results_layout = QVBoxLayout(results_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        results_title = QLabel("üìä " + self.tr("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏"))
        results_title.setFont(QFont("Arial", 11, QFont.Weight.Bold))
        results_layout.addWidget(results_title)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        stats_group = QGroupBox(self.tr("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        stats_layout = QHBoxLayout(stats_group)
        
        progress = self.processing_data.get('progress', 0)
        recognized = self.processing_data.get('fields_recognized', 0)
        total = self.processing_data.get('total_fields', 0)
        processing_time = self.processing_data.get('processing_time', 0)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress_label = QLabel(self.tr("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {p}%").format(p=progress))
        stats_layout.addWidget(progress_label)
        
        # –ü–æ–ª—è
        if total > 0:
            accuracy = (recognized / total) * 100
            fields_text = self.tr("üéØ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –ø–æ–ª–µ–π: {r}/{t} ({a:.1f}%)").format(r=recognized, t=total, a=accuracy)
        else:
            fields_text = self.tr("üéØ –ü–æ–ª—è –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        fields_label = QLabel(fields_text)
        stats_layout.addWidget(fields_label)
        
        # –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if processing_time > 0:
            time_text = self.tr("‚è±Ô∏è –í—Ä–µ–º—è: {t:.2f} —Å–µ–∫").format(t=processing_time)
            time_label = QLabel(time_text)
            stats_layout.addWidget(time_label)
        
        stats_layout.addStretch()
        results_layout.addWidget(stats_group)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞ - –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ)
        data_group = QGroupBox(self.tr("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"))
        data_layout = QVBoxLayout(data_group)
        
        self.results_table = OptimizedTableWidget()
        self.results_table.setColumnCount(2)
        self.results_table.setHorizontalHeaderLabels([self.tr("–ü–æ–ª–µ"), self.tr("–ó–Ω–∞—á–µ–Ω–∏–µ")])
        
        # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è)
        sample_data = [
            ("–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–û–û–û '–ü—Ä–∏–º–µ—Ä'"),
            ("‚Ññ —Å—á–µ—Ç–∞", "INV-001"),
            ("–î–∞—Ç–∞ —Å—á–µ—Ç–∞", "2025-01-20"),
            ("–°—É–º–º–∞ —Å –ù–î–°", "150 000 ‚ÇΩ"),
            ("–ù–î–° %", "20%"),
            ("–í–∞–ª—é—Ç–∞", "RUB")
        ]
        
        self.results_table.setRowCount(len(sample_data))
        for row, (field, value) in enumerate(sample_data):
            self.results_table.setItem(row, 0, QTableWidgetItem(field))
            self.results_table.setItem(row, 1, QTableWidgetItem(value))
        
        self.results_table.resizeColumnsToContents()
        self.results_table.horizontalHeader().setStretchLastSection(True)
        
        data_layout.addWidget(self.results_table)
        results_layout.addWidget(data_group)
        
        self.tab_widget.addTab(results_widget, "üìä " + self.tr("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"))
        
    def _create_buttons(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        self.buttons_widget = QWidget()
        buttons_layout = QHBoxLayout(self.buttons_widget)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–µ
        self.open_external_button = QPushButton("üîó " + self.tr("–û—Ç–∫—Ä—ã—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ"))
        self.open_external_button.setToolTip(self.tr("–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"))
        self.open_external_button.clicked.connect(self._open_external)
        buttons_layout.addWidget(self.open_external_button)
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å
        self.copy_path_button = QPushButton("üìã " + self.tr("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å"))
        self.copy_path_button.setToolTip(self.tr("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"))
        self.copy_path_button.clicked.connect(self._copy_path)
        buttons_layout.addWidget(self.copy_path_button)
        
        buttons_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç—å
        self.close_button = QPushButton("‚ùå " + self.tr("–ó–∞–∫—Ä—ã—Ç—å"))
        self.close_button.clicked.connect(self.close)
        buttons_layout.addWidget(self.close_button)
        
    def _load_file_content(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
        try:
            file_ext = Path(self.file_path).suffix.lower()
            
            if file_ext == '.pdf':
                self._load_pdf_content()
            elif file_ext in ['.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.gif']:
                self._load_image_content()
            else:
                self.file_content_widget.setText(self.tr("‚ö†Ô∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Ç–∏–ø–∞ {ext}").format(ext=file_ext))
                
        except Exception as e:
            self.file_content_widget.setText(self.tr("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {err}").format(err=str(e)))
            
    def _load_pdf_content(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ PDF —Ñ–∞–π–ª–∞."""
        if not PYMUPDF_AVAILABLE:
            self.file_content_widget.setText(self.tr("üìÑ PDF —Ñ–∞–π–ª\n\n‚ö†Ô∏è –î–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ PDF —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PyMuPDF:\npip install PyMuPDF"))
            return
            
        try:
            doc = fitz.open(self.file_path)
            if len(doc) > 0:
                # –†–µ–Ω–¥–µ—Ä–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                page = doc[0]
                pix = page.get_pixmap(matrix=fitz.Matrix(1.5, 1.5))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–±
                img_data = pix.tobytes("png")
                
                # –°–æ–∑–¥–∞–µ–º QPixmap –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ label
                pixmap = QPixmap()
                pixmap.loadFromData(img_data)
                
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                scaled_pixmap = pixmap.scaled(
                    800, 1000, 
                    Qt.AspectRatioMode.KeepAspectRatio, 
                    Qt.TransformationMode.SmoothTransformation
                )
                
                self.file_content_widget.setPixmap(scaled_pixmap)
                
                # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if len(doc) > 1:
                    info_text = self.tr("üìÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç ({pages} —Å—Ç—Ä.)\n–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞").format(pages=len(doc))
                    self.file_content_widget.setToolTip(info_text)
            else:
                self.file_content_widget.setText(self.tr("üìÑ PDF —Ñ–∞–π–ª –ø—É—Å—Ç"))
                
            doc.close()
            
        except Exception as e:
            self.file_content_widget.setText(self.tr("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF: {err}").format(err=str(e)))
            
    def _load_image_content(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        try:
            pixmap = QPixmap(self.file_path)
            if not pixmap.isNull():
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                scaled_pixmap = pixmap.scaled(
                    800, 600, 
                    Qt.AspectRatioMode.KeepAspectRatio, 
                    Qt.TransformationMode.SmoothTransformation
                )
                self.file_content_widget.setPixmap(scaled_pixmap)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–µ
                info_text = self.tr("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {w}x{h}").format(w=pixmap.width(), h=pixmap.height())
                self.file_content_widget.setToolTip(info_text)
            else:
                self.file_content_widget.setText(self.tr("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"))
                
        except Exception as e:
            self.file_content_widget.setText(self.tr("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {err}").format(err=str(e)))
            
    def _open_external(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."""
        try:
            if sys.platform.startswith('win'):
                os.startfile(self.file_path)
            elif sys.platform.startswith('darwin'):  # macOS
                os.system(f'open "{self.file_path}"')
            else:  # Linux
                os.system(f'xdg-open "{self.file_path}"')
        except Exception as e:
            print(self.tr("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: {err}").format(err=e))
            
    def _copy_path(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
        try:
            clipboard = QApplication.clipboard()
            clipboard.setText(self.file_path)
        except Exception as e:
            print(self.tr("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–∏: {err}").format(err=e)) 