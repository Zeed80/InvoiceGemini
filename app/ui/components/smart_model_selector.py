"""
Smart Model Selector - —É–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π —Å AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
–ó–∞–º–µ–Ω—è–µ—Ç 5 —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π dropdown —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
"""
from typing import Optional, Dict, Any
from pathlib import Path
from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QComboBox, 
    QLabel, QPushButton, QFrame
)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont

import logging
logger = logging.getLogger(__name__)


class SmartModelSelector(QWidget):
    """
    –£–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –º–æ–¥–µ–ª–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π dropdown –≤–º–µ—Å—Ç–æ —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫
    - –†–µ–∂–∏–º "–ê–≤—Ç–æ" —Å AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    - –û–ø–∏—Å–∞–Ω–∏—è –∏ tooltips –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    - –ü–æ–∫–∞–∑ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    
    model_changed = pyqtSignal(str)  # –ò—Å–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏
    recommendation_requested = pyqtSignal(str)  # –ó–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–∞–π–ª–∞
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö
    MODELS_INFO = {
        'auto': {
            'name': 'ü§ñ –ê–≤—Ç–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)',
            'description': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
            'speed': '–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏',
            'accuracy': '–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è',
            'requires_gpu': False,
            'requires_api': False,
            'tooltip': (
                '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å:\n'
                '‚Ä¢ PDF —Å —Ç–µ–∫—Å—Ç–æ–º ‚Üí Gemini (–±—ã—Å—Ç—Ä–æ)\n'
                '‚Ä¢ –°–ª–æ–∂–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Üí LayoutLM (—Ç–æ—á–Ω–æ)\n'
                '‚Ä¢ –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ ‚Üí Donut (–Ω–∞–¥–µ–∂–Ω–æ)'
            )
        },
        'gemini': {
            'name': 'üíé –ë—ã—Å—Ç—Ä—ã–π (Gemini)',
            'description': '–û–±–ª–∞—á–Ω–∞—è –º–æ–¥–µ–ª—å Google Gemini 2.0 Flash',
            'speed': '3-5 —Å–µ–∫',
            'accuracy': '–í—ã—Å–æ–∫–∞—è (85-90%)',
            'requires_gpu': False,
            'requires_api': True,
            'tooltip': (
                'Google Gemini 2.0 Flash:\n'
                '‚Ä¢ –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n'
                '‚Ä¢ –û—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å PDF —Ç–µ–∫—Å—Ç–æ–º\n'
                '‚Ä¢ –¢—Ä–µ–±—É–µ—Ç API –∫–ª—é—á\n'
                '‚Ä¢ –û–±–ª–∞—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞'
            )
        },
        'layoutlm': {
            'name': 'üéØ –¢–æ—á–Ω—ã–π (LayoutLM)',
            'description': 'LayoutLMv3 - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
            'speed': '10-15 —Å–µ–∫',
            'accuracy': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è (90-95%)',
            'requires_gpu': True,
            'requires_api': False,
            'tooltip': (
                'LayoutLMv3:\n'
                '‚Ä¢ –õ—É—á—à–µ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã\n'
                '‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å\n'
                '‚Ä¢ –¢—Ä–µ–±—É–µ—Ç GPU (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n'
                '‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞'
            )
        },
        'donut': {
            'name': 'üí™ –ù–∞–¥–µ–∂–Ω—ã–π (Donut)',
            'description': 'Donut - robust –º–æ–¥–µ–ª—å –¥–ª—è –ª—é–±—ã—Ö —É—Å–ª–æ–≤–∏–π',
            'speed': '8-12 —Å–µ–∫',
            'accuracy': '–•–æ—Ä–æ—à–∞—è (80-85%)',
            'requires_gpu': True,
            'requires_api': False,
            'tooltip': (
                'Donut:\n'
                '‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–∏–∑–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º\n'
                '‚Ä¢ –ù–∞–¥–µ–∂–µ–Ω –¥–ª—è —Å–∫–∞–Ω–æ–≤\n'
                '‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å\n'
                '‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞'
            )
        },
        'trocr': {
            'name': 'üìù OCR (TrOCR)',
            'description': 'TrOCR - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π OCR',
            'speed': '5-8 —Å–µ–∫',
            'accuracy': '–°—Ä–µ–¥–Ω—è—è (75-80%)',
            'requires_gpu': True,
            'requires_api': False,
            'tooltip': (
                'TrOCR:\n'
                '‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π OCR\n'
                '‚Ä¢ –•–æ—Ä–æ—à –¥–ª—è —Ä—É–∫–æ–ø–∏—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞\n'
                '‚Ä¢ –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏\n'
                '‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞'
            )
        }
    }
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.current_file = None
        self.recommendation = None
        
        self._setup_ui()
        
    def _setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(8)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏:")
        header.setStyleSheet("font-weight: 600; font-size: 12px;")
        layout.addWidget(header)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π combobox
        self.model_combo = QComboBox()
        self.model_combo.setMinimumHeight(36)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏
        for model_id, info in self.MODELS_INFO.items():
            self.model_combo.addItem(info['name'], model_id)
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
        self.model_combo.setStyleSheet("""
            QComboBox {
                background-color: white;
                border: 2px solid #bdc3c7;
                border-radius: 6px;
                padding: 6px 12px;
                font-size: 13px;
                color: #2c3e50;
            }
            
            QComboBox:hover {
                border-color: #3498db;
            }
            
            QComboBox:focus {
                border-color: #3498db;
                background-color: #f8fbfd;
            }
            
            QComboBox::drop-down {
                border: none;
                width: 20px;
            }
            
            QComboBox::down-arrow {
                image: none;
                border-left: 5px solid transparent;
                border-right: 5px solid transparent;
                border-top: 6px solid #7f8c8d;
                margin-right: 8px;
            }
            
            QComboBox QAbstractItemView {
                background-color: white;
                border: 2px solid #d5dbdb;
                selection-background-color: #e8f4f8;
                selection-color: #2c3e50;
                padding: 4px;
            }
        """)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.model_combo.currentIndexChanged.connect(self._on_model_changed)
        
        layout.addWidget(self.model_combo)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        self.info_frame = QFrame()
        self.info_frame.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border: 1px solid #e0e0e0;
                border-radius: 6px;
                padding: 8px;
            }
        """)
        
        info_layout = QVBoxLayout(self.info_frame)
        info_layout.setContentsMargins(8, 8, 8, 8)
        info_layout.setSpacing(4)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        self.description_label = QLabel()
        self.description_label.setWordWrap(True)
        self.description_label.setStyleSheet("font-size: 11px; color: #5a6c7d;")
        info_layout.addWidget(self.description_label)
        
        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        char_layout = QHBoxLayout()
        
        self.speed_label = QLabel()
        self.speed_label.setStyleSheet("font-size: 10px; color: #7f8c8d;")
        char_layout.addWidget(self.speed_label)
        
        char_layout.addStretch()
        
        self.accuracy_label = QLabel()
        self.accuracy_label.setStyleSheet("font-size: 10px; color: #7f8c8d;")
        char_layout.addWidget(self.accuracy_label)
        
        info_layout.addLayout(char_layout)
        
        layout.addWidget(self.info_frame)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è (—Å–∫—Ä—ã—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.recommendation_frame = QFrame()
        self.recommendation_frame.setVisible(False)
        self.recommendation_frame.setStyleSheet("""
            QFrame {
                background-color: #ebf5fb;
                border-left: 4px solid #3498db;
                border-radius: 4px;
                padding: 8px;
            }
        """)
        
        rec_layout = QVBoxLayout(self.recommendation_frame)
        rec_layout.setContentsMargins(8, 8, 8, 8)
        rec_layout.setSpacing(4)
        
        rec_header = QLabel("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:")
        rec_header.setStyleSheet("font-weight: 600; font-size: 11px; color: #21618c;")
        rec_layout.addWidget(rec_header)
        
        self.recommendation_label = QLabel()
        self.recommendation_label.setWordWrap(True)
        self.recommendation_label.setStyleSheet("font-size: 11px; color: #21618c;")
        rec_layout.addWidget(self.recommendation_label)
        
        layout.addWidget(self.recommendation_frame)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
        self._update_info()
    
    def _on_model_changed(self, index):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        model_id = self.model_combo.itemData(index)
        self._update_info()
        self.model_changed.emit(model_id)
        logger.info(f"Model changed to: {model_id}")
    
    def _update_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        model_id = self.get_current_model()
        info = self.MODELS_INFO.get(model_id, {})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        self.description_label.setText(info.get('description', ''))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        speed = info.get('speed', '')
        accuracy = info.get('accuracy', '')
        
        self.speed_label.setText(f"‚è±Ô∏è {speed}")
        self.accuracy_label.setText(f"üéØ {accuracy}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º tooltip
        tooltip = info.get('tooltip', '')
        self.model_combo.setToolTip(tooltip)
    
    def get_current_model(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        return self.model_combo.currentData()
    
    def set_current_model(self, model_id: str):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
        
        Args:
            model_id: ID –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
        """
        for i in range(self.model_combo.count()):
            if self.model_combo.itemData(i) == model_id:
                self.model_combo.setCurrentIndex(i)
                break
    
    def set_file_for_analysis(self, file_path: str):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        """
        self.current_file = file_path
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º "–ê–≤—Ç–æ", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        if self.get_current_model() == 'auto':
            self._show_recommendation_for_file(file_path)
    
    def _show_recommendation_for_file(self, file_path: str):
        """
        –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –º–æ–¥–µ–ª–∏ –¥–ª—è —Ñ–∞–π–ª–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        """
        try:
            recommendation = self._analyze_file_and_recommend(file_path)
            
            if recommendation:
                model_info = self.MODELS_INFO.get(recommendation['model'], {})
                
                self.recommendation_label.setText(
                    f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {model_info.get('name', recommendation['model'])}\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {recommendation.get('reason', '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä')}\n"
                    f"–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {recommendation.get('estimated_time', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                )
                
                self.recommendation_frame.setVisible(True)
                self.recommendation = recommendation
        except Exception as e:
            logger.error(f"Error analyzing file for recommendation: {e}")
            self.recommendation_frame.setVisible(False)
    
    def _analyze_file_and_recommend(self, file_path: str) -> Optional[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –∏–ª–∏ None
        """
        file_path = Path(file_path)
        
        # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        ext = file_path.suffix.lower()
        
        # PDF - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π
        if ext == '.pdf':
            try:
                from ...pdf_text_analyzer import has_text_layer
                
                if has_text_layer(str(file_path)):
                    return {
                        'model': 'gemini',
                        'confidence': 0.95,
                        'reason': 'PDF —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–ª–æ–µ–º - Gemini –¥–∞—Å—Ç –±—ã—Å—Ç—Ä—ã–π –∏ —Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
                        'estimated_time': '3-5 —Å–µ–∫'
                    }
                else:
                    return {
                        'model': 'layoutlm',
                        'confidence': 0.90,
                        'reason': 'PDF –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (—Å–∫–∞–Ω) - LayoutLM –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É',
                        'estimated_time': '10-15 —Å–µ–∫'
                    }
            except Exception as e:
                logger.warning(f"Could not analyze PDF: {e}")
                return {
                    'model': 'gemini',
                    'confidence': 0.70,
                    'reason': 'PDF —Ñ–∞–π–ª - Gemini —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç',
                    'estimated_time': '5-8 —Å–µ–∫'
                }
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        elif ext in ['.png', '.jpg', '.jpeg', '.bmp', '.tiff']:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            return {
                'model': 'donut',
                'confidence': 0.85,
                'reason': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ - Donut –Ω–∞–¥–µ–∂–µ–Ω –¥–ª—è —Å–∫–∞–Ω–æ–≤',
                'estimated_time': '8-12 —Å–µ–∫'
            }
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            'model': 'gemini',
            'confidence': 0.70,
            'reason': '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç',
            'estimated_time': '5-10 —Å–µ–∫'
        }
    
    def hide_recommendation(self):
        """–°–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        self.recommendation_frame.setVisible(False)
        self.recommendation = None
    
    def get_recommendation(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é"""
        return self.recommendation

