#!/usr/bin/env python3
"""
Integration Module for Optimized Components
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ InvoiceGemini
"""

import os
import logging
from typing import Optional, Dict, Any
from pathlib import Path

from PyQt6.QtWidgets import QApplication
from PyQt6.QtCore import QObject, pyqtSignal

from ..ui.preview_dialog import PreviewDialog as OptimizedPreviewDialog  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é
from .optimized_processor import OptimizedProcessingThread
from ..plugins.unified_plugin_manager import UnifiedPluginManager, get_unified_plugin_manager
from ..settings_manager import settings_manager


class OptimizationManager(QObject):
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    """
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    optimization_enabled = pyqtSignal(str)  # component_name
    optimization_disabled = pyqtSignal(str)  # component_name
    performance_improved = pyqtSignal(str, float)  # component_name, improvement_percent
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # –§–ª–∞–≥–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
        self.optimizations = {
            'preview_dialog': True,
            'file_processing': True,
            'plugin_system': True,
            'ui_performance': True
        }
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.plugin_manager: Optional[UnifiedPluginManager] = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.performance_stats = {
            'preview_dialog': {'load_time': 0, 'memory_usage': 0},
            'file_processing': {'throughput': 0, 'parallel_efficiency': 0},
            'plugin_system': {'plugin_count': 0, 'load_time': 0}
        }
        
        logging.info("üöÄ OptimizationManager initialized")
    
    def initialize_optimizations(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
        try:
            success_count = 0
            total_optimizations = len(self.optimizations)
            
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞–≥–∏–Ω–æ–≤
            if self.optimizations['plugin_system']:
                if self._init_plugin_system():
                    success_count += 1
                    self.optimization_enabled.emit("plugin_system")
                    logging.info("‚úÖ Plugin system optimization enabled")
            
            # 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
            if self.optimizations['file_processing']:
                if self._init_file_processing():
                    success_count += 1
                    self.optimization_enabled.emit("file_processing")
                    logging.info("‚úÖ File processing optimization enabled")
            
            # 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ preview dialog
            if self.optimizations['preview_dialog']:
                if self._init_preview_dialog():
                    success_count += 1
                    self.optimization_enabled.emit("preview_dialog")
                    logging.info("‚úÖ Preview dialog optimization enabled")
            
            # 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
            if self.optimizations['ui_performance']:
                if self._init_ui_optimizations():
                    success_count += 1
                    self.optimization_enabled.emit("ui_performance")
                    logging.info("‚úÖ UI performance optimization enabled")
            
            optimization_rate = (success_count / total_optimizations) * 100
            logging.info(f"üéØ Optimizations initialized: {success_count}/{total_optimizations} ({optimization_rate:.1f}%)")
            
            return success_count == total_optimizations
            
        except Exception as e:
            logging.error(f"Failed to initialize optimizations: {e}")
            return False
    
    def _init_plugin_system(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞–≥–∏–Ω–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            self.plugin_manager = get_unified_plugin_manager()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            self.plugin_manager.plugin_loaded.connect(self._on_plugin_loaded)
            self.plugin_manager.plugin_error.connect(self._on_plugin_error)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.plugin_manager.get_statistics()
            self.performance_stats['plugin_system'] = {
                'plugin_count': stats['total_plugins'],
                'enabled_count': stats['enabled_plugins'],
                'load_time': 0  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            }
            
            return True
            
        except Exception as e:
            logging.error(f"Plugin system optimization failed: {e}")
            return False
    
    def _init_file_processing(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            default_settings = {
                'parallel_processing': True,
                'batch_size': 3,
                'gpu_acceleration': True,
                'smart_caching': True,
                'performance_monitoring': True
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            for key, value in default_settings.items():
                setting_key = f'OptimizedProcessing.{key}'
                if isinstance(value, bool):
                    settings_manager.set_setting(setting_key, str(value).lower())
                else:
                    settings_manager.set_setting(setting_key, str(value))
            
            self.performance_stats['file_processing'] = {
                'parallel_workers': 0,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
                'throughput': 0,
                'cache_hit_rate': 0
            }
            
            return True
            
        except Exception as e:
            logging.error(f"File processing optimization failed: {e}")
            return False
    
    def _init_preview_dialog(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ preview dialog"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ preview dialog
            preview_settings = {
                'lazy_loading': True,
                'field_limit': 10,
                'auto_save_interval': 30,  # —Å–µ–∫—É–Ω–¥—ã
                'compact_ui': True
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            for key, value in preview_settings.items():
                setting_key = f'PreviewDialog.{key}'
                if isinstance(value, bool):
                    settings_manager.set_setting(setting_key, str(value).lower())
                else:
                    settings_manager.set_setting(setting_key, str(value))
            
            self.performance_stats['preview_dialog'] = {
                'load_time': 0,
                'memory_usage': 0,
                'ui_responsiveness': 100
            }
            
            return True
            
        except Exception as e:
            logging.error(f"Preview dialog optimization failed: {e}")
            return False
    
    def _init_ui_optimizations(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫ QApplication
            app = QApplication.instance()
            if app:
                # –í–∫–ª—é—á–∞–µ–º –≤—ã—Å–æ–∫–æ–µ DPI (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
                from PyQt6.QtCore import Qt
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç
                    if not app.testAttribute(Qt.ApplicationAttribute.AA_UseHighDpiPixmaps):
                        app.setAttribute(Qt.ApplicationAttribute.AA_UseHighDpiPixmaps)
                except (RuntimeError, AttributeError) as e:
                    logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AA_UseHighDpiPixmaps: {e}")
                
                try:
                    if not app.testAttribute(Qt.ApplicationAttribute.AA_EnableHighDpiScaling):
                        app.setAttribute(Qt.ApplicationAttribute.AA_EnableHighDpiScaling)
                except (RuntimeError, AttributeError) as e:
                    logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AA_EnableHighDpiScaling: {e}")
                
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç–∏–ª–µ–π
                app.setStyleSheet("""
                    QTableWidget {
                        alternate-background-color: #F5F5F5;
                        selection-background-color: #E3F2FD;
                    }
                    QGroupBox {
                        font-weight: bold;
                        border: 1px solid #CCCCCC;
                        border-radius: 3px;
                        margin-top: 0.5ex;
                    }
                    QTabWidget::pane {
                        border: 1px solid #CCCCCC;
                        border-radius: 3px;
                    }
                """)
            
            return True
            
        except Exception as e:
            logging.error(f"UI optimization failed: {e}")
            return False
    
    def create_optimized_preview_dialog(self, results=None, model_type=None, 
                                      file_path=None, parent=None) -> OptimizedPreviewDialog:
        """–°–æ–∑–¥–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π preview dialog"""
        try:
            dialog = OptimizedPreviewDialog(
                results=results,
                model_type=model_type,
                file_path=file_path,
                parent=parent
            )
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self._monitor_preview_dialog_performance(dialog)
            
            return dialog
            
        except Exception as e:
            logging.error(f"Failed to create optimized preview dialog: {e}")
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –¥–∏–∞–ª–æ–≥—É
            from ..ui.preview_dialog import PreviewDialog
            return PreviewDialog(results, model_type, file_path, parent)
    
    def create_optimized_processing_thread(self, file_paths, model_type, 
                                         ocr_lang="rus+eng", is_folder=False,
                                         model_manager=None, parent=None) -> OptimizedProcessingThread:
        """–°–æ–∑–¥–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            thread = OptimizedProcessingThread(
                file_paths=file_paths,
                model_type=model_type,
                ocr_lang=ocr_lang,
                is_folder=is_folder,
                model_manager=model_manager,
                parent=parent
            )
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self._monitor_processing_thread_performance(thread)
            
            return thread
            
        except Exception as e:
            logging.error(f"Failed to create optimized processing thread: {e}")
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –ø–æ—Ç–æ–∫—É
            from ..threads import ProcessingThread
            return ProcessingThread(file_paths, model_type, ocr_lang, is_folder, model_manager)
    
    def get_plugin_manager(self) -> Optional[UnifiedPluginManager]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤"""
        return self.plugin_manager
    
    def _monitor_preview_dialog_performance(self, dialog: OptimizedPreviewDialog):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ preview dialog"""
        try:
            import time
            start_time = time.time()
            
            def on_dialog_finished():
                load_time = time.time() - start_time
                self.performance_stats['preview_dialog']['load_time'] = load_time
                
                if load_time < 1.0:  # –ú–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã - –æ—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    improvement = 50  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å–æ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–µ–π
                    self.performance_improved.emit("preview_dialog", improvement)
            
            dialog.finished.connect(on_dialog_finished)
            
        except Exception as e:
            logging.error(f"Performance monitoring error: {e}")
    
    def _monitor_processing_thread_performance(self, thread: OptimizedProcessingThread):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            import time
            start_time = time.time()
            processed_count = 0
            
            def on_task_completed():
                nonlocal processed_count
                processed_count += 1
                
            def on_batch_completed():
                total_time = time.time() - start_time
                if total_time > 0:
                    throughput = processed_count / total_time
                    self.performance_stats['file_processing']['throughput'] = throughput
                    
                    if throughput > 2.0:  # –ë–æ–ª–µ–µ 2 —Ñ–∞–π–ª–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
                        improvement = 200  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
                        self.performance_improved.emit("file_processing", improvement)
            
            thread.processor.task_completed.connect(lambda task_id, result: on_task_completed())
            thread.processor.batch_completed.connect(lambda results: on_batch_completed())
            
        except Exception as e:
            logging.error(f"Performance monitoring error: {e}")
    
    def _on_plugin_loaded(self, plugin_id: str, metadata: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–≥–∏–Ω–∞"""
        logging.info(f"üì¶ Plugin loaded via optimization: {plugin_id}")
    
    def _on_plugin_error(self, plugin_id: str, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–ª–∞–≥–∏–Ω–∞"""
        logging.error(f"‚ùå Plugin error: {plugin_id} - {error}")
    
    def get_performance_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        report = {
            'optimization_status': self.optimizations.copy(),
            'performance_stats': self.performance_stats.copy(),
            'active_optimizations': [name for name, enabled in self.optimizations.items() if enabled],
            'timestamp': str(Path(__file__).stat().st_mtime)
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞–≥–∏–Ω–æ–≤ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if self.plugin_manager:
            report['plugin_stats'] = self.plugin_manager.get_statistics()
        
        return report
    
    def toggle_optimization(self, component: str, enabled: bool):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        if component in self.optimizations:
            self.optimizations[component] = enabled
            
            if enabled:
                self.optimization_enabled.emit(component)
                logging.info(f"‚úÖ Optimization enabled: {component}")
            else:
                self.optimization_disabled.emit(component)
                logging.info(f"‚èπÔ∏è Optimization disabled: {component}")
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logging.info("üßπ Cleaning up OptimizationManager...")
        
        if self.plugin_manager:
            self.plugin_manager.cleanup()
        
        logging.info("‚úÖ OptimizationManager cleanup completed")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_optimization_manager = None

def get_optimization_manager() -> OptimizationManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
    global _optimization_manager
    if _optimization_manager is None:
        _optimization_manager = OptimizationManager()
        _optimization_manager.initialize_optimizations()
    return _optimization_manager


def apply_optimizations_to_main_window(main_window):
    """
    –ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É
    Monkey patching –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞
    """
    try:
        optimization_manager = get_optimization_manager()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        original_show_preview_dialog = main_window.show_preview_dialog
        
        def optimized_show_preview_dialog():
            """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è show_preview_dialog"""
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è preview (–∫–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞)
                preview_data = None
                model_type = "unknown"
                file_path = ""
                
                if main_window.current_folder_path:
                    # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    if main_window.results_table.rowCount() == 0:
                        from .. import utils
                        utils.show_info_message(
                            main_window, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                            "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ñ–∞–π–ª—ã."
                        )
                        return
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                    batch_results = []
                    headers = [main_window.results_table.horizontalHeaderItem(col).text()
                              for col in range(main_window.results_table.columnCount())]
                    
                    for row in range(main_window.results_table.rowCount()):
                        row_data = {}
                        for col, header in enumerate(headers):
                            item = main_window.results_table.item(row, col)
                            row_data[header] = item.text() if item else ""
                        batch_results.append(row_data)
                    
                    preview_data = {"batch_results": batch_results}
                    file_path = main_window.current_folder_path
                    
                else:
                    # –û–¥–∏–Ω–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    if main_window.results_table.rowCount() == 0:
                        from .. import utils
                        utils.show_info_message(
                            main_window, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                            "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ñ–∞–π–ª."
                        )
                        return
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                    preview_data = {}
                    if main_window.results_table.rowCount() > 0:
                        row = 0
                        for col in range(main_window.results_table.columnCount()):
                            header_item = main_window.results_table.horizontalHeaderItem(col)
                            cell_item = main_window.results_table.item(row, col)
                            if header_item and cell_item:
                                field_name = header_item.text()
                                field_value = cell_item.text()
                                if field_value:
                                    preview_data[field_name] = field_value
                    
                    file_path = main_window.current_image_path or ""
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å
                if main_window.layoutlm_radio.isChecked():
                    model_type = "LayoutLMv3"
                elif main_window.donut_radio.isChecked():
                    model_type = "Donut"
                elif main_window.gemini_radio.isChecked():
                    model_type = "Gemini 2.0"
                elif hasattr(main_window, 'cloud_llm_radio') and main_window.cloud_llm_radio.isChecked():
                    model_type = f"Cloud LLM ({main_window.cloud_model_selector.currentText()})"
                elif hasattr(main_window, 'local_llm_radio') and main_window.local_llm_radio.isChecked():
                    model_type = f"Local LLM ({main_window.local_model_selector.currentText()})"
                
                # –°–æ–∑–¥–∞—ë–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥
                preview_dialog = optimization_manager.create_optimized_preview_dialog(
                    results=preview_data,
                    model_type=model_type,
                    file_path=file_path,
                    parent=main_window
                )
                
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
                preview_dialog.results_edited.connect(main_window.on_preview_results_edited)
                preview_dialog.export_requested.connect(main_window.on_preview_export_requested)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
                result = preview_dialog.exec()
                
                if result == preview_dialog.DialogCode.Accepted:
                    main_window.status_bar.showMessage("–ò–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
                
            except Exception as e:
                logging.error(f"Optimized preview dialog error: {e}")
                # Fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –º–µ—Ç–æ–¥—É
                original_show_preview_dialog()
        
        # –ü–æ–¥–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥
        main_window.show_preview_dialog = optimized_show_preview_dialog
        
        logging.info("‚úÖ Applied optimizations to main window")
        return True
        
    except Exception as e:
        logging.error(f"Failed to apply optimizations to main window: {e}")
        return False 