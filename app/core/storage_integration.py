"""
–ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ OptimizedStorageManager
"""

import logging
import asyncio
from typing import Optional, Dict, Any, List
from pathlib import Path

from PyQt6.QtCore import QObject, pyqtSignal, QTimer

from .storage_adapter import get_storage_adapter, migrate_to_optimized_storage
from .optimized_storage_manager import get_optimized_storage_manager
from ..settings_manager import SettingsManager

logger = logging.getLogger(__name__)


class StorageIntegration(QObject):
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    
    migration_started = pyqtSignal()
    migration_progress = pyqtSignal(int, str)  # progress, status
    migration_completed = pyqtSignal(bool)  # success
    storage_ready = pyqtSignal()
    
    def __init__(self, settings_manager: SettingsManager):
        super().__init__()
        
        self.settings_manager = settings_manager
        self.storage_adapter = get_storage_adapter(settings_manager)
        self.optimized_storage = get_optimized_storage_manager()
        
        # –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        self.integration_enabled = False
        self.migration_completed_flag = False
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –±–∞—Ç—á–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.batch_timer = QTimer()
        self.batch_timer.timeout.connect(self._process_pending_batches)
        self.batch_timer.start(5000)  # 5 —Å–µ–∫—É–Ω–¥
        
        logger.info("üîß StorageIntegration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def initialize_storage_system(self, auto_migrate: bool = True) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            auto_migrate: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏
            migration_status = self.storage_adapter.get_migration_status()
            
            if migration_status['migration_completed']:
                logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
                self.integration_enabled = True
                self.migration_completed_flag = True
                self.storage_ready.emit()
                return True
            
            if auto_migrate:
                logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –º–∏–≥—Ä–∞—Ü–∏—é...")
                return self.start_migration()
            else:
                logger.info("‚è≥ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ä–µ–∂–∏–º")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def start_migration(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.migration_started.emit()
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
            
            # –≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ (10%)
            self.migration_progress.emit(10, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not self._validate_source_data():
                raise ValueError("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            
            # –≠—Ç–∞–ø 2: –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (40%)
            self.migration_progress.emit(40, "–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
            
            success = self.storage_adapter.start_migration()
            
            if not success:
                raise RuntimeError("–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            
            # –≠—Ç–∞–ø 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (70%)
            self.migration_progress.emit(70, "–í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            if not self._validate_migrated_data():
                raise ValueError("–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            
            # –≠—Ç–∞–ø 4: –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã (90%)
            self.migration_progress.emit(90, "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
            
            self.integration_enabled = True
            self.migration_completed_flag = True
            
            # –≠—Ç–∞–ø 5: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ (100%)
            self.migration_progress.emit(100, "–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            self.migration_completed.emit(True)
            self.storage_ready.emit()
            
            logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            self.migration_progress.emit(0, f"–û—à–∏–±–∫–∞: {str(e)}")
            self.migration_completed.emit(False)
            return False
    
    def _validate_source_data(self) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SettingsManager
            if not self.settings_manager:
                logger.warning("‚ö†Ô∏è SettingsManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫
            settings_file = Path(self.settings_manager.settings_file_path)
            if not settings_file.exists():
                logger.warning("‚ö†Ô∏è –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
            required_sections = ['General', 'Models', 'Paths']
            missing_sections = []
            
            for section in required_sections:
                if section not in self.settings_manager.config:
                    missing_sections.append(section)
            
            if missing_sections:
                logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–µ–∫—Ü–∏–∏: {missing_sections}")
            
            logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def _validate_migrated_data(self) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            test_settings = [
                ('active_model', 'general'),
                ('layoutlm_id', 'models'),
                ('tesseract_path', 'paths')
            ]
            
            for key, category in test_settings:
                value = self.optimized_storage.get_setting(key, None, category)
                if value is None:
                    logger.warning(f"‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {category}.{key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∏–≥—Ä–∞—Ü–∏–∏
            migration_status = self.storage_adapter.get_migration_status()
            detailed_status = migration_status.get('detailed_status', {})
            
            all_migrated = all(detailed_status.values())
            if not all_migrated:
                logger.warning(f"‚ö†Ô∏è –ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã: {detailed_status}")
            
            logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def get_setting(self, key: str, default: Any = None, 
                   section: str = 'general') -> Any:
        """
        –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        """
        if self.integration_enabled:
            return self.storage_adapter.get_setting(key, default, section)
        else:
            # Fallback –∫ SettingsManager
            try:
                return self.settings_manager.get_string(section, key, str(default))
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {section}.{key}: {e}")
                return default
    
    def set_setting(self, key: str, value: Any, 
                   section: str = 'general', batch: bool = False) -> bool:
        """
        –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        if self.integration_enabled:
            return self.storage_adapter.set_setting(key, value, section, batch)
        else:
            # Fallback –∫ SettingsManager
            try:
                self.settings_manager.set_value(section, key, str(value))
                if not batch:
                    self.settings_manager.save_settings()
                return True
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {section}.{key}: {e}")
                return False
    
    def _process_pending_batches(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –±–∞—Ç—á–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        if self.integration_enabled:
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–µ–π –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                self.optimized_storage._process_batch()
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–µ–π: {e}")
    
    def get_storage_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        stats = {
            'integration_enabled': self.integration_enabled,
            'migration_completed': self.migration_completed_flag,
            'storage_type': 'OptimizedStorageManager' if self.integration_enabled else 'SettingsManager'
        }
        
        if self.integration_enabled:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            try:
                storage_stats = self.optimized_storage.get_statistics()
                stats.update(storage_stats)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∏–≥—Ä–∞—Ü–∏–∏
        migration_status = self.storage_adapter.get_migration_status()
        stats['migration_status'] = migration_status
        
        return stats
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
        try:
            if self.batch_timer.isActive():
                self.batch_timer.stop()
            
            if self.integration_enabled:
                self.optimized_storage.cleanup()
            
            logger.info("üßπ StorageIntegration –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ StorageIntegration: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
_storage_integration: Optional[StorageIntegration] = None


def get_storage_integration(settings_manager: SettingsManager = None) -> StorageIntegration:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä StorageIntegration"""
    global _storage_integration
    
    if _storage_integration is None and settings_manager is not None:
        _storage_integration = StorageIntegration(settings_manager)
    
    return _storage_integration


def initialize_optimized_storage(settings_manager: SettingsManager, 
                               auto_migrate: bool = True) -> bool:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ö—Ä–∞–Ω–µ–Ω–∏—è
    
    Args:
        settings_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä SettingsManager
        auto_migrate: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
        
    Returns:
        bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    """
    integration = get_storage_integration(settings_manager)
    if integration:
        return integration.initialize_storage_system(auto_migrate)
    return False 