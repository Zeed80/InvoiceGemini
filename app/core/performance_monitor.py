"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
"""

import time
import psutil
import logging
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict
from threading import Lock
from PyQt6.QtCore import QObject, pyqtSignal, QTimer
import json
from pathlib import Path
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)


@dataclass
class PerformanceMetric:
    """–ú–µ—Ç—Ä–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    name: str
    value: float
    unit: str
    timestamp: float
    category: str
    details: Dict[str, Any] = None


@dataclass
class SystemSnapshot:
    """–°–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    timestamp: float
    cpu_percent: float
    memory_percent: float
    memory_used_mb: float
    memory_available_mb: float
    gpu_memory_used_mb: Optional[float]
    gpu_memory_total_mb: Optional[float]
    active_threads: int
    open_files: int


class PerformanceMonitor(QObject):
    """
    –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    - –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—ç—à–µ–π
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
    """
    
    metric_recorded = pyqtSignal(str, float)  # name, value
    threshold_exceeded = pyqtSignal(str, float, float)  # metric, value, threshold
    
    def __init__(self, reports_dir: str = "data/performance"):
        super().__init__()
        
        self.reports_dir = Path(reports_dir)
        self.reports_dir.mkdir(parents=True, exist_ok=True)
        
        # –•—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        self.metrics: List[PerformanceMetric] = []
        self.system_snapshots: List[SystemSnapshot] = []
        self.operation_times: Dict[str, List[float]] = {}
        
        # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.thresholds = {
            'startup_time': 5.0,        # —Å–µ–∫—É–Ω–¥—ã
            'model_load_time': 10.0,    # —Å–µ–∫—É–Ω–¥—ã
            'ui_response_time': 0.1,    # —Å–µ–∫—É–Ω–¥—ã
            'memory_usage_percent': 80, # –ø—Ä–æ—Ü–µ–Ω—Ç
            'cache_hit_rate': 0.7       # 70%
        }
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.lock = Lock()
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.system_timer = QTimer()
        self.system_timer.timeout.connect(self._collect_system_metrics)
        self.system_timer.start(5000)  # –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
        self.report_timer = QTimer()
        self.report_timer.timeout.connect(self._generate_periodic_report)
        self.report_timer.start(300000)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        
        logger.info("üìä PerformanceMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def record_operation_time(self, operation: str, duration: float, 
                             details: Dict[str, Any] = None):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        with self.lock:
            metric = PerformanceMetric(
                name=f"{operation}_time",
                value=duration,
                unit="seconds",
                timestamp=time.time(),
                category="operation",
                details=details or {}
            )
            
            self.metrics.append(metric)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
            if operation not in self.operation_times:
                self.operation_times[operation] = []
            
            self.operation_times[operation].append(duration)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if len(self.operation_times[operation]) > 1000:
                self.operation_times[operation] = self.operation_times[operation][-500:]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
            threshold_key = f"{operation}_time"
            if threshold_key in self.thresholds:
                threshold = self.thresholds[threshold_key]
                if duration > threshold:
                    self.threshold_exceeded.emit(operation, duration, threshold)
            
            self.metric_recorded.emit(f"{operation}_time", duration)
            
            logger.debug(f"‚è±Ô∏è {operation}: {duration:.3f}—Å")
    
    def record_cache_stats(self, cache_name: str, hits: int, misses: int, 
                          size_mb: float, details: Dict[str, Any] = None):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        hit_rate = hits / (hits + misses) if (hits + misses) > 0 else 0
        
        with self.lock:
            # –ó–∞–ø–∏—Å—å hit rate
            metric_hit_rate = PerformanceMetric(
                name=f"{cache_name}_hit_rate",
                value=hit_rate,
                unit="ratio",
                timestamp=time.time(),
                category="cache",
                details={
                    'hits': hits,
                    'misses': misses,
                    'size_mb': size_mb,
                    **(details or {})
                }
            )
            
            # –ó–∞–ø–∏—Å—å —Ä–∞–∑–º–µ—Ä–∞
            metric_size = PerformanceMetric(
                name=f"{cache_name}_size",
                value=size_mb,
                unit="mb",
                timestamp=time.time(),
                category="cache",
                details=details or {}
            )
            
            self.metrics.extend([metric_hit_rate, metric_size])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
            if hit_rate < self.thresholds.get('cache_hit_rate', 0.7):
                self.threshold_exceeded.emit(
                    f"{cache_name}_hit_rate", hit_rate, self.thresholds['cache_hit_rate']
                )
            
            self.metric_recorded.emit(f"{cache_name}_hit_rate", hit_rate)
            self.metric_recorded.emit(f"{cache_name}_size", size_mb)
    
    def record_memory_usage(self, component: str, memory_mb: float, 
                           details: Dict[str, Any] = None):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º"""
        with self.lock:
            metric = PerformanceMetric(
                name=f"{component}_memory",
                value=memory_mb,
                unit="mb",
                timestamp=time.time(),
                category="memory",
                details=details or {}
            )
            
            self.metrics.append(metric)
            self.metric_recorded.emit(f"{component}_memory", memory_mb)
    
    def _collect_system_metrics(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        try:
            # CPU –∏ –ø–∞–º—è—Ç—å
            cpu_percent = psutil.cpu_percent(interval=None)
            memory = psutil.virtual_memory()
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            process = psutil.Process()
            process_memory = process.memory_info()
            
            # GPU –ø–∞–º—è—Ç—å (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            gpu_memory_used = None
            gpu_memory_total = None
            try:
                import torch
                if torch.cuda.is_available():
                    gpu_memory_used = torch.cuda.memory_allocated() / 1024**2  # MB
                    gpu_memory_total = torch.cuda.get_device_properties(0).total_memory / 1024**2
            except ImportError:
                pass
            
            snapshot = SystemSnapshot(
                timestamp=time.time(),
                cpu_percent=cpu_percent,
                memory_percent=memory.percent,
                memory_used_mb=memory.used / 1024**2,
                memory_available_mb=memory.available / 1024**2,
                gpu_memory_used_mb=gpu_memory_used,
                gpu_memory_total_mb=gpu_memory_total,
                active_threads=process.num_threads(),
                open_files=len(process.open_files())
            )
            
            with self.lock:
                self.system_snapshots.append(snapshot)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞ –ø—Ä–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ 5 —Å–µ–∫)
                max_snapshots = 1440  # 2 —á–∞—Å–∞
                if len(self.system_snapshots) > max_snapshots:
                    self.system_snapshots = self.system_snapshots[-max_snapshots//2:]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏ –ø–∞–º—è—Ç–∏
                if memory.percent > self.thresholds.get('memory_usage_percent', 80):
                    self.threshold_exceeded.emit(
                        'system_memory', memory.percent, self.thresholds['memory_usage_percent']
                    )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
    
    def _generate_periodic_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç"""
        report = self.generate_performance_report()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = self.reports_dir / f"performance_report_{timestamp}.json"
        
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False, default=str)
            
            logger.info(f"üìä –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
            self._cleanup_old_reports()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    def _cleanup_old_reports(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã"""
        cutoff_date = datetime.now() - timedelta(days=7)
        
        for report_file in self.reports_dir.glob("performance_report_*.json"):
            try:
                file_date = datetime.fromtimestamp(report_file.stat().st_mtime)
                if file_date < cutoff_date:
                    report_file.unlink()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –æ—Ç—á–µ—Ç–∞ {report_file}: {e}")
    
    def generate_performance_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        with self.lock:
            current_time = time.time()
            
            # –ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π
            operation_stats = {}
            for operation, times in self.operation_times.items():
                if times:
                    operation_stats[operation] = {
                        'count': len(times),
                        'avg_time': sum(times) / len(times),
                        'min_time': min(times),
                        'max_time': max(times),
                        'last_10_avg': sum(times[-10:]) / min(len(times), 10)
                    }
            
            # –ê–Ω–∞–ª–∏–∑ –∫—ç—à–µ–π
            cache_stats = {}
            cache_metrics = [m for m in self.metrics if m.category == 'cache']
            
            for metric in cache_metrics:
                cache_name = metric.name.split('_')[0]
                if cache_name not in cache_stats:
                    cache_stats[cache_name] = {}
                
                if 'hit_rate' in metric.name:
                    cache_stats[cache_name]['hit_rate'] = metric.value
                elif 'size' in metric.name:
                    cache_stats[cache_name]['size_mb'] = metric.value
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç)
            recent_snapshots = [
                s for s in self.system_snapshots 
                if current_time - s.timestamp <= 1800  # 30 –º–∏–Ω—É—Ç
            ]
            
            system_stats = {}
            if recent_snapshots:
                system_stats = {
                    'avg_cpu_percent': sum(s.cpu_percent for s in recent_snapshots) / len(recent_snapshots),
                    'avg_memory_percent': sum(s.memory_percent for s in recent_snapshots) / len(recent_snapshots),
                    'peak_memory_mb': max(s.memory_used_mb for s in recent_snapshots),
                    'avg_threads': sum(s.active_threads for s in recent_snapshots) / len(recent_snapshots),
                    'current_memory_mb': recent_snapshots[-1].memory_used_mb,
                    'current_cpu_percent': recent_snapshots[-1].cpu_percent
                }
                
                if any(s.gpu_memory_used_mb for s in recent_snapshots):
                    gpu_snapshots = [s for s in recent_snapshots if s.gpu_memory_used_mb]
                    system_stats.update({
                        'avg_gpu_memory_mb': sum(s.gpu_memory_used_mb for s in gpu_snapshots) / len(gpu_snapshots),
                        'peak_gpu_memory_mb': max(s.gpu_memory_used_mb for s in gpu_snapshots),
                        'current_gpu_memory_mb': recent_snapshots[-1].gpu_memory_used_mb
                    })
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–π –ø–æ—Ä–æ–≥–æ–≤
            threshold_violations = []
            recent_metrics = [
                m for m in self.metrics 
                if current_time - m.timestamp <= 3600  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            ]
            
            for metric in recent_metrics:
                threshold_key = metric.name
                if threshold_key in self.thresholds:
                    if metric.value > self.thresholds[threshold_key]:
                        threshold_violations.append({
                            'metric': metric.name,
                            'value': metric.value,
                            'threshold': self.thresholds[threshold_key],
                            'timestamp': metric.timestamp,
                            'severity': 'high' if metric.value > self.thresholds[threshold_key] * 1.5 else 'medium'
                        })
            
            return {
                'generated_at': current_time,
                'period_start': current_time - 3600,  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                'operation_performance': operation_stats,
                'cache_performance': cache_stats,
                'system_metrics': system_stats,
                'threshold_violations': threshold_violations,
                'total_metrics_collected': len(self.metrics),
                'optimization_recommendations': self._generate_recommendations(
                    operation_stats, cache_stats, system_stats, threshold_violations
                )
            }
    
    def _generate_recommendations(self, operation_stats: Dict, cache_stats: Dict, 
                                 system_stats: Dict, violations: List) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π
        for operation, stats in operation_stats.items():
            if stats['avg_time'] > 5.0:  # –û–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥
                recommendations.append(
                    f"‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è '{operation}' –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ (—Å—Ä–µ–¥–Ω–µ–µ: {stats['avg_time']:.2f}—Å)"
                )
        
        # –ê–Ω–∞–ª–∏–∑ –∫—ç—à–µ–π
        for cache_name, stats in cache_stats.items():
            hit_rate = stats.get('hit_rate', 0)
            if hit_rate < 0.5:  # Hit rate –Ω–∏–∂–µ 50%
                recommendations.append(
                    f"üìä –ù–∏–∑–∫–∏–π hit rate –∫—ç—à–∞ '{cache_name}': {hit_rate:.1%}. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞"
                )
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        if system_stats.get('avg_memory_percent', 0) > 80:
            recommendations.append(
                "üß† –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ RAM"
            )
        
        if system_stats.get('avg_cpu_percent', 0) > 80:
            recommendations.append(
                "‚ö° –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ CPU. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤"
            )
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–π –ø–æ—Ä–æ–≥–æ–≤
        critical_violations = [v for v in violations if v['severity'] == 'high']
        if critical_violations:
            recommendations.append(
                f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(critical_violations)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–≤—ã—à–µ–Ω–∏–π –ø–æ—Ä–æ–≥–æ–≤"
            )
        
        if not recommendations:
            recommendations.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        
        return recommendations
    
    def get_operation_statistics(self, operation: str) -> Dict[str, float]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        with self.lock:
            times = self.operation_times.get(operation, [])
            
            if not times:
                return {}
            
            return {
                'count': len(times),
                'avg_time': sum(times) / len(times),
                'min_time': min(times),
                'max_time': max(times),
                'median_time': sorted(times)[len(times) // 2],
                'p95_time': sorted(times)[int(len(times) * 0.95)] if len(times) > 20 else max(times),
                'recent_avg': sum(times[-10:]) / min(len(times), 10)
            }
    
    def set_threshold(self, metric: str, value: float):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏"""
        self.thresholds[metric] = value
        logger.info(f"üìè –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä–æ–≥ –¥–ª—è {metric}: {value}")
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.system_timer.stop()
        self.report_timer.stop()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        final_report = self.generate_performance_report()
        
        report_file = self.reports_dir / "final_performance_report.json"
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(final_report, f, indent=2, ensure_ascii=False, default=str)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        
        logger.info("üìä PerformanceMonitor –æ—á–∏—â–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_performance_monitor: Optional[PerformanceMonitor] = None


def get_performance_monitor() -> PerformanceMonitor:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    global _performance_monitor
    if _performance_monitor is None:
        _performance_monitor = PerformanceMonitor()
    return _performance_monitor


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
def monitor_performance(operation_name: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"""
    def decorator(func):
        def wrapper(*args, **kwargs):
            monitor = get_performance_monitor()
            start_time = time.time()
            
            try:
                result = func(*args, **kwargs)
                duration = time.time() - start_time
                monitor.record_operation_time(operation_name, duration)
                return result
            except Exception as e:
                duration = time.time() - start_time
                monitor.record_operation_time(
                    f"{operation_name}_failed", duration, {'error': str(e)}
                )
                raise
        
        return wrapper
    return decorator 