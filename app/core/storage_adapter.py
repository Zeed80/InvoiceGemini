"""
–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OptimizedStorageManager —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º SettingsManager API
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
"""

import json
import logging
from typing import Any, Optional, Dict, List, Union
from pathlib import Path

from .optimized_storage_manager import get_optimized_storage_manager
from ..settings_manager import SettingsManager

logger = logging.getLogger(__name__)


class StorageAdapter:
    """
    –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç SettingsManager –∫ OptimizedStorageManager
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π API –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self, settings_manager: SettingsManager = None):
        self.settings_manager = settings_manager
        self.optimized_storage = get_optimized_storage_manager()
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å–µ–∫—Ü–∏–π SettingsManager –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º OptimizedStorageManager
        self.section_mapping = {
            'General': 'general',
            'Models': 'models',
            'Gemini': 'gemini',
            'Network': 'network',
            'Paths': 'paths', 
            'Training': 'training',
            'Interface': 'interface',
            'Processing': 'processing',
            'OCR': 'ocr',
            'Prompts': 'prompts'
        }
        
        # –§–ª–∞–≥–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
        self._migration_status = {
            'settings_migrated': False,
            'preferences_migrated': False,
            'api_keys_migrated': False
        }
        
        logger.info("üîÑ StorageAdapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def start_migration(self, force: bool = False) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –æ—Ç SettingsManager –∫ OptimizedStorageManager
        
        Args:
            force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
        """
        try:
            if not self.settings_manager:
                logger.warning("SettingsManager –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é")
                return True
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏
            migration_status = self.optimized_storage.get_setting(
                'migration_completed', False, 'system'
            )
            
            if migration_status and not force:
                logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                return True
            
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
            
            # –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            success = self._migrate_settings()
            if success:
                self._migration_status['settings_migrated'] = True
                logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö  
            success = self._migrate_encrypted_settings()
            if success:
                self._migration_status['api_keys_migrated'] = True
                logger.info("‚úÖ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            success = self._migrate_user_preferences()
            if success:
                self._migration_status['preferences_migrated'] = True
                logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –û—Ç–º–µ—á–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
            all_migrated = all(self._migration_status.values())
            if all_migrated:
                self.optimized_storage.set_setting(
                    'migration_completed', True, 'system'
                )
                self.optimized_storage.set_setting(
                    'migration_timestamp', str(Path(__file__).stat().st_mtime), 'system'
                )
                logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            return all_migrated
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def _migrate_settings(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            migrated_count = 0
            
            for section_name, category in self.section_mapping.items():
                if section_name in self.settings_manager.config:
                    section = self.settings_manager.config[section_name]
                    
                    for key, value in section.items():
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã
                        converted_value = self._convert_setting_value(value)
                        
                        self.optimized_storage.set_setting(
                            key, converted_value, category, batch=True
                        )
                        migrated_count += 1
            
            logger.info(f"üìä –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated_count} –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False
    
    def _migrate_encrypted_settings(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (API –∫–ª—é—á–∏)"""
        try:
            # –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            encrypted_keys = [
                'google_api_key',
                'openai_api_key', 
                'anthropic_api_key',
                'gemini_api_key',
                'huggingface_token',
                'deepseek_api_key',
                'mistral_api_key',
                'xai_api_key'
            ]
            
            migrated_count = 0
            
            for key in encrypted_keys:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ SettingsManager
                    encrypted_value = self.settings_manager.get_encrypted_setting(key)
                    
                    if encrypted_value:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ OptimizedStorageManager –∫–∞–∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                        self.optimized_storage.set_setting(
                            f"encrypted_{key}", encrypted_value, 'security', batch=True
                        )
                        migrated_count += 1
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á {key}: {e}")
            
            logger.info(f"üîê –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated_count} –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False
    
    def _migrate_user_preferences(self) -> bool:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π UI"""
        try:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            ui_settings = [
                ('Interface', 'active_model'),
                ('Interface', 'last_export_path'),
                ('Interface', 'last_open_path'), 
                ('Interface', 'show_preview'),
                ('Processing', 'preprocess_images'),
                ('Processing', 'denoise_level'),
                ('Processing', 'contrast_enhance'),
                ('Processing', 'image_resize'),
                ('OCR', 'use_osd'),
                ('OCR', 'psm_mode'),
                ('OCR', 'oem_mode')
            ]
            
            migrated_count = 0
            
            for section, key in ui_settings:
                try:
                    value = self.settings_manager.get_string(section, key)
                    if value:
                        converted_value = self._convert_setting_value(value)
                        category = self.section_mapping.get(section, 'general')
                        
                        self.optimized_storage.set_setting(
                            key, converted_value, category, batch=True
                        )
                        migrated_count += 1
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å {section}.{key}: {e}")
            
            logger.info(f"üë§ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False
    
    def _convert_setting_value(self, value: str) -> Any:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ INI –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã"""
        if not isinstance(value, str):
            return value
            
        # –ë—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è
        if value.lower() in ('true', 'false'):
            return value.lower() == 'true'
        
        # –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        try:
            if '.' in value:
                return float(value)
            else:
                return int(value)
        except ValueError:
            pass
        
        # JSON –º–∞—Å—Å–∏–≤—ã/–æ–±—ä–µ–∫—Ç—ã
        if value.startswith('[') or value.startswith('{'):
            try:
                return json.loads(value)
            except json.JSONDecodeError:
                pass
        
        # –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        return value
    
    def get_setting(self, key: str, default: Any = None, 
                   section: str = 'general') -> Any:
        """
        –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ OptimizedStorageManager, –∑–∞—Ç–µ–º –∏–∑ SettingsManager
        """
        # –ú–∞–ø–ø–∏–Ω–≥ —Å–µ–∫—Ü–∏–∏
        category = self.section_mapping.get(section, section.lower())
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        value = self.optimized_storage.get_setting(key, None, category)
        
        if value is not None:
            return value
        
        # Fallback –∫ SettingsManager
        if self.settings_manager:
            try:
                return self.settings_manager.get_string(section, key, str(default))
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {section}.{key}: {e}")
        
        return default
    
    def set_setting(self, key: str, value: Any, 
                   section: str = 'general', batch: bool = False) -> bool:
        """
        –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ OptimizedStorageManager –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å SettingsManager
        """
        category = self.section_mapping.get(section, section.lower())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        success = self.optimized_storage.set_setting(key, value, category, batch)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å SettingsManager –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if success and self.settings_manager:
            try:
                self.settings_manager.set_value(section, key, str(value))
                self.settings_manager.save_settings()
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å SettingsManager: {e}")
        
        return success
    
    def get_migration_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏"""
        return {
            'migration_completed': self.optimized_storage.get_setting(
                'migration_completed', False, 'system'
            ),
            'migration_timestamp': self.optimized_storage.get_setting(
                'migration_timestamp', None, 'system'
            ),
            'detailed_status': self._migration_status.copy()
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞
_storage_adapter: Optional[StorageAdapter] = None


def get_storage_adapter(settings_manager: SettingsManager = None) -> StorageAdapter:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä StorageAdapter"""
    global _storage_adapter
    
    if _storage_adapter is None:
        _storage_adapter = StorageAdapter(settings_manager)
    
    return _storage_adapter


def migrate_to_optimized_storage(settings_manager: SettingsManager, 
                               force: bool = False) -> bool:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
    
    Args:
        settings_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä SettingsManager –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
        force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è
        
    Returns:
        bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
    """
    adapter = get_storage_adapter(settings_manager)
    return adapter.start_migration(force) 