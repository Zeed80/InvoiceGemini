#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.settings_manager import SettingsManager
from app.prompt_generator import PromptGenerator

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        settings_manager = SettingsManager()
        prompt_generator = PromptGenerator(settings_manager)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
        prompts_dir = Path("data/prompts")
        prompts_dir.mkdir(exist_ok=True)
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤: {prompts_dir}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≤—Å–µ—Ö –æ–±–ª–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        cloud_providers = ['openai', 'anthropic', 'google', 'mistral', 'deepseek', 'xai']
        for provider in cloud_providers:
            try:
                print(f"üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç –¥–ª—è {provider}...")
                prompt = prompt_generator.generate_cloud_llm_prompt(provider)
                success = prompt_generator.save_prompt_to_file(f"cloud_llm_{provider}", prompt)
                if success:
                    print(f"‚úÖ –ü—Ä–æ–º–ø—Ç –¥–ª—è {provider} —Å–æ–∑–¥–∞–Ω")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è {provider}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è {provider}: {e}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        local_providers = ['ollama']
        for provider in local_providers:
            try:
                print(f"üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç –¥–ª—è {provider}...")
                prompt = prompt_generator.generate_local_llm_prompt(provider)
                success = prompt_generator.save_prompt_to_file(f"local_llm_{provider}", prompt)
                if success:
                    print(f"‚úÖ –ü—Ä–æ–º–ø—Ç –¥–ª—è {provider} —Å–æ–∑–¥–∞–Ω")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è {provider}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è {provider}: {e}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini
        try:
            print("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini...")
            prompt = prompt_generator.generate_gemini_prompt()
            success = prompt_generator.save_prompt_to_file("gemini", prompt)
            if success:
                print("‚úÖ –ü—Ä–æ–º–ø—Ç –¥–ª—è Gemini —Å–æ–∑–¥–∞–Ω")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Gemini")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Gemini: {e}")
        
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìÇ –ü—Ä–æ–º–ø—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {prompts_dir.absolute()}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if prompts_dir.exists():
            prompt_files = list(prompts_dir.glob("*.txt"))
            if prompt_files:
                print(f"\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–º–ø—Ç–æ–≤ ({len(prompt_files)}):")
                for file in sorted(prompt_files):
                    print(f"  - {file.name}")
            else:
                print("‚ö†Ô∏è –§–∞–π–ª—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main()) 