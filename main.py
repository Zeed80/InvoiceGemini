#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
InvoiceExtractorGUI - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—á–µ—Ç–æ–≤-—Ñ–∞–∫—Ç—É—Ä.

–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
"""
import os
import sys
import logging
from pathlib import Path
import builtins

# –ü–∞—Ç—á –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ emoji –Ω–∞ Windows
_original_print = builtins.print

def safe_print(*args, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π print —Å –∑–∞–º–µ–Ω–æ–π emoji –¥–ª—è Windows"""
    emoji_map = {
        'üöÄ': '[START]', '‚úÖ': '[OK]', '‚ö†': '[WARN]', '‚ùå': '[ERROR]',
        'üìä': '[STATS]', 'üîç': '[SEARCH]', '‚ö°': '[FAST]', 'üîß': '[CONFIG]',
        'üéØ': '[TARGET]', 'üìÇ': '[FOLDER]', 'üíæ': '[SAVE]', 'ü§ñ': '[AI]',
        'üìÑ': '[DOC]', 'üìÅ': '[DIR]', 'üîÑ': '[SYNC]', 'üìù': '[NOTE]',
        'üîê': '[SECURE]', 'üìà': '[CHART]', 'üé®': '[DESIGN]', 'üåê': '[WEB]',
        'üîå': '[PLUGIN]',
    }
    
    safe_args = []
    for arg in args:
        text = str(arg)
        for emoji, replacement in emoji_map.items():
            text = text.replace(emoji, replacement)
        safe_args.append(text)
    
    try:
        _original_print(*safe_args, **kwargs)
    except UnicodeEncodeError:
        ascii_args = [arg.encode('ascii', 'replace').decode('ascii') for arg in safe_args]
        _original_print(*ascii_args, **kwargs)

# –ó–∞–º–µ–Ω—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é print
builtins.print = safe_print

# Setup HF_HUB_OFFLINE first (–≤–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã)
os.environ["HF_HUB_OFFLINE"] = "0"

# Setup UTF-8 encoding for Windows
if sys.platform == "win32":
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è stdout/stderr
        import codecs
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.detach())
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É –∫–æ–Ω—Å–æ–ª–∏ Windows –Ω–∞ UTF-8
        import subprocess
        try:
            subprocess.run(['chcp', '65001'], capture_output=True, check=False)
        except (subprocess.SubprocessError, OSError, FileNotFoundError) as e:
            # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω—Å–æ–ª–∏ - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã
            pass
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É: {e}")

import huggingface_hub

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞ –¥–æ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
os.environ["TRANSFORMERS_OFFLINE"] = "1"

# –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.insert(0, current_dir)

from PyQt6.QtWidgets import QApplication, QStyleFactory
from PyQt6.QtCore import Qt, QLocale, QTranslator

from app.main_window import MainWindow
from app import config
from app import utils
from app.settings_manager import settings_manager


class SafeFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π emoji –¥–ª—è Windows"""
    
    emoji_map = {
        'üöÄ': '[START]', '‚úÖ': '[OK]', '‚ö†': '[WARN]', '‚ùå': '[ERROR]',
        'üìä': '[STATS]', 'üîç': '[SEARCH]', '‚ö°': '[FAST]', 'üîß': '[CONFIG]',
        'üéØ': '[TARGET]', 'üìÇ': '[FOLDER]', 'üíæ': '[SAVE]', 'ü§ñ': '[AI]',
        'üìÑ': '[DOC]', 'üìÅ': '[DIR]', 'üîÑ': '[SYNC]', 'üìù': '[NOTE]',
        'üîê': '[SECURE]', 'üìà': '[CHART]', 'üé®': '[DESIGN]', 'üåê': '[WEB]',
        'üîå': '[PLUGIN]', 'üßπ': '[CLEAN]',
    }
    
    def format(self, record):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
        message = super().format(record)
        # –ó–∞–º–µ–Ω—è–µ–º emoji
        for emoji, replacement in self.emoji_map.items():
            message = message.replace(emoji, replacement)
        return message

def setup_logging():
    """Setup enhanced application logging."""
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    # Create logger
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    # Create formatters with safe emoji handling
    detailed_formatter = SafeFormatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s'
    )
    simple_formatter = SafeFormatter(
        '%(asctime)s - %(levelname)s - %(message)s'
    )
    
    # File handler with detailed format
    file_handler = logging.FileHandler(log_dir / 'app.log', encoding='utf-8')
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(detailed_formatter)
    
    # Console handler with simple format
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(simple_formatter)
    
    # Add handlers
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    # Set specific loggers to WARNING to reduce noise
    logging.getLogger('transformers').setLevel(logging.WARNING)
    logging.getLogger('PIL').setLevel(logging.WARNING)
    logging.getLogger('huggingface_hub').setLevel(logging.WARNING)
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    
    return logger


def setup_portable_mode():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    logger = logging.getLogger(__name__)
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...")
    
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
    app_dir = os.path.dirname(os.path.abspath(__file__))
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    data_dir = os.path.join(app_dir, "data")
    models_dir = os.path.join(data_dir, "models")
    temp_dir = os.path.join(data_dir, "temp")
    secrets_dir = os.path.join(data_dir, "secrets")
    
    for directory in [data_dir, models_dir, temp_dir, secrets_dir]:
        os.makedirs(directory, exist_ok=True)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
    
    logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {data_dir}")
    logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–µ–π: {models_dir}")
    logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {temp_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞
    if hasattr(settings_manager, 'load_settings'):
        logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
        settings_manager.load_settings()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ config –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º...")
    try:
        config.update_paths_from_settings()
        logger.info(f"Poppler Path: {config.POPPLER_PATH}")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π: {e}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HF —Ç–æ–∫–µ–Ω–∞
    if config.HF_TOKEN:
        logger.info("–¢–æ–∫–µ–Ω Hugging Face –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        os.environ["HF_TOKEN"] = config.HF_TOKEN
        # –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è, –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
    else:
        logger.info("–¢–æ–∫–µ–Ω Hugging Face –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google API –∫–ª—é—á–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    google_api_configured = False
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    try:
        from app.security.secrets_manager import SecretsManager
        
        secrets_manager = SecretsManager()
        google_api_key = secrets_manager.get_secret('google_api_key')
        
        if google_api_key:
            logger.info("Google API –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω –∏–∑ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
            import google.generativeai as genai
            genai.configure(api_key=google_api_key)
            logger.info("Google Gemini API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–∑ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
            google_api_configured = True
    except ImportError:
        logger.debug("–ú–æ–¥—É–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º: {e}")
    
    # Fallback –∫ –æ–±—ã—á–Ω–æ–º—É API –∫–ª—é—á—É
    if not google_api_configured and config.GOOGLE_API_KEY:
        logger.info("Google API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        try:
            import google.generativeai as genai
            genai.configure(api_key=config.GOOGLE_API_KEY)
            logger.info("Google Gemini API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        except ImportError:
            logger.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ google-genai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, Gemini –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini API: {e}")
    elif not google_api_configured:
        logger.info("Google API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
    if config.OFFLINE_MODE:
        logger.info("–û—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")
        os.environ["HF_HUB_OFFLINE"] = "1"
        os.environ["TRANSFORMERS_OFFLINE"] = "1"
    else:
        logger.info("–û—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω")
        os.environ["HF_HUB_OFFLINE"] = "0"
        os.environ["TRANSFORMERS_OFFLINE"] = "0"


def setup_application(app: QApplication):
    """Setup Qt application properties with enhanced logging."""
    logger = logging.getLogger(__name__)
    
    logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º QApplication...")
    app.setApplicationName(config.APP_NAME)
    app.setApplicationVersion(config.APP_VERSION)
    app.setOrganizationName(config.ORGANIZATION_NAME)
    logger.info("QApplication —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
    logger.info("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é...")
    translator = QTranslator()
    locale = QLocale.system().name()
    if translator.load(f"translations/{locale}.qm"):
        app.installTranslator(translator)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è {locale}")
    else:
        logger.info("–§–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    logger.info("–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    logger.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å Fusion...")
    app.setStyle(QStyleFactory.create("Fusion"))
    logger.info("–°—Ç–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    logger.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å...")
    locale = QLocale(QLocale.Language.Russian, QLocale.Country.Russia)
    QLocale.setDefault(locale)
    logger.info("–õ–æ–∫–∞–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


def create_main_window():
    """Create and configure main window with error handling."""
    logger = logging.getLogger(__name__)
    
    try:
        logger.info("–°–æ–∑–¥–∞–µ–º MainWindow...")
        main_window = MainWindow()
        logger.info("MainWindow —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if hasattr(main_window, 'results_table'):
            improve_table_display(main_window.results_table)
            logger.info("–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã")
        
        # üöÄ –ê–ö–¢–ò–í–ê–¶–ò–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô
        logger.info("üöÄ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")
        try:
            from app.core.optimization_integration import apply_optimizations_to_main_window
            
            success = apply_optimizations_to_main_window(main_window)
            if success:
                logger.info("‚úÖ –í—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
                logger.info("   üîç Preview Dialog v2.0 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                logger.info("   ‚ö° Optimized File Processor –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω") 
                logger.info("   üîß Unified Plugin Manager –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                logger.info("   üéØ Performance Monitoring –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å")
                
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è –ú–æ–¥—É–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
            logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {e}")
            logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        
        return main_window
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MainWindow: {e}", exc_info=True)
        raise


def improve_table_display(table):
    """Improve table column display and sizing."""
    try:
        from PyQt6.QtWidgets import QHeaderView
        
        header = table.horizontalHeader()
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
        column_count = table.columnCount()
        if column_count > 0:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            for i in range(column_count):
                header_item = table.horizontalHeaderItem(i)
                if header_item:
                    column_name = header_item.text().lower()
                    
                    # –£–∑–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ–ª–µ–π
                    if any(word in column_name for word in ['‚Ññ', 'number', '–¥–∞—Ç–∞', 'date', '%']):
                        header.setSectionResizeMode(i, QHeaderView.ResizeMode.ResizeToContents)
                        table.setColumnWidth(i, 120)
                    
                    # –°—Ä–µ–¥–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
                    elif any(word in column_name for word in ['—Å—É–º–º–∞', 'amount', 'total', '–Ω–¥—Å', 'vat']):
                        header.setSectionResizeMode(i, QHeaderView.ResizeMode.Interactive)
                        table.setColumnWidth(i, 140)
                    
                    # –®–∏—Ä–æ–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
                    elif any(word in column_name for word in ['–ø–æ—Å—Ç–∞–≤—â–∏–∫', 'supplier', 'sender', '–Ω–∞–∑–≤–∞–Ω–∏–µ', 'name', '–æ–ø–∏—Å–∞–Ω–∏–µ', 'description']):
                        header.setSectionResizeMode(i, QHeaderView.ResizeMode.Stretch)
                    
                    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
                    else:
                        header.setSectionResizeMode(i, QHeaderView.ResizeMode.Interactive)
                        table.setColumnWidth(i, 100)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—â–∏—Ö —Å–≤–æ–π—Å—Ç–≤ —Ç–∞–±–ª–∏—Ü—ã
            table.setAlternatingRowColors(True)
            table.verticalHeader().setVisible(False)
            table.setWordWrap(True)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ–Ω–∫–∞ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫ –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            table.resizeRowsToContents()
            
    except Exception as e:
        logger = logging.getLogger(__name__)
        logger.warning(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")


def main():
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
    –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä QApplication –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ.
    """
    # Setup logging first
    logger = setup_logging()
    logger.info("=" * 60)
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º InvoiceExtractorGUI...")
    logger.info(f"HF_HUB_OFFLINE –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0")
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ portable-—Ä–µ–∂–∏–º–∞
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É portable-—Ä–µ–∂–∏–º–∞...")
        setup_portable_mode()
        logger.info("Portable —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("–°–æ–∑–¥–∞–µ–º QApplication...")
        app = QApplication(sys.argv)
        logger.info("QApplication —Å–æ–∑–¥–∞–Ω")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        setup_application(app)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        main_window = create_main_window()
        
        logger.info("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ...")
        main_window.show()
        logger.info("–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ")
        
        # UX IMPROVEMENT: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏ –ø–æ–∫–∞–∑ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        from app.settings_manager import settings_manager
        first_run = settings_manager.get_bool('General', 'first_run_completed', False)
        
        if not first_run:
            logger.info("–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Å—Ç–µ—Ä –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞")
            try:
                from app.ui.components.onboarding_wizard import OnboardingWizard
                
                wizard = OnboardingWizard(main_window)
                wizard.setup_completed.connect(main_window.on_onboarding_completed)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Å—Ç–µ—Ä —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                from PyQt6.QtCore import QTimer
                QTimer.singleShot(500, wizard.show)
                
                logger.info("–ú–∞—Å—Ç–µ—Ä –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∞—Å—Ç–µ—Ä–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: {e}", exc_info=True)
        
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π...")
        logger.info("=" * 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        exit_code = app.exec()
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        sys.exit(exit_code)
        
    except Exception as e:
        logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –°–±–æ–π –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}", exc_info=True)
        # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 