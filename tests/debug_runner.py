#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import traceback
import logging
import os
from pathlib import Path
import builtins

# –ü–∞—Ç—á –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ emoji –Ω–∞ Windows
_original_print = builtins.print

def safe_print(*args, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π print —Å –∑–∞–º–µ–Ω–æ–π emoji –¥–ª—è Windows"""
    emoji_map = {
        'üöÄ': '[START]', '‚úÖ': '[OK]', '‚ö†': '[WARN]', '‚ùå': '[ERROR]',
        'üìä': '[STATS]', 'üîç': '[SEARCH]', '‚ö°': '[FAST]', 'üîß': '[CONFIG]',
        'üéØ': '[TARGET]', 'üìÇ': '[FOLDER]', 'üíæ': '[SAVE]', 'ü§ñ': '[AI]',
        'üìÑ': '[DOC]', 'üìÅ': '[DIR]', 'üîÑ': '[SYNC]', 'üìù': '[NOTE]',
        'üîê': '[SECURE]', 'üìà': '[CHART]', 'üé®': '[DESIGN]', 'üåê': '[WEB]',
        'üîå': '[PLUGIN]',
    }
    
    safe_args = []
    for arg in args:
        text = str(arg)
        for emoji, replacement in emoji_map.items():
            text = text.replace(emoji, replacement)
        safe_args.append(text)
    
    try:
        _original_print(*safe_args, **kwargs)
    except UnicodeEncodeError:
        ascii_args = [arg.encode('ascii', 'replace').decode('ascii') for arg in safe_args]
        _original_print(*ascii_args, **kwargs)

# –ó–∞–º–µ–Ω—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é print
builtins.print = safe_print

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
current_dir = Path(__file__).resolve().parent
project_root = current_dir.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(current_dir))

class SafeFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π emoji –¥–ª—è Windows"""
    
    emoji_map = {
        'üöÄ': '[START]', '‚úÖ': '[OK]', '‚ö†': '[WARN]', '‚ùå': '[ERROR]',
        'üìä': '[STATS]', 'üîç': '[SEARCH]', '‚ö°': '[FAST]', 'üîß': '[CONFIG]',
        'üéØ': '[TARGET]', 'üìÇ': '[FOLDER]', 'üíæ': '[SAVE]', 'ü§ñ': '[AI]',
        'üìÑ': '[DOC]', 'üìÅ': '[DIR]', 'üîÑ': '[SYNC]', 'üìù': '[NOTE]',
        'üîê': '[SECURE]', 'üìà': '[CHART]', 'üé®': '[DESIGN]', 'üåê': '[WEB]',
        'üîå': '[PLUGIN]', 'üßπ': '[CLEAN]',
    }
    
    def format(self, record):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
        message = super().format(record)
        # –ó–∞–º–µ–Ω—è–µ–º emoji
        for emoji, replacement in self.emoji_map.items():
            message = message.replace(emoji, replacement)
        return message

def setup_debug_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    logs_dir = Path("logs")
    logs_dir.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    safe_formatter = SafeFormatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–º
    file_handler = logging.FileHandler(logs_dir / "debug_session.log", mode='w', encoding='utf-8')
    file_handler.setFormatter(safe_formatter)
    
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(safe_formatter)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logging.basicConfig(
        level=logging.DEBUG,
        handlers=[file_handler, console_handler]
    )
    
    # –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –¥–ª—è –≤–∞–∂–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    logging.getLogger('PyQt6').setLevel(logging.WARNING)  # –£–º–µ–Ω—å—à–∞–µ–º —à—É–º –æ—Ç PyQt
    logging.getLogger('app').setLevel(logging.DEBUG)
    logging.getLogger('app.main_window').setLevel(logging.DEBUG)
    logging.getLogger('app.processing_engine').setLevel(logging.DEBUG)
    logging.getLogger('app.gemini_processor').setLevel(logging.DEBUG)
    
    print("–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    print(f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {logs_dir.absolute()}")

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    missing_deps = []
    
    try:
        import PyQt6
        print("OK PyQt6 –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        missing_deps.append("PyQt6")
    
    try:
        import PIL
        print("OK Pillow –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        missing_deps.append("Pillow")
    
    try:
        import transformers
        print("OK transformers –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        missing_deps.append("transformers")
    
    try:
        import torch
        print("OK torch –¥–æ—Å—Ç—É–ø–µ–Ω")
        if torch.cuda.is_available():
            print(f"CUDA –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.get_device_name()}")
        else:
            print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
    except ImportError:
        missing_deps.append("torch")
    
    try:
        import pytesseract
        print("OK pytesseract –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        missing_deps.append("pytesseract")
    
    if missing_deps:
        print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing_deps)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install " + " ".join(missing_deps))
        return False
    
    print("–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ")
    return True

def check_tesseract():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Tesseract OCR."""
    
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ Tesseract OCR...")
    
    try:
        import pytesseract
        version = pytesseract.get_tesseract_version()
        print(f"OK Tesseract –¥–æ—Å—Ç—É–ø–µ–Ω: v{version}")
        return True
    except Exception as e:
        print(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å Tesseract: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Tesseract —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –ø—É—Ç—å –∫ –Ω–µ–º—É —É–∫–∞–∑–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        return False

def check_cloud_models_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±–ª–∞—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."""
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–±–ª–∞—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:")
    
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
        import app.config as app_config
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Google Gemini API –∫–ª—é—á
        google_api_key = getattr(app_config, 'GOOGLE_API_KEY', None)
        if google_api_key and len(google_api_key.strip()) > 10:
            print("OK Google Gemini API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("Google Gemini API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            print("   –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã - Google")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Google Generative AI
        try:
            import google.generativeai as genai
            print("OK Google GenerativeAI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except ImportError:
            print("Google GenerativeAI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install google-generativeai")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –æ–±–ª–∞—á–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        openai_key = getattr(app_config, 'OPENAI_API_KEY', None)
        if openai_key and len(openai_key.strip()) > 10:
            print("OK OpenAI API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
            
        anthropic_key = getattr(app_config, 'ANTHROPIC_API_KEY', None)
        if anthropic_key and len(anthropic_key.strip()) > 10:
            print("OK Anthropic API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("Anthropic API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–ª–∞—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {e}")

def check_processing_components():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        modules_to_check = [
            ('app.main_window', '–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ'),
            ('app.processing_engine', '–î–≤–∏–∂–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏'),
            ('app.gemini_processor', 'Gemini –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä'),
            ('app.threads', '–ü–æ—Ç–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏'),
            ('app.plugins.universal_plugin_manager', '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤')
        ]
        
        for module_name, description in modules_to_check:
            try:
                __import__(module_name)
                print(f"OK {description}: –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            except ImportError as e:
                print(f"–û—à–∏–±–∫–∞: {description} –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω - {e}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π."""
    print("=== –ó–∞–ø—É—Å–∫ InvoiceGemini –≤ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ ===")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_debug_logging()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    check_cloud_models_availability()
    check_processing_components()
    
    print("\n–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        from app.main_window import MainWindow
        from PyQt6.QtWidgets import QApplication
        from PyQt6.QtCore import Qt, QTranslator
        
        # –°–æ–∑–¥–∞–µ–º QApplication
        app = QApplication(sys.argv)
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í PyQt6 —ç—Ç–∏ –∞—Ç—Ä–∏–±—É—Ç—ã —É—Å—Ç–∞—Ä–µ–ª–∏/—É–¥–∞–ª–µ–Ω—ã
        # app.setAttribute(Qt.ApplicationAttribute.AA_UseHighDpiPixmaps)  # –£—Å—Ç–∞—Ä–µ–ª–æ –≤ PyQt6
        # app.setAttribute(Qt.ApplicationAttribute.AA_EnableHighDpiScaling)  # –£—Å—Ç–∞—Ä–µ–ª–æ –≤ PyQt6
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        try:
            from app.settings_manager import settings_manager
            lang_code = settings_manager.get_string('Interface', 'language', 'ru')
            translator = QTranslator()
            translations_dir = os.path.join(os.path.dirname(__file__), 'translations')
            qm_path = os.path.join(translations_dir, f'invoicegemini_{lang_code}.qm')
            if translator.load(qm_path):
                app.installTranslator(translator)
                # –•—Ä–∞–Ω–∏–º —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω —Å–±–æ—Ä—â–∏–∫–æ–º –º—É—Å–æ—Ä–∞
                setattr(app, '_invoice_translator', translator)
        except Exception as e:
            print(f"‚ö†Ô∏è –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        window = MainWindow()
        window.show()
        
        print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        print("–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –æ–±–ª–∞—á–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        sys.exit(app.exec())
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main() 