#!/usr/bin/env python3
"""
Test Script for InvoiceGemini Optimizations
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import sys
import time
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('optimization_test.log')
    ]
)

def test_preview_dialog():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Preview Dialog"""
    print("\nüîç Testing Optimized Preview Dialog...")
    
    try:
        from app.ui.preview_dialog_v2 import OptimizedPreviewDialog
        from PyQt6.QtWidgets import QApplication
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        app = QApplication.instance()
        if app is None:
            app = QApplication([])
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            "–ü–æ—Å—Ç–∞–≤—â–∏–∫": "–û–û–û –¢–µ—Å—Ç –ö–æ–º–ø–∞–Ω–∏—è",
            "–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞": "INV-001",
            "–î–∞—Ç–∞": "01.01.2024",
            "–°—É–º–º–∞": "15000.00",
            "–ù–î–°": "3000.00",
            "–ò—Ç–æ–≥–æ": "18000.00"
        }
        
        start_time = time.time()
        
        # –°–æ–∑–¥–∞—ë–º –¥–∏–∞–ª–æ–≥
        dialog = OptimizedPreviewDialog(
            results=test_data,
            model_type="Test Model",
            file_path="test_invoice.pdf"
        )
        
        creation_time = time.time() - start_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        assert dialog.data_model is not None
        assert len(dialog.data_model.current_results) == len(test_data)
        assert dialog.windowTitle().startswith("üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä v2.0")
        
        print(f"   ‚úÖ Dialog created in {creation_time:.3f}s")
        print(f"   ‚úÖ Data model initialized with {len(test_data)} fields")
        print(f"   ‚úÖ UI components loaded successfully")
        
        # –û—á–∏—Å—Ç–∫–∞
        dialog.deleteLater()
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Preview Dialog test failed: {e}")
        return False


def test_optimized_processor():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤"""
    print("\n‚ö° Testing Optimized File Processor...")
    
    try:
        from app.core.optimized_processor import OptimizedFileProcessor, ProcessingTask
        from PyQt6.QtCore import QCoreApplication
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        app = QCoreApplication.instance()
        if app is None:
            app = QCoreApplication([])
        
        processor = OptimizedFileProcessor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        assert processor.max_workers > 0
        assert processor.executor is not None
        assert not processor.is_processing
        
        print(f"   ‚úÖ Processor initialized with {processor.max_workers} workers")
        print(f"   ‚úÖ Batch size: {processor.batch_size}")
        print(f"   ‚úÖ Thread pool ready")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
        test_files = ["test1.pdf", "test2.pdf", "test3.pdf"]
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏)
        processor.task_queue.clear()
        for i, file_path in enumerate(test_files):
            task = ProcessingTask(
                file_path=file_path,
                task_id=f"test_task_{i}",
                model_type="test"
            )
            processor.task_queue.append(task)
        
        assert len(processor.task_queue) == len(test_files)
        print(f"   ‚úÖ Created {len(test_files)} test tasks")
        
        # –û—á–∏—Å—Ç–∫–∞
        processor.cleanup()
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Optimized Processor test failed: {e}")
        return False


def test_unified_plugin_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–ª–∞–≥–∏–Ω–æ–≤"""
    print("\nüîß Testing Unified Plugin Manager...")
    
    try:
        from app.plugins.unified_plugin_manager import UnifiedPluginManager, PluginRegistry
        from app.plugins.base_plugin import PluginType
        
        # –°–æ–∑–¥–∞—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑ –∞–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        manager = UnifiedPluginManager(auto_scan=False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        assert manager.registry is not None
        assert manager.loader is not None
        assert manager.builtin_dir.exists() or True  # –ú–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–∞—Ö
        assert manager.user_dir is not None
        
        print(f"   ‚úÖ Manager initialized")
        print(f"   ‚úÖ Builtin dir: {manager.builtin_dir}")
        print(f"   ‚úÖ User dir: {manager.user_dir}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–µ—Å—Ç—Ä
        registry = manager.registry
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –ø–æ —Ç–∏–ø–∞–º
        for plugin_type in PluginType:
            plugins = registry.get_by_type(plugin_type)
            assert isinstance(plugins, list)
        
        print(f"   ‚úÖ Registry initialized with {len(PluginType)} plugin types")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = manager.get_statistics()
        assert 'total_plugins' in stats
        assert 'by_type' in stats
        
        print(f"   ‚úÖ Statistics available: {stats['total_plugins']} total plugins")
        
        # –û—á–∏—Å—Ç–∫–∞
        manager.cleanup()
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Unified Plugin Manager test failed: {e}")
        return False


def test_optimization_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    print("\nüéØ Testing Optimization Integration...")
    
    try:
        from app.core.optimization_integration import OptimizationManager, get_optimization_manager
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
        manager = get_optimization_manager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        assert manager is not None
        assert len(manager.optimizations) > 0
        assert manager.performance_stats is not None
        
        print(f"   ‚úÖ Optimization manager created")
        print(f"   ‚úÖ Available optimizations: {list(manager.optimizations.keys())}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—á—ë—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        report = manager.get_performance_report()
        assert 'optimization_status' in report
        assert 'performance_stats' in report
        assert 'active_optimizations' in report
        
        active_count = len(report['active_optimizations'])
        total_count = len(manager.optimizations)
        
        print(f"   ‚úÖ Performance report generated")
        print(f"   ‚úÖ Active optimizations: {active_count}/{total_count}")
        
        # –û—á–∏—Å—Ç–∫–∞
        manager.cleanup()
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Optimization Integration test failed: {e}")
        return False


def run_performance_benchmark():
    """–ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüìä Running Performance Benchmark...")
    
    try:
        from app.ui.preview_dialog_v2 import OptimizedPreviewDialog
        from PyQt6.QtWidgets import QApplication
        
        app = QApplication.instance()
        if app is None:
            app = QApplication([])
        
        # –ë–µ–Ω—á–º–∞—Ä–∫ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
        iterations = 10
        total_time = 0
        
        for i in range(iterations):
            start = time.time()
            
            dialog = OptimizedPreviewDialog(
                results={"test": f"value_{i}"},
                model_type="Test",
                file_path="test.pdf"
            )
            
            creation_time = time.time() - start
            total_time += creation_time
            
            dialog.deleteLater()
        
        avg_time = total_time / iterations
        
        print(f"   üìà Average dialog creation time: {avg_time:.3f}s")
        print(f"   üìà Total time for {iterations} dialogs: {total_time:.3f}s")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if avg_time < 0.1:
            performance_rating = "–û—Ç–ª–∏—á–Ω–∞—è"
        elif avg_time < 0.5:
            performance_rating = "–•–æ—Ä–æ—à–∞—è"
        elif avg_time < 1.0:
            performance_rating = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è"
        else:
            performance_rating = "–¢—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
        
        print(f"   üèÜ Performance rating: {performance_rating}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Performance benchmark failed: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ InvoiceGemini Optimization Test Suite")
    print("=" * 50)
    
    tests = [
        ("Preview Dialog v2.0", test_preview_dialog),
        ("Optimized File Processor", test_optimized_processor),
        ("Unified Plugin Manager", test_unified_plugin_manager),
        ("Optimization Integration", test_optimization_integration),
        ("Performance Benchmark", run_performance_benchmark)
    ]
    
    results = []
    start_time = time.time()
    
    for test_name, test_func in tests:
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"‚ùå {test_name} crashed: {e}")
            results.append((test_name, False))
    
    total_time = time.time() - start_time
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print("üìã Test Results Summary:")
    print("=" * 50)
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if success:
            passed += 1
    
    print(f"\nüéØ Tests passed: {passed}/{len(tests)}")
    print(f"‚è±Ô∏è  Total time: {total_time:.2f}s")
    
    if passed == len(tests):
        print("üéâ All optimizations working correctly!")
        return 0
    else:
        print("‚ö†Ô∏è  Some optimizations need attention.")
        return 1


if __name__ == "__main__":
    sys.exit(main()) 