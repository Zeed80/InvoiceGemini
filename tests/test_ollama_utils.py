#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç Ollama - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
"""
import sys
import os
import io

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from app.plugins.models.ollama_utils import (
    OllamaUtils,
    check_ollama_availability,
    get_ollama_models,
    check_ollama_status,
    is_vision_model
)
from app.plugins.models.ollama_diagnostic import OllamaDiagnostic


def test_ollama_utils():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã Ollama"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OllamaUtils...")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
    is_available = check_ollama_availability()
    if is_available:
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ Ollama: ollama serve")
        return False
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
    print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π...")
    models = get_ollama_models()
    if models:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
        print("üìã –°–ø–∏—Å–æ–∫:")
        for i, model in enumerate(models[:10], 1):
            print(f"   {i}. {model}")
        if len(models) > 10:
            print(f"   ... –∏ –µ—â–µ {len(models) - 10}")
    else:
        print("‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥–µ–ª—å: ollama pull llama3.2-vision:11b")
        return False
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å –∫–æ–¥–æ–º
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å –∫–æ–¥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    is_ok, status_code = check_ollama_status()
    status_descriptions = {
        "OK": "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
        "CFG": "‚öôÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (–Ω–µ—Ç –º–æ–¥–µ–ª–µ–π)",
        "ERR": "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        "TMO": "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
    }
    print(f"{status_descriptions.get(status_code, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')}")
    print(f"   –°—Ç–∞—Ç—É—Å: {is_ok}, –ö–æ–¥: {status_code}")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏...")
    if models:
        test_model = models[0]
        is_model_available = OllamaUtils.is_model_available(test_model)
        if is_model_available:
            print(f"‚úÖ –ú–æ–¥–µ–ª—å '{test_model}' –¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            print(f"‚ùå –ú–æ–¥–µ–ª—å '{test_model}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
    print("\n5Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
    version = OllamaUtils.get_server_version()
    if version:
        print(f"‚úÖ –í–µ—Ä—Å–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {version}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é")
    
    # –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è vision –º–æ–¥–µ–ª–µ–π
    print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è vision –º–æ–¥–µ–ª–µ–π...")
    
    vision_test_cases = [
        # (model_name, expected_is_vision)
        ("gemma3:4b", True),           # Gemma3 - –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è
        ("gemma3:12b", True),          # Gemma3 - –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è
        ("qwen2.5vl:3b", True),        # Qwen Vision-Language
        ("llama3.2-vision:11b", True), # Llama Vision
        ("llava:7b", True),            # LLaVA
        ("mistral:7b", False),         # Text-only
        ("llama3.1:8b", False),        # Text-only
        ("qwen2.5:7b", False),         # Text-only (–Ω–µ vl)
    ]
    
    all_passed = True
    for model_name, expected in vision_test_cases:
        result = is_vision_model(model_name)
        status = "‚úÖ" if result == expected else "‚ùå"
        vision_label = "Vision" if result else "Text"
        print(f"   {status} {model_name}: {vision_label} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {'Vision' if expected else 'Text'})")
        if result != expected:
            all_passed = False
    
    if all_passed:
        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ vision –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–π–¥–µ–Ω—ã")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ vision –º–æ–¥–µ–ª–µ–π –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    return all_passed


def test_ollama_diagnostic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É Ollama"""
    print("\nüî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OllamaDiagnostic...")
    print("=" * 60)
    
    diagnostic = OllamaDiagnostic("http://localhost:11434")
    result = diagnostic.run_full_diagnostic(timeout=5)
    
    if result.server_available:
        print(f"\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   –í–µ—Ä—Å–∏—è: {result.server_version}")
        print(f"   –ú–æ–¥–µ–ª–µ–π: {len(result.models_available)}")
        print(f"   Vision –º–æ–¥–µ–ª–µ–π: {len(result.vision_models)}")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö: {len(result.recommended_models)}")
        
        if result.recommended_models:
            print(f"\n‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å—á–µ—Ç–æ–≤:")
            for model in result.recommended_models[:5]:
                print(f"   ‚Ä¢ {model}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print(diagnostic.format_diagnostic_report(result))
        
        return True
    else:
        print(f"\n‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞")
        print(f"   –û—à–∏–±–∫–∞: {result.error_message}")
        return False


def test_no_code_duplication():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è...")
    print("=" * 60)
    
    print("\n‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã:")
    print("   ‚Ä¢ OllamaUtils.check_availability()")
    print("   ‚Ä¢ OllamaUtils.get_models()")
    print("   ‚Ä¢ OllamaUtils.check_status()")
    print("   ‚Ä¢ OllamaUtils.is_model_available()")
    print("   ‚Ä¢ OllamaUtils.get_server_version()")
    print("   ‚Ä¢ OllamaUtils.is_vision_model() [–ù–û–í–û–ï]")
    
    print("\n‚úÖ –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    print("   ‚Ä¢ check_ollama_availability()")
    print("   ‚Ä¢ get_ollama_models()")
    print("   ‚Ä¢ check_ollama_status()")
    print("   ‚Ä¢ is_vision_model() [–ù–û–í–û–ï]")
    
    print("\n‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
    print("   ‚Ä¢ OllamaDiagnostic.run_full_diagnostic()")
    print("   ‚Ä¢ OllamaDiagnostic.format_diagnostic_report()")
    print("   ‚Ä¢ OllamaDiagnostic.VISION_MODELS [–û–ë–ù–û–í–õ–ï–ù–û]")
    
    print("\n‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥")
    print("   –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
    
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ollama Utils")
    print("=" * 60)
    
    tests_passed = 0
    tests_total = 3
    
    # –¢–µ—Å—Ç 1: –£—Ç–∏–ª–∏—Ç—ã
    if test_ollama_utils():
        tests_passed += 1
        print("\n‚úÖ –¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç –ø—Ä–æ–π–¥–µ–Ω")
    else:
        print("\n‚ùå –¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç 2: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    if test_ollama_diagnostic():
        tests_passed += 1
        print("\n‚úÖ –¢–µ—Å—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–π–¥–µ–Ω")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç 3: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if test_no_code_duplication():
        tests_passed += 1
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")
    else:
        print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/{tests_total}")
    
    if tests_passed == tests_total:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ")
        return 0
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)

